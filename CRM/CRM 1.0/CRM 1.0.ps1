#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: d6ffc862-6353-4720-ab83-0d55ec2a927f
# Source File: ..\CRM\CRM.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
SwIAAB+LCAAAAAAABACNkstOwzAQRfeV+g+W92leJC2S4wUpRSwKKFRskZuMwcixIztB9O9xSVIF
FaEuj2fmHntkUkCpP8Ec1qxldD5DiDwZ/QFl+wMOX8BYoRUNFyHxRxhqGyHhfk2rlPNylUZeGiex
d7WMAo/tV7EXVEkCZcSuoyUn/tA8jA6W3aEBGhB/imO4lpXTIX9qswMMiArgYECV8MBqyDBGN52Q
VYYDTJ9bZtquWTTW9vL/R3MmpXcn9Z7J18aGkySU67pmqrr9akEdn5/hnekA077bOkN4sSF/d6kb
bWon4dPrngoujl8ct2VC/ZU2np+F9dCv8bT2nh6NeBOKyWPDUUHzYuvmG9dD/LPifEb8X5/nGwte
2J9LAgAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.98
     Generated on:       27/01/2018 23:37
     Generated by:       Richard
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2015
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
SwQAAB+LCAAAAAAABAC9lEtLAzEQgO+C/yH0vOzD7boWsgtS6UXQ4kr1mk1nS2geZZK07L93W0sV
PYiFhlwyEzIfH8MMfQFutoD9A3OMDBcrjK5GN6P6+ooQ+oxiJTSTMyHhiSmoG8fQ+U28sZYmv14P
f+6tBdVKAfYQf2X6WlluUIo2IosjaRyn+xORqZfOI1QavEMmIzL3Qw3+CP2rWYOu2rJkBS9us0k+
hvRuQpNT1Z+UprcOVAhG/Cb00uxsPDOobBDivk9hQMh2Qq/OYaV5V3Rll2XLImU5+5v1rmQYJ4HA
ncG+AdwKDme17N92U4MQRO9oNUczqF3A7RR+zjZNvi+P+gNBqg7+SwQAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Call-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	#endregion Source: Globals.ps1

#region Source: ChildForm.psf
function Call-ChildForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
wWcAAB+LCAAAAAAABADtXVtv4jgUfl9p/0PEwz6hljtltkWa0u3OaDozVWGm+4ZMYsDbJEaO05b9
9Wsn4RKwiZ2QpGVXM6oK5HBun4+Pz7Hdywdo4mdIljeAAoP94iHsXlUalf6vvxjG5XeCZsgF9i2y
4TfgwP5gjmzrFhPnbOFNL8/3Pg+pJn9Dkxp0uYBXleHSo9A5e0SuhV+8M04b/qwaoo+qxs9IiNZZ
jf+rGgPfpj6BVy70KQF21bj3JzYyv8DlCD9B92rS7YK22e7Ue80WrF30KobLRLmqTNn3DeYYe/Dj
A5wS6M2H5hxafsUwuRaEkVYG2KUE216oL5P9nuAFJHQZfcc1MJ8G2Mak0n+cIwovz1cPSAgGNoIu
HaJ/YKXf6tSrRrPTTCTipqv0ZfImkg8pIPQee4gyu1X6AyYAJPeAKUgTaUfwlTKSgK0BDBIyNryA
sy3Q949n9rUR8R0GllzuMf/48jwgWFEnQ+NPgv3FNX7NHR4zspi8jgk0fcIsZcIFoMxs7iF07Jvv
DpsgtHq9VTXqte6ewWTelrBXoI/A1WQMG0oMR2Dy2bXga6W/D0Xh00OKF5X+LbC9fQDIIPSw1sQ4
oEqy/++BC+3cnb/gXMYO8+/cXh52+UGnt2t8hAs0lbk9xliJLnR344LjqyNy9yGH95Se/4k8NLGh
3OVKnvvmO5Ag88fiBr+4uXvQ9R1/wb7ZXRlzbIFETx7yZbddNdp1ofL7ZF/BK3J8h40oZQrkhhSq
BCFehGoqfsNqFuJxQpFkgxwx0gTYAbYPZVqxDCGAjR6QBtiZ4CKmAJMzmuDXbBD6wwVs8FiHRs8+
EVeFhUnkztbkI+KrUn9mVtmRij3E343bdUgJ41A1HM/ExEaTY9iuP/TdAIOcXUkifMWlizDyoVe2
DI/QcsuXYjT3SelC3BJUtghDwAjEQigO663Egs9G9dqF1lwhCmdaU0W9xhRvqE5Qm7lCkgC9s+CP
iQXJ/+E/caQh4tFyBxo0WfwvOeYhUq4Et9gndF6qCHdACATtYHeUWBeMXq1o12ulCnZtVYpgWRyN
lqOFxwdgIXztU4rzX2IRzmtCN0sPOodZVlj1rr6fRTJozmnczS1tNytTBG4eKUv1w4Nsue0De0iX
NtyqLx6K/9tFt8Ecmk/QGsyBO+PzhshC4/hD8SLcOwWfzaINS2jwNHgjKw67GWEYl0YPke1eKkSK
incHEWlwIQ0mpYGnBkOFoSNr/jiNm/AUIZuqnBDZQSshjGNbuYolwbb+siFdiG2oU4QVaQ2LhIPg
RlmT/OHOrJoTxgsvvMbqkUELI1M4btRZXqAaj9eV17oqfNJXXvf11Ku89lJVXlXFzKHyegcmBTRf
bM6lHhpUtQdzuAujYefQuSIRtHzb5b5VnpHXvlVGw6anZkDen/+g5uX9N95Wx+0FwqdsDbd6qoZb
yFer39bk/TbxYk/uX3EUy6ffVkpqExpy7EW1zmxxv8PXg2JnJiYrO4KkqHPqJyzibuoxE5ahnjr5
ZS075j2l7DxSbRp0DDIDuJsNv9Oob1EAelUzrPTovdVRJnfshqY9QeTSqOGWGbst1YAmxi5dN/4K
QK/qfoT06B3pqZM7flfmPUEEv6wa15kgzHdESXJBVQi/bDroBWBYVdb0GH7U1Cd3EK8NfIIopv5x
MJwxBaZ+cQhWbn6lj8Ja2uQfhP1TRa8T7KHKCt6u6rwsxq4TbeQqALoaFCmh+1VHmdyRG5r2BIHr
+ccAbitlAzAmRCHA1agypq066CiTf83BzxG4ZW1Sj3Qrq1miirrMu9S39dRrlnRTNUtUm0Dvu1my
yabhk4cTziglAKjLDa1qtq1uyY4MWs696KbqlihvzgqiWCCYgV3FVsmb83HYjFLrkCTNbqkcvC1A
Ee79rzfDTN+j2EH8tOYzsItvisX56zTHeAzRb46pSfi+D6OFNh2rOvWQW5vMyBfaB9KUx2HmqX5H
Va2I0U53KE1Vt5M4lJYZSu/4kAEDp0+hV+r29k/YJ+VKcAOWIgH0NwXW2hqhJBznMhjqLXn5aiXF
Hntp9rK9jhxCm41ZaAU069WkTO6x6PFjrSqLTBP1soakRLGtWtHdThQVEofDRZDTyBULvKqCMWKY
rmfIEVssBLTEdt/PJcgMMRomcfRfI7Vcy6qTT/JsUo2JbjaZfJvFG18kuNhNPHRz/KUB55r/gkDy
/NuKt9wU7MfmppasOX1HbyKWSKEVdRs1NsRaGvvtUxVgvmFjI9+ZwU+grO4RsngwZjM3NtnnvEhj
QgPQ4FCKt4AmmiL2iMfvMTIocuBZfkG7lM7F0Vb6F2yYSY53JPQtUi/2D53u0O22iXEzCEQztGTT
70Ko9SDiZkpoQrwb/GXeds1xJ8njlfplueNNLbNZbZJRFikvmEW19BOBV/Z7tBi+eqngpX+TVjp8
iedO6T4AZZnyAtjq1NKJICxNFpx8kPIwICV5WgIgNTPndGhUkyx5Q4Asj1NUIS/wBsnu8ZFbeDNP
abkgB6G8I57YxZMvESQw7NWlZRndoowkycPuFM2YQYOkfyOk/KrRPSfvvnxTFRp+m2ewgOHrl9SX
iPJKiGiqkdVaYlwV6FZ3h/IbEFT4HJ4A9YstQmiMJLIn+/cGUMip7xELFSR3L1t0MXYAcscW45sh
22kwNzfUjgqGjo4x1hnWLfnRWO1cZzt0Bw22deCOiTfe/uwYYbssJycPZEHOESwfw8Zbpf/p0wfH
UTL+iiKk10xWGt1mWjxJwoYAT3P8EjbTNdKJ1X0nrRQgFKU4b33SDyJx+rjQ0fTiFlMNd3TaOc/0
wXXkorZL5um8oFXHJGDz/YveLP7RNec8973GjNqpGg9oNhf5ZZfuBgEbzx6gx6St9L9/USDZGvpt
NvSbQtSIMbPSTTlXkO7t0hy6Qqj8BpzF70rC6C414gsN5vWnje7j4PXOzfRvG4wDwFLlhMLxsQA5
AL4HPTaLIytCmWo6F4dyKLMWnJt8X5A+nJU5RRf/NbUhLYp/ByCtLJAerGMgjb/46HnQYYCC3urZ
6J1l/4hbUi7P19+6yyUcBkXwOPpQS+bI/zpKMYwIeAn2EenzqjWn7Wl3Wq9b7RpogmRefzl2MToh
ttqnmCyHkDwjE6ZymbZ2A0xgIepFWrGhylTLQbf1y3BsX55v/8me/r/+xHCEwWcAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formChooseARefreshSchedu = New-Object 'System.Windows.Forms.Form'
	$grpbx_recurrencepattern = New-Object 'System.Windows.Forms.GroupBox'
	$panel_monthly = New-Object 'System.Windows.Forms.Panel'
	$numupdown_monthly_day = New-Object 'System.Windows.Forms.NumericUpDown'
	$combobox_monthly_day = New-Object 'System.Windows.Forms.ComboBox'
	$combobox_monthly_order = New-Object 'System.Windows.Forms.ComboBox'
	$radiobtn_monthly_the = New-Object 'System.Windows.Forms.RadioButton'
	$radiobtn_monthly_lastdayofmonth = New-Object 'System.Windows.Forms.RadioButton'
	$radiobtn_monthly_day = New-Object 'System.Windows.Forms.RadioButton'
	$numdown_monthly_recur = New-Object 'System.Windows.Forms.NumericUpDown'
	$label1_recur_monthly = New-Object 'System.Windows.Forms.Label'
	$panel_weekly = New-Object 'System.Windows.Forms.Panel'
	$radiobtn_weekly_saturday = New-Object 'System.Windows.Forms.RadioButton'
	$radiobtn_weekly_friday = New-Object 'System.Windows.Forms.RadioButton'
	$radiobtn_weekly_thursday = New-Object 'System.Windows.Forms.RadioButton'
	$radiobtn_weekly_wednesday = New-Object 'System.Windows.Forms.RadioButton'
	$radiobtn_weekly_tuesday = New-Object 'System.Windows.Forms.RadioButton'
	$radiobtn_weekly_monday = New-Object 'System.Windows.Forms.RadioButton'
	$radiobtn_weekly_sunday = New-Object 'System.Windows.Forms.RadioButton'
	$numupdown_weekly_recur = New-Object 'System.Windows.Forms.NumericUpDown'
	$label_weekly_weekson = New-Object 'System.Windows.Forms.Label'
	$label_recur_weekly = New-Object 'System.Windows.Forms.Label'
	$panel_custominterval = New-Object 'System.Windows.Forms.Panel'
	$numupdown_custom_interval = New-Object 'System.Windows.Forms.NumericUpDown'
	$combobox_custom_interval = New-Object 'System.Windows.Forms.ComboBox'
	$label_custominterval = New-Object 'System.Windows.Forms.Label'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$panel_none = New-Object 'System.Windows.Forms.Panel'
	$label_none_norecurrence = New-Object 'System.Windows.Forms.Label'
	$radiobtn_custominterval = New-Object 'System.Windows.Forms.RadioButton'
	$radiobtn_weekly = New-Object 'System.Windows.Forms.RadioButton'
	$radiobtn_monthly = New-Object 'System.Windows.Forms.RadioButton'
	$radiobtn_none = New-Object 'System.Windows.Forms.RadioButton'
	$label_recurrence = New-Object 'System.Windows.Forms.Label'
	$grpbx_starttime = New-Object 'System.Windows.Forms.GroupBox'
	$dtp_main_date = New-Object 'System.Windows.Forms.DateTimePicker'
	$dtp_main_time = New-Object 'System.Windows.Forms.DateTimePicker'
	$label_start = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	function Get-Scheduleinformation
	{
	    <#
	        .SYNOPSIS
	        Retrieves refreshdate and time for a schedule token.
	        .DESCRIPTION
	        This function retrives the refreshdate and start time for a schedule token
	        .EXAMPLE
	        Get-Scheduleinformation $RKSchedule $CFSchedule
	        .EXAMPLE
	        Get-Scheduleinformation $CFSchedule
	    #>
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true, Position = 0)]
			[System.Array][ValidateNotNullOrEmpty()]
			$RKSchedule
		)
		$Object = New-Object -Type System.Object
		$Token = @()
		
		switch ($RKSchedule.SmsProviderObjectPath)
		{
			"SMS_ST_RecurWeekly" {
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value ("Occures every: $($RKSchedule.ForNumberOfWeeks) weeks on " + (Convert-DayNumbersToDayName -DayNumber $RKSchedule.Day))
				$Object | Add-Member -MemberType NoteProperty -Name "StartTime" -Value $RKSchedule.StartTime
			}
			
			"SMS_ST_RecurInterval" {
				
				if ($RKSchedule.DaySpan -ne 0)
				{
					$text = "Occures every $($RKSchedule.DaySpan) days"
				}
				if ($RKSchedule.HourSpan -ne 0)
				{
					$text = "Occures every $($RKSchedule.HourSpan) hours"
				}
				if ($RKSchedule.MinuteSpan -ne 0)
				{
					$text = "Occures every $($RKSchedule.MinuteSpan) minutes"
				}
				
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value $text
				$Object | Add-Member -MemberType NoteProperty -Name "StartTime" -Value $RKSchedule.StartTime
			}
			
			"SMS_ST_RecurMonthlyByDate" {
				
				If ($RKSchedule.MonthDay -eq 0)
				{
					
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value "Occures the last day of every $($RKSchedule.ForNumberOfMonths) months"
					$Object | Add-Member -MemberType NoteProperty -Name "StartTime" -Value $RKSchedule.StartTime
				}
				Else
				{
					
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value "Occures day $($RKSchedule.MonthDay) of every $($RKSchedule.ForNumberOfMonths) months"
					$Object | Add-Member -MemberType NoteProperty -Name "StartTime" -Value $RKSchedule.StartTime
				}
			}
			
			"SMS_ST_RecurMonthlyByWeekday" {
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value ("Occures the " + (Convert-WeekOrderNumber -weekordernumber $RKSchedule.WeekOrder) + " " + (Convert-DayNumbersToDayName -DayNumber $RKSchedule.Day) + " of every " + (Convert-MonthToNumbers -MonthNumber $RKSchedule.ForNumberOfMonths))
				$Object | Add-Member -MemberType NoteProperty -Name "StartTime" -Value $RKSchedule.StartTime
			}
			
			"SMS_ST_NonRecurring" {
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value "No Recurrence. The Scheduled event Occures once at the specific time"
				$Object | Add-Member -MemberType NoteProperty -Name "StartTime" -Value $RKSchedule.StartTime
			}
		}
		$Token += $Object
		$script:Token = $Token
		#Write-Host $Token.StartTime
		#Write-Host $Token.RefreshDate
	}
	
	$formChooseARefreshSchedu_Load={
		#TODO: Initialize Form Controls here
	}
	
	
	$Panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
		#TODO: Place custom script here
		
	}
	
	$radiobtn_none_CheckedChanged={
		#TODO: Place custom script here
		if ($this.Checked -eq $true)
		{
			$panel_none.Visible = $true
			$panel_weekly.Visible = $false
			$panel_monthly.Visible = $false
			$panel_custominterval.Visible = $false		
		}
	}
	
	$radiobtn_custominterval_CheckedChanged={
		#TODO: Place custom script here
		if ($this.Checked -eq $true)
		{
			$panel_none.Visible = $false
			$panel_weekly.Visible = $false
			$panel_monthly.Visible = $false
			$panel_custominterval.Visible = $true
			$combobox_custom_interval.Text = 'Hours'
		}
	}
	
	#region Control Helper Functions
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	$combobox_custom_interval_SelectedIndexChanged={
		#TODO: Place custom script here
		switch ($combobox_custom_interval.Text)
		{
			Minutes { $numupdown_custom_interval.Maximum = '59' } 
			Hours  { $numupdown_custom_interval.Maximum = '23'}
			Days  { $numupdown_custom_interval.Maximum = '31'}
		}
	}
	
	$radiobtn_weekly_CheckedChanged = {
		#TODO: Place custom script here
		if ($this.Checked -eq $true)
		{
			$panel_none.Visible = $false
			$panel_weekly.Visible = $true
			$panel_monthly.Visible = $false
			$panel_custominterval.Visible = $false
			
			$CurrentDay = (get-date).DayOfWeek
			switch ($CurrentDay)
			{
				Monday { $radiobtn_weekly_monday.Checked = $true }
				Tuesday { $radiobtn_weekly_tuesday.Checked = $true }
				Wednesday { $radiobtn_weekly_wednesday.Checked = $true }
				Thursday { $radiobtn_weekly_thursday.Checked = $true }
				Friday { $radiobtn_weekly_friday.Checked = $true }
				Saturday { $radiobtn_weekly_saturday.Checked = $true }
				Sunday { $radiobtn_weekly_sunday.Checked = $true }
			}
		}
	}
	
	$radiobtn_monthly_CheckedChanged={
		#TODO: Place custom script here
		if ($this.checked -eq $true) {
			$panel_none.Visible = $false
			$panel_weekly.Visible = $false
			$panel_monthly.Visible = $true
			$panel_custominterval.Visible = $false		
			$combobox_monthly_day.Text = (get-date).DayOfWeek		
		}
	}
	
	$buttonOK_Click = {
		#TODO: Place custom script here
		$time = $dtp_main_date.Text + ' ' + $dtp_main_time.Text
		$time = [datetime]$time
		if ($panel_none.Visible -eq $true)
		{
			$CFSchedule = New-CMSchedule -Nonrecurring -Start $time
		}
		elseif ($panel_custominterval.Visible -eq $true)
		{
			$CFSchedule = New-CMSchedule -RecurCount $numupdown_custom_interval.Value -RecurInterval $combobox_custom_interval.Text -Start $time
		}
		elseif ($panel_weekly.Visible -eq $true)
		{
			$CFSchedule = New-CMSchedule -DayOfWeek $script:weekly_dayofweek -RecurCount $numupdown_weekly_recur.Value -Start $time
		}
		elseif ($panel_monthly.Visible -eq $true)
		{
			if ($radiobtn_monthly_day.Checked -eq $true)
			{
				$CFSchedule = New-CMSchedule -DayOfMonth $numupdown_monthly_day.Value -RecurCount $numdown_monthly_recur.Value -Start $time
			}
			elseif ($radiobtn_monthly_lastdayofmonth.Checked -eq $true)
			{
				$CFSchedule = New-CMSchedule -LastDayOfMonth -RecurCount $numdown_monthly_recur.Value -Start $time
			}
			elseif ($radiobtn_monthly_the.Checked -eq $true)
			{
				$CFSchedule = New-CMSchedule -DayOfWeek $combobox_monthly_day.Text -WeekOrder $combobox_monthly_order.Text -RecurCount $numdown_monthly_recur.Value -Start $time
			}
		}
		$script:CFSchedule = $CFSchedule
		Get-Scheduleinformation -RKSchedule $CFSchedule
	}
	
	$dtp_main_date_ValueChanged={
		#TODO: Place custom script here
		
	}
	
	$radiobtn_weekly_saturday_CheckedChanged={
		#TODO: Place custom script here
		if ($this.checked -eq $true) {
			$script:weekly_dayofweek = $this.Text
		}
	}
	
	$radiobtn_weekly_friday_CheckedChanged={
		#TODO: Place custom script here
		if ($this.checked -eq $true)
		{
			$script:weekly_dayofweek = $this.Text
		}
	}
	
	$radiobtn_weekly_thursday_CheckedChanged={
		#TODO: Place custom script here
		if ($this.checked -eq $true)
		{
			$script:weekly_dayofweek = $this.Text
		}
	}
	
	$radiobtn_weekly_wednesday_CheckedChanged={
		#TODO: Place custom script here
		if ($this.checked -eq $true)
		{
			$script:weekly_dayofweek = $this.Text
		}
	}
	
	$radiobtn_weekly_tuesday_CheckedChanged={
		#TODO: Place custom script here
		if ($this.checked -eq $true)
		{
			$script:weekly_dayofweek = $this.Text
		}
	}
	
	$radiobtn_weekly_monday_CheckedChanged={
		#TODO: Place custom script here
		if ($this.checked -eq $true)
		{
			$script:weekly_dayofweek = $this.Text
		}
	}
	
	$radiobtn_weekly_sunday_CheckedChanged={
		#TODO: Place custom script here
		if ($this.checked -eq $true)
		{
			$script:weekly_dayofweek = $this.Text
		}
	}
	
	$radiobtn_monthly_day_CheckedChanged={
		#TODO: Place custom script here
		if ($this.checked -eq $true ) {
			$numupdown_monthly_day.Enabled = $true
			$combobox_monthly_order.Enabled = $false
			$combobox_monthly_day.Enabled = $false
		}
	}
	
	$radiobtn_monthly_lastdayofmonth_CheckedChanged={
		#TODO: Place custom script here
		if ($this.checked -eq $true)
		{
			$numupdown_monthly_day.Enabled = $false
			$combobox_monthly_order.Enabled = $false
			$combobox_monthly_day.Enabled = $false
		}
	}
	
	$radiobtn_monthly_the_CheckedChanged={
		#TODO: Place custom script here
		if ($this.checked -eq $true)
		{
			$numupdown_monthly_day.Enabled = $false
			$combobox_monthly_order.Enabled = $true
			$combobox_monthly_day.Enabled = $true
		}
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formChooseARefreshSchedu.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ChildForm_numupdown_monthly_day = $numupdown_monthly_day.Value
		$script:ChildForm_combobox_monthly_day = $combobox_monthly_day.Text
		$script:ChildForm_combobox_monthly_day_SelectedItem = $combobox_monthly_day.SelectedItem
		$script:ChildForm_combobox_monthly_order = $combobox_monthly_order.Text
		$script:ChildForm_combobox_monthly_order_SelectedItem = $combobox_monthly_order.SelectedItem
		$script:ChildForm_radiobtn_monthly_the = $radiobtn_monthly_the.Checked
		$script:ChildForm_radiobtn_monthly_lastdayofmonth = $radiobtn_monthly_lastdayofmonth.Checked
		$script:ChildForm_radiobtn_monthly_day = $radiobtn_monthly_day.Checked
		$script:ChildForm_numdown_monthly_recur = $numdown_monthly_recur.Value
		$script:ChildForm_radiobtn_weekly_saturday = $radiobtn_weekly_saturday.Checked
		$script:ChildForm_radiobtn_weekly_friday = $radiobtn_weekly_friday.Checked
		$script:ChildForm_radiobtn_weekly_thursday = $radiobtn_weekly_thursday.Checked
		$script:ChildForm_radiobtn_weekly_wednesday = $radiobtn_weekly_wednesday.Checked
		$script:ChildForm_radiobtn_weekly_tuesday = $radiobtn_weekly_tuesday.Checked
		$script:ChildForm_radiobtn_weekly_monday = $radiobtn_weekly_monday.Checked
		$script:ChildForm_radiobtn_weekly_sunday = $radiobtn_weekly_sunday.Checked
		$script:ChildForm_numupdown_weekly_recur = $numupdown_weekly_recur.Value
		$script:ChildForm_numupdown_custom_interval = $numupdown_custom_interval.Value
		$script:ChildForm_combobox_custom_interval = $combobox_custom_interval.Text
		$script:ChildForm_combobox_custom_interval_SelectedItem = $combobox_custom_interval.SelectedItem
		$script:ChildForm_radiobtn_custominterval = $radiobtn_custominterval.Checked
		$script:ChildForm_radiobtn_weekly = $radiobtn_weekly.Checked
		$script:ChildForm_radiobtn_monthly = $radiobtn_monthly.Checked
		$script:ChildForm_radiobtn_none = $radiobtn_none.Checked
		$script:ChildForm_dtp_main_date = $dtp_main_date.Value
		$script:ChildForm_dtp_main_time = $dtp_main_time.Value
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$radiobtn_monthly_the.remove_CheckedChanged($radiobtn_monthly_the_CheckedChanged)
			$radiobtn_monthly_lastdayofmonth.remove_CheckedChanged($radiobtn_monthly_lastdayofmonth_CheckedChanged)
			$radiobtn_monthly_day.remove_CheckedChanged($radiobtn_monthly_day_CheckedChanged)
			$radiobtn_weekly_saturday.remove_CheckedChanged($radiobtn_weekly_saturday_CheckedChanged)
			$radiobtn_weekly_friday.remove_CheckedChanged($radiobtn_weekly_friday_CheckedChanged)
			$radiobtn_weekly_thursday.remove_CheckedChanged($radiobtn_weekly_thursday_CheckedChanged)
			$radiobtn_weekly_wednesday.remove_CheckedChanged($radiobtn_weekly_wednesday_CheckedChanged)
			$radiobtn_weekly_tuesday.remove_CheckedChanged($radiobtn_weekly_tuesday_CheckedChanged)
			$radiobtn_weekly_monday.remove_CheckedChanged($radiobtn_weekly_monday_CheckedChanged)
			$radiobtn_weekly_sunday.remove_CheckedChanged($radiobtn_weekly_sunday_CheckedChanged)
			$combobox_custom_interval.remove_SelectedIndexChanged($combobox_custom_interval_SelectedIndexChanged)
			$radiobtn_custominterval.remove_CheckedChanged($radiobtn_custominterval_CheckedChanged)
			$radiobtn_weekly.remove_CheckedChanged($radiobtn_weekly_CheckedChanged)
			$radiobtn_monthly.remove_CheckedChanged($radiobtn_monthly_CheckedChanged)
			$radiobtn_none.remove_CheckedChanged($radiobtn_none_CheckedChanged)
			$dtp_main_date.remove_ValueChanged($dtp_main_date_ValueChanged)
			$buttonOK.remove_Click($buttonOK_Click)
			$formChooseARefreshSchedu.remove_Load($formChooseARefreshSchedu_Load)
			$formChooseARefreshSchedu.remove_Load($Form_StateCorrection_Load)
			$formChooseARefreshSchedu.remove_Closing($Form_StoreValues_Closing)
			$formChooseARefreshSchedu.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formChooseARefreshSchedu.SuspendLayout()
	$grpbx_recurrencepattern.SuspendLayout()
	$panel_monthly.SuspendLayout()
	$numupdown_monthly_day.BeginInit()
	$numdown_monthly_recur.BeginInit()
	$panel_weekly.SuspendLayout()
	$numupdown_weekly_recur.BeginInit()
	$panel_custominterval.SuspendLayout()
	$numupdown_custom_interval.BeginInit()
	$panel_none.SuspendLayout()
	$grpbx_starttime.SuspendLayout()
	#
	# formChooseARefreshSchedu
	#
	$formChooseARefreshSchedu.Controls.Add($grpbx_recurrencepattern)
	$formChooseARefreshSchedu.Controls.Add($grpbx_starttime)
	$formChooseARefreshSchedu.Controls.Add($buttonOK)
	$formChooseARefreshSchedu.Controls.Add($buttonCancel)
	$formChooseARefreshSchedu.BackColor = 'White'
	$formChooseARefreshSchedu.ClientSize = '461, 363'
	$formChooseARefreshSchedu.Name = 'formChooseARefreshSchedu'
	$formChooseARefreshSchedu.StartPosition = 'CenterParent'
	$formChooseARefreshSchedu.Text = 'Choose a refresh schedule'
	$formChooseARefreshSchedu.add_Load($formChooseARefreshSchedu_Load)
	#
	# grpbx_recurrencepattern
	#
	$grpbx_recurrencepattern.Controls.Add($panel_monthly)
	$grpbx_recurrencepattern.Controls.Add($panel_weekly)
	$grpbx_recurrencepattern.Controls.Add($panel_custominterval)
	$grpbx_recurrencepattern.Controls.Add($groupbox1)
	$grpbx_recurrencepattern.Controls.Add($panel_none)
	$grpbx_recurrencepattern.Controls.Add($radiobtn_custominterval)
	$grpbx_recurrencepattern.Controls.Add($radiobtn_weekly)
	$grpbx_recurrencepattern.Controls.Add($radiobtn_monthly)
	$grpbx_recurrencepattern.Controls.Add($radiobtn_none)
	$grpbx_recurrencepattern.Controls.Add($label_recurrence)
	$grpbx_recurrencepattern.Location = '14, 107'
	$grpbx_recurrencepattern.Name = 'grpbx_recurrencepattern'
	$grpbx_recurrencepattern.Size = '434, 207'
	$grpbx_recurrencepattern.TabIndex = 3
	$grpbx_recurrencepattern.TabStop = $False
	$grpbx_recurrencepattern.Text = 'Recurrence pattern'
	#
	# panel_monthly
	#
	$panel_monthly.Controls.Add($numupdown_monthly_day)
	$panel_monthly.Controls.Add($combobox_monthly_day)
	$panel_monthly.Controls.Add($combobox_monthly_order)
	$panel_monthly.Controls.Add($radiobtn_monthly_the)
	$panel_monthly.Controls.Add($radiobtn_monthly_lastdayofmonth)
	$panel_monthly.Controls.Add($radiobtn_monthly_day)
	$panel_monthly.Controls.Add($numdown_monthly_recur)
	$panel_monthly.Controls.Add($label1_recur_monthly)
	$panel_monthly.Location = '150, 36'
	$panel_monthly.Name = 'panel_monthly'
	$panel_monthly.Size = '284, 167'
	$panel_monthly.TabIndex = 9
	$panel_monthly.Visible = $False
	#
	# numupdown_monthly_day
	#
	$numupdown_monthly_day.Location = '75, 51'
	$numupdown_monthly_day.Maximum = 31
	$numupdown_monthly_day.Minimum = 1
	$numupdown_monthly_day.Name = 'numupdown_monthly_day'
	$numupdown_monthly_day.Size = '46, 20'
	$numupdown_monthly_day.TabIndex = 7
	$numupdown_monthly_day.Value = 1
	#
	# combobox_monthly_day
	#
	$combobox_monthly_day.Enabled = $False
	$combobox_monthly_day.FormattingEnabled = $True
	[void]$combobox_monthly_day.Items.Add('Sunday')
	[void]$combobox_monthly_day.Items.Add('Monday')
	[void]$combobox_monthly_day.Items.Add('Tuesday')
	[void]$combobox_monthly_day.Items.Add('Wednesday')
	[void]$combobox_monthly_day.Items.Add('Thursday')
	[void]$combobox_monthly_day.Items.Add('Friday')
	[void]$combobox_monthly_day.Items.Add('Saturday')
	$combobox_monthly_day.Location = '175, 108'
	$combobox_monthly_day.Name = 'combobox_monthly_day'
	$combobox_monthly_day.Size = '100, 21'
	$combobox_monthly_day.TabIndex = 6
	#
	# combobox_monthly_order
	#
	$combobox_monthly_order.Enabled = $False
	$combobox_monthly_order.FormattingEnabled = $True
	[void]$combobox_monthly_order.Items.Add('First')
	[void]$combobox_monthly_order.Items.Add('Second')
	[void]$combobox_monthly_order.Items.Add('Third')
	[void]$combobox_monthly_order.Items.Add('Fourth')
	[void]$combobox_monthly_order.Items.Add('Last')
	$combobox_monthly_order.Location = '75, 108'
	$combobox_monthly_order.Name = 'combobox_monthly_order'
	$combobox_monthly_order.Size = '94, 21'
	$combobox_monthly_order.TabIndex = 5
	$combobox_monthly_order.Text = 'First'
	#
	# radiobtn_monthly_the
	#
	$radiobtn_monthly_the.Location = '17, 108'
	$radiobtn_monthly_the.Name = 'radiobtn_monthly_the'
	$radiobtn_monthly_the.Size = '104, 24'
	$radiobtn_monthly_the.TabIndex = 4
	$radiobtn_monthly_the.Text = 'The'
	$radiobtn_monthly_the.UseVisualStyleBackColor = $True
	$radiobtn_monthly_the.add_CheckedChanged($radiobtn_monthly_the_CheckedChanged)
	#
	# radiobtn_monthly_lastdayofmonth
	#
	$radiobtn_monthly_lastdayofmonth.Location = '17, 78'
	$radiobtn_monthly_lastdayofmonth.Name = 'radiobtn_monthly_lastdayofmonth'
	$radiobtn_monthly_lastdayofmonth.Size = '159, 24'
	$radiobtn_monthly_lastdayofmonth.TabIndex = 3
	$radiobtn_monthly_lastdayofmonth.Text = 'The last day of the month'
	$radiobtn_monthly_lastdayofmonth.UseVisualStyleBackColor = $True
	$radiobtn_monthly_lastdayofmonth.add_CheckedChanged($radiobtn_monthly_lastdayofmonth_CheckedChanged)
	#
	# radiobtn_monthly_day
	#
	$radiobtn_monthly_day.Checked = $True
	$radiobtn_monthly_day.Location = '17, 51'
	$radiobtn_monthly_day.Name = 'radiobtn_monthly_day'
	$radiobtn_monthly_day.Size = '104, 24'
	$radiobtn_monthly_day.TabIndex = 2
	$radiobtn_monthly_day.TabStop = $True
	$radiobtn_monthly_day.Text = 'Day'
	$radiobtn_monthly_day.UseVisualStyleBackColor = $True
	$radiobtn_monthly_day.add_CheckedChanged($radiobtn_monthly_day_CheckedChanged)
	#
	# numdown_monthly_recur
	#
	$numdown_monthly_recur.Location = '121, 18'
	$numdown_monthly_recur.Maximum = 12
	$numdown_monthly_recur.Minimum = 1
	$numdown_monthly_recur.Name = 'numdown_monthly_recur'
	$numdown_monthly_recur.Size = '49, 20'
	$numdown_monthly_recur.TabIndex = 1
	$numdown_monthly_recur.Value = 1
	#
	# label1_recur_monthly
	#
	$label1_recur_monthly.Location = '15, 20'
	$label1_recur_monthly.Name = 'label1_recur_monthly'
	$label1_recur_monthly.Size = '79, 23'
	$label1_recur_monthly.TabIndex = 0
	$label1_recur_monthly.Text = 'Recur every:'
	#
	# panel_weekly
	#
	$panel_weekly.Controls.Add($radiobtn_weekly_saturday)
	$panel_weekly.Controls.Add($radiobtn_weekly_friday)
	$panel_weekly.Controls.Add($radiobtn_weekly_thursday)
	$panel_weekly.Controls.Add($radiobtn_weekly_wednesday)
	$panel_weekly.Controls.Add($radiobtn_weekly_tuesday)
	$panel_weekly.Controls.Add($radiobtn_weekly_monday)
	$panel_weekly.Controls.Add($radiobtn_weekly_sunday)
	$panel_weekly.Controls.Add($numupdown_weekly_recur)
	$panel_weekly.Controls.Add($label_weekly_weekson)
	$panel_weekly.Controls.Add($label_recur_weekly)
	$panel_weekly.Location = '151, 36'
	$panel_weekly.Name = 'panel_weekly'
	$panel_weekly.Size = '283, 165'
	$panel_weekly.TabIndex = 8
	$panel_weekly.Visible = $False
	#
	# radiobtn_weekly_saturday
	#
	$radiobtn_weekly_saturday.Location = '126, 106'
	$radiobtn_weekly_saturday.Name = 'radiobtn_weekly_saturday'
	$radiobtn_weekly_saturday.Size = '100, 24'
	$radiobtn_weekly_saturday.TabIndex = 9
	$radiobtn_weekly_saturday.TabStop = $True
	$radiobtn_weekly_saturday.Text = 'Saturday'
	$radiobtn_weekly_saturday.UseVisualStyleBackColor = $True
	$radiobtn_weekly_saturday.add_CheckedChanged($radiobtn_weekly_saturday_CheckedChanged)
	#
	# radiobtn_weekly_friday
	#
	$radiobtn_weekly_friday.Location = '126, 76'
	$radiobtn_weekly_friday.Name = 'radiobtn_weekly_friday'
	$radiobtn_weekly_friday.Size = '100, 24'
	$radiobtn_weekly_friday.TabIndex = 8
	$radiobtn_weekly_friday.TabStop = $True
	$radiobtn_weekly_friday.Text = 'Friday'
	$radiobtn_weekly_friday.UseVisualStyleBackColor = $True
	$radiobtn_weekly_friday.add_CheckedChanged($radiobtn_weekly_friday_CheckedChanged)
	#
	# radiobtn_weekly_thursday
	#
	$radiobtn_weekly_thursday.Location = '126, 49'
	$radiobtn_weekly_thursday.Name = 'radiobtn_weekly_thursday'
	$radiobtn_weekly_thursday.Size = '100, 24'
	$radiobtn_weekly_thursday.TabIndex = 7
	$radiobtn_weekly_thursday.TabStop = $True
	$radiobtn_weekly_thursday.Text = 'Thursday'
	$radiobtn_weekly_thursday.UseVisualStyleBackColor = $True
	$radiobtn_weekly_thursday.add_CheckedChanged($radiobtn_weekly_thursday_CheckedChanged)
	#
	# radiobtn_weekly_wednesday
	#
	$radiobtn_weekly_wednesday.Location = '14, 136'
	$radiobtn_weekly_wednesday.Name = 'radiobtn_weekly_wednesday'
	$radiobtn_weekly_wednesday.Size = '100, 24'
	$radiobtn_weekly_wednesday.TabIndex = 6
	$radiobtn_weekly_wednesday.TabStop = $True
	$radiobtn_weekly_wednesday.Text = 'Wednesday'
	$radiobtn_weekly_wednesday.UseVisualStyleBackColor = $True
	$radiobtn_weekly_wednesday.add_CheckedChanged($radiobtn_weekly_wednesday_CheckedChanged)
	#
	# radiobtn_weekly_tuesday
	#
	$radiobtn_weekly_tuesday.Location = '14, 106'
	$radiobtn_weekly_tuesday.Name = 'radiobtn_weekly_tuesday'
	$radiobtn_weekly_tuesday.Size = '100, 24'
	$radiobtn_weekly_tuesday.TabIndex = 5
	$radiobtn_weekly_tuesday.TabStop = $True
	$radiobtn_weekly_tuesday.Text = 'Tuesday'
	$radiobtn_weekly_tuesday.UseVisualStyleBackColor = $True
	$radiobtn_weekly_tuesday.add_CheckedChanged($radiobtn_weekly_tuesday_CheckedChanged)
	#
	# radiobtn_weekly_monday
	#
	$radiobtn_weekly_monday.Location = '14, 77'
	$radiobtn_weekly_monday.Name = 'radiobtn_weekly_monday'
	$radiobtn_weekly_monday.Size = '100, 24'
	$radiobtn_weekly_monday.TabIndex = 4
	$radiobtn_weekly_monday.TabStop = $True
	$radiobtn_weekly_monday.Text = 'Monday'
	$radiobtn_weekly_monday.UseVisualStyleBackColor = $True
	$radiobtn_weekly_monday.add_CheckedChanged($radiobtn_weekly_monday_CheckedChanged)
	#
	# radiobtn_weekly_sunday
	#
	$radiobtn_weekly_sunday.Location = '14, 48'
	$radiobtn_weekly_sunday.Name = 'radiobtn_weekly_sunday'
	$radiobtn_weekly_sunday.Size = '100, 24'
	$radiobtn_weekly_sunday.TabIndex = 3
	$radiobtn_weekly_sunday.TabStop = $True
	$radiobtn_weekly_sunday.Text = 'Sunday'
	$radiobtn_weekly_sunday.UseVisualStyleBackColor = $True
	$radiobtn_weekly_sunday.add_CheckedChanged($radiobtn_weekly_sunday_CheckedChanged)
	#
	# numupdown_weekly_recur
	#
	$numupdown_weekly_recur.Location = '121, 18'
	$numupdown_weekly_recur.Maximum = 4
	$numupdown_weekly_recur.Minimum = 1
	$numupdown_weekly_recur.Name = 'numupdown_weekly_recur'
	$numupdown_weekly_recur.Size = '47, 20'
	$numupdown_weekly_recur.TabIndex = 2
	$numupdown_weekly_recur.Value = 1
	#
	# label_weekly_weekson
	#
	$label_weekly_weekson.Location = '177, 22'
	$label_weekly_weekson.Name = 'label_weekly_weekson'
	$label_weekly_weekson.Size = '87, 23'
	$label_weekly_weekson.TabIndex = 1
	$label_weekly_weekson.Text = 'weeks on:'
	#
	# label_recur_weekly
	#
	$label_recur_weekly.Location = '14, 22'
	$label_recur_weekly.Name = 'label_recur_weekly'
	$label_recur_weekly.Size = '87, 23'
	$label_recur_weekly.TabIndex = 0
	$label_recur_weekly.Text = 'Recur every:'
	#
	# panel_custominterval
	#
	$panel_custominterval.Controls.Add($numupdown_custom_interval)
	$panel_custominterval.Controls.Add($combobox_custom_interval)
	$panel_custominterval.Controls.Add($label_custominterval)
	$panel_custominterval.Location = '151, 36'
	$panel_custominterval.Name = 'panel_custominterval'
	$panel_custominterval.Size = '277, 165'
	$panel_custominterval.TabIndex = 6
	$panel_custominterval.Visible = $False
	#
	# numupdown_custom_interval
	#
	$numupdown_custom_interval.Location = '37, 81'
	$numupdown_custom_interval.Maximum = 23
	$numupdown_custom_interval.Minimum = 1
	$numupdown_custom_interval.Name = 'numupdown_custom_interval'
	$numupdown_custom_interval.Size = '56, 20'
	$numupdown_custom_interval.TabIndex = 3
	$numupdown_custom_interval.Value = 1
	#
	# combobox_custom_interval
	#
	$combobox_custom_interval.FormattingEnabled = $True
	[void]$combobox_custom_interval.Items.Add('Minutes')
	[void]$combobox_custom_interval.Items.Add('Hours')
	[void]$combobox_custom_interval.Items.Add('Days')
	$combobox_custom_interval.Location = '105, 81'
	$combobox_custom_interval.Name = 'combobox_custom_interval'
	$combobox_custom_interval.Size = '121, 21'
	$combobox_custom_interval.TabIndex = 2
	$combobox_custom_interval.add_SelectedIndexChanged($combobox_custom_interval_SelectedIndexChanged)
	#
	# label_custominterval
	#
	$label_custominterval.Location = '14, 55'
	$label_custominterval.Name = 'label_custominterval'
	$label_custominterval.Size = '100, 23'
	$label_custominterval.TabIndex = 0
	$label_custominterval.Text = 'Recur every:'
	#
	# groupbox1
	#
	$groupbox1.Location = '145, 43'
	$groupbox1.Margin = '0, 0, 0, 0'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '2, 160'
	$groupbox1.TabIndex = 6
	$groupbox1.TabStop = $False
	#
	# panel_none
	#
	$panel_none.Controls.Add($label_none_norecurrence)
	$panel_none.Location = '151, 36'
	$panel_none.Name = 'panel_none'
	$panel_none.Size = '277, 165'
	$panel_none.TabIndex = 5
	#
	# label_none_norecurrence
	#
	$label_none_norecurrence.Location = '37, 61'
	$label_none_norecurrence.Name = 'label_none_norecurrence'
	$label_none_norecurrence.Size = '202, 42'
	$label_none_norecurrence.TabIndex = 1
	$label_none_norecurrence.Text = 'No recurrence. The scheduled event occurs once at the specified start time.'
	#
	# radiobtn_custominterval
	#
	$radiobtn_custominterval.Location = '18, 151'
	$radiobtn_custominterval.Name = 'radiobtn_custominterval'
	$radiobtn_custominterval.Size = '104, 24'
	$radiobtn_custominterval.TabIndex = 4
	$radiobtn_custominterval.Text = 'Custom interval'
	$radiobtn_custominterval.UseVisualStyleBackColor = $True
	$radiobtn_custominterval.add_CheckedChanged($radiobtn_custominterval_CheckedChanged)
	#
	# radiobtn_weekly
	#
	$radiobtn_weekly.Location = '18, 121'
	$radiobtn_weekly.Name = 'radiobtn_weekly'
	$radiobtn_weekly.Size = '104, 24'
	$radiobtn_weekly.TabIndex = 3
	$radiobtn_weekly.Text = 'Weekly'
	$radiobtn_weekly.UseVisualStyleBackColor = $True
	$radiobtn_weekly.add_CheckedChanged($radiobtn_weekly_CheckedChanged)
	#
	# radiobtn_monthly
	#
	$radiobtn_monthly.Location = '18, 91'
	$radiobtn_monthly.Name = 'radiobtn_monthly'
	$radiobtn_monthly.Size = '104, 24'
	$radiobtn_monthly.TabIndex = 2
	$radiobtn_monthly.Text = 'Monthly'
	$radiobtn_monthly.UseVisualStyleBackColor = $True
	$radiobtn_monthly.add_CheckedChanged($radiobtn_monthly_CheckedChanged)
	#
	# radiobtn_none
	#
	$radiobtn_none.Checked = $True
	$radiobtn_none.Location = '18, 61'
	$radiobtn_none.Name = 'radiobtn_none'
	$radiobtn_none.Size = '104, 24'
	$radiobtn_none.TabIndex = 1
	$radiobtn_none.TabStop = $True
	$radiobtn_none.Text = 'None'
	$radiobtn_none.UseVisualStyleBackColor = $True
	$radiobtn_none.add_CheckedChanged($radiobtn_none_CheckedChanged)
	#
	# label_recurrence
	#
	$label_recurrence.Location = '7, 20'
	$label_recurrence.Name = 'label_recurrence'
	$label_recurrence.Size = '191, 23'
	$label_recurrence.TabIndex = 0
	$label_recurrence.Text = 'Configure the recurrence schedule'
	#
	# grpbx_starttime
	#
	$grpbx_starttime.Controls.Add($dtp_main_date)
	$grpbx_starttime.Controls.Add($dtp_main_time)
	$grpbx_starttime.Controls.Add($label_start)
	$grpbx_starttime.Location = '12, 12'
	$grpbx_starttime.Name = 'grpbx_starttime'
	$grpbx_starttime.Size = '437, 72'
	$grpbx_starttime.TabIndex = 2
	$grpbx_starttime.TabStop = $False
	$grpbx_starttime.Text = 'Time'
	#
	# dtp_main_date
	#
	$dtp_main_date.Location = '122, 28'
	$dtp_main_date.Name = 'dtp_main_date'
	$dtp_main_date.Size = '145, 20'
	$dtp_main_date.TabIndex = 2
	$dtp_main_date.add_ValueChanged($dtp_main_date_ValueChanged)
	#
	# dtp_main_time
	#
	$dtp_main_time.CustomFormat = 'HH:mm'
	$dtp_main_time.Format = 'Custom'
	$dtp_main_time.Location = '273, 28'
	$dtp_main_time.Name = 'dtp_main_time'
	$dtp_main_time.ShowUpDown = $True
	$dtp_main_time.Size = '154, 20'
	$dtp_main_time.TabIndex = 1
	#
	# label_start
	#
	$label_start.Location = '6, 28'
	$label_start.Name = 'label_start'
	$label_start.Size = '65, 23'
	$label_start.TabIndex = 0
	$label_start.Text = 'Start:'
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '253, 328'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '87, 23'
	$buttonOK.TabIndex = 1
	$buttonOK.Text = '&OK'
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	#
	# buttonCancel
	#
	$buttonCancel.Anchor = 'Bottom, Right'
	$buttonCancel.CausesValidation = $False
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '356, 328'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '93, 23'
	$buttonCancel.TabIndex = 0
	$buttonCancel.Text = '&Cancel'
	$buttonCancel.UseVisualStyleBackColor = $True
	$grpbx_starttime.ResumeLayout()
	$panel_none.ResumeLayout()
	$numupdown_custom_interval.EndInit()
	$panel_custominterval.ResumeLayout()
	$numupdown_weekly_recur.EndInit()
	$panel_weekly.ResumeLayout()
	$numdown_monthly_recur.EndInit()
	$numupdown_monthly_day.EndInit()
	$panel_monthly.ResumeLayout()
	$grpbx_recurrencepattern.ResumeLayout()
	$formChooseARefreshSchedu.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formChooseARefreshSchedu.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formChooseARefreshSchedu.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formChooseARefreshSchedu.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formChooseARefreshSchedu.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formChooseARefreshSchedu.ShowDialog()

}
#endregion Source: ChildForm.psf

#region Source: MainForm.psf
function Call-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
PzdkH6hyYgAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		$local:type = [ProgressBarOverlay]
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$splitcontainer1 = New-Object 'System.Windows.Forms.SplitContainer'
	$btn_stop = New-Object 'System.Windows.Forms.Button'
	$btn_start = New-Object 'System.Windows.Forms.Button'
	$progressbaroverlay1 = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$grpbx_SiteServer = New-Object 'System.Windows.Forms.GroupBox'
	$btn_Connect = New-Object 'System.Windows.Forms.Button'
	$txtbox_SiteServer = New-Object 'System.Windows.Forms.TextBox'
	$grpbx_SiteCode = New-Object 'System.Windows.Forms.GroupBox'
	$txtbox_SiteCode = New-Object 'System.Windows.Forms.TextBox'
	$Log = New-Object 'System.Windows.Forms.RichTextBox'
	$radiodbtn_user = New-Object 'System.Windows.Forms.RadioButton'
	$radiodbtn_device = New-Object 'System.Windows.Forms.RadioButton'
	$contextmenu = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$SelectDeselect = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$selectToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$deselectToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$addRemoveIncrementalUpdatesToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$addIncrementalUpdatesToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$removeIncrementalUpdatesToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$contextmenutree = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$SelectAllNodes = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$DeSelectAllNodes = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$SetRefreshScheduleToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$btn_search = New-Object 'System.Windows.Forms.Button'
	$treeview = New-Object 'System.Windows.Forms.TreeView'
	$btn_ImportCollections = New-Object 'System.Windows.Forms.Button'
	$radiodbtn_user = New-Object 'System.Windows.Forms.RadioButton'
	$radiodbtn_device = New-Object 'System.Windows.Forms.RadioButton'
	$panel101 = New-Object 'System.Windows.Forms.Panel'
	$checkbox0 = New-Object 'System.Windows.Forms.CheckBox'
	$datagridview1 = New-Object 'System.Windows.Forms.DataGridView'
	$txtbox_Filter = New-Object 'System.Windows.Forms.TextBox'
	$btn_filter = New-Object 'System.Windows.Forms.Button'
	$btn_nofilter = New-Object 'System.Windows.Forms.Button'
	$scheduleAFullUpdateOnThisCollectionToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$enablescheduleToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$disablescheduleToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$MainForm_Load={
		#TODO: Initialize Form Controls here
		$script:RKCMCollectionType = 'Device'
	}
	
	function Get-CMSiteConnection
	{
		[CmdletBinding()]
		param (
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteServer
		)
		# Determine Site Code
		try
		{
			$SiteCodeObjects = Get-WmiObject -Namespace "root\SMS" -Class SMS_ProviderLocation -ComputerName $SiteServer -ErrorAction Stop
			foreach ($SiteCodeObject in $SiteCodeObjects)
			{
				if ($SiteCodeObject.ProviderForLocalSite -eq $true)
				{
					$SiteCode = $SiteCodeObject.SiteCode
					$txtbox_SiteCode.Text = $SiteCode
					Append-RichtextboxStatus -Component 'Get SiteCode' -Message "Found Site Code $SiteCode"
					$txtbox_SiteServer.ReadOnly = $true
					$btn_search.Enabled = $true
				}
			}
		}
		catch [System.UnauthorizedAccessException] {
			Display-MsgBox -Title "Error" -Message "Access denied, please check if you have access rights to your siteserver" -ButtonSetup 0
			Append-RichtextboxStatus -Component $component -Message "Access denied" -MessageColor 'red'; return
		}
		catch [System.Exception] {
			Display-MsgBox -Title "Error" -Message "Unable to determine Site Code" -ButtonSetup 0
			Append-RichtextboxStatus -Component $component -Message "Unable to determine Site Code" -MessageColor 'red'; return
		}
		# import ConfigurationManager Module
		try
		{
			$CMModulePath = Join-Path -Path (Split-Path -Path "${Env:SMS_ADMIN_UI_PATH}" -ErrorAction Stop) -ChildPath "ConfigurationManager.psd1"
			Import-Module $CMModulePath -ErrorAction Stop
			Set-Location -Path "$Sitecode`:"
			Append-RichtextboxStatus -Component 'Get SiteCode' -Message "Successfully set location to Configuration Manager drive."
		}
		catch [System.Exception] {
			Display-MsgBox -Title "Error" -Message "Unable to load ConfigurationManager Module, please install Admin Console" -ButtonSetup 0
			Append-RichtextboxStatus -Component $component -Message "Unable to load ConfigurationManager Module, please install Admin Console" -MessageColor 'red'; return
		}
		
		$Global:SiteCode = $SiteCode
		$global:SiteServer = $SiteServer
		return $SiteCode
		return $SiteServer
	}
	function Get-IncrementalStatus
	{
	    <#
		    .SYNOPSIS
		    Looks at the refreshtype value and returns if incremental updates or enabled or disabled.
		    .DESCRIPTION
		    Looks at the refreshtype value and returns if incremental updates or enabled or disabled.
		    .EXAMPLE
		    Get-IncrementalStatus -RefreshType $RefreshType
		    .EXAMPLE
	        Get-IncrementalStatus $RefreshType
	        .Notes
	        Possible Enumeration Values: 
	        MANUAL(1)
	        PERIODIC(2)
	        CONSTANT_UPDATE(4)
	        BOTH(6)
		    #>
		
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true, Position = 0)]
			[int][ValidateNotNullOrEmpty()]
			$RefreshType
		)
		switch ($RefreshType)
		{
			"1" { $RefreshStatus = $false }
			"2" { $RefreshStatus = $false }
			"4" { $RefreshStatus = $true }
			"6" { $RefreshStatus = $true }
		}
		return [bool]$RefreshStatus
	}
	function Get-CheckedNodes 
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNodes $treeview.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param(
		[ValidateNotNull()]
		[System.Windows.Forms.TreeNodeCollection] $NodeCollection,
		[ValidateNotNull()]
		[System.Collections.ArrayList]$CheckedNodes)
		
		foreach($Node in $NodeCollection)
		{
			if($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNodes $Node.Nodes $CheckedNodes
		}
	}
	Function Display-MsgBox
	{
		# -Style:
		# 16 Error
		# 32 Question
		# 48 Exclamation
		# 64 Information
		
		# -ButtonSetup
		# 0 OK
		# 1 OKCancel
		# 2 AbortRetryIgnore
		# 3 YesNoCancel
		# 4 YesNo
		# 5 RetryCancel
		
		param (
			[Parameter(Mandatory = $true, Position = 1)]
			$Message,
			[Parameter(Mandatory = $true, Position = 2)]
			$Title,
			[Parameter(Mandatory = $false, Position = 3)]
			$Style = 64,
			[Parameter(Mandatory = $false, Position = 4)]
			$ButtonSetup = 0
		)
		[System.Windows.Forms.MessageBox]::Show($Message, $Title, $ButtonSetup, $Style)
		
	}
	function Append-RichtextboxStatus
	{
		PARAM (
			[Parameter(Mandatory = $true)]
			[string]$Message,
			[string]$MessageColor = "Black",
			[string]$DateTimeColor = "Gray",
			[string]$Component,
			[string]$ComponenetColor = "DarkCyan",
			[String]$ComputerNameColor = "Blue")
		
		$SortableTime = get-date -Format "yyyy-MM-dd HH:mm:ss"
		$Log.SelectionColor = $DateTimeColor
		$Log.AppendText("[$SortableTime] ")
		
		IF ($PSBoundParameters['ComputerName'])
		{
			$Log.SelectionColor = $ComputerNameColor
			$Log.AppendText(("$ComputerName ").ToUpper())
		}
		
		IF ($PSBoundParameters['Component'])
		{
			$Log.SelectionColor = $ComponenetColor
			$Log.AppendText("$Component ")
		}
		
		$Log.SelectionColor = $MessageColor
		$Log.AppendText("$Message`r")
		$Log.Refresh()
		$Log.ScrollToCaret()
		
		Write-Verbose -Message "$SortableTime $Message"
	}
	function Get-SubNode
	{
		param (
			[parameter(Mandatory = $true)]
			[int]$ParentContainerNodeID,
			[parameter(Mandatory = $true)]
			$ParentNode
		)
		$SubNodes = Get-WmiObject -Namespace "root\SMS\Site_$($SiteCode)" -Class SMS_ObjectContainerNode -ComputerName $SiteServer -Filter "ParentContainerNodeID = $($ParentContainerNodeID) AND ObjectType = $RKObjectType"
		if ($SubNodes -ne $null)
		{
			foreach ($SubNode in ($SubNodes | Sort-Object -Property Name))
			{
				$Node = $ParentNode.Nodes.Add($SubNode.ContainerNodeID, $SubNode.Name)
				Append-RichtextboxStatus -Component 'Retrieving Folder Structure' -Message "Found sub folder $($SubNode.Name)"
				Get-SubNode -ParentContainerNodeID $SubNode.ContainerNodeID -ParentNode $Node
			}
		}
	}
	
	function Enable-ChildNode($Node)
	{
		
		foreach ($n in $Node.nodes)
		{
			#$CheckStatus = $Node.checked		
			if ($n.checked -eq $true)
			{
				Append-RichtextboxStatus -Component 'Tree Control' -Message "$($n.Text) already enabled."
			}
			else
			{
				$n.checked = $true
				Append-RichtextboxStatus -Component 'Tree Control' -Message "$($n.Text) enabled."
			}
			Enable-ChildNode($n)
		}
	}
	
	function Disable-ChildNode($Node)
	{
		
		foreach ($n in $Node.nodes)
		{
			#$CheckStatus = $Node.checked		
			if ($n.checked -eq $false)
			{
				Append-RichtextboxStatus -Component 'Tree Control' -Message "$($n.Text) already disabled."
			}
			else
			{
				$n.checked = $false
				Append-RichtextboxStatus -Component 'Tree Control' -Message "$($n.Text) disabled."
			}
			Disable-ChildNode($n)
		}
	}
	Function Get-CMFolderStructure
	{
	    <#
	    .SYNOPSIS
	    Retrives the folder structure for Device and User Collections in Configuration Manager.
	    .DESCRIPTION
	    Retrives the folder structure for Device and User Collections in Configuration Manager.
	    .EXAMPLE
	    Get-CMFolderStructure -SiteCode 'PS1' -SiteServer 'CM01.Corp.Viamonstra.Com' -RKCMCollectionType 'Devce'
	    .EXAMPLE
		Get-CMFolderStructure 'PS1' 'CM01.Corp.Viamonstra.Com' 'Devce'
	    #>
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true, Position = 0)]
			[System.String][ValidateNotNullOrEmpty()]
			$SiteServer,
			[Parameter(Mandatory = $true, Position = 1)]
			[System.String][ValidateNotNullOrEmpty()]
			$SiteCode,
			[Parameter(Mandatory = $true, Position = 2)]
			[System.String][ValidateSet('Device','User')]
			$RKCMCollectionType
		)
		
		switch ($RKCMCollectionType)
		{
			'Device' {
				$RKObjectType = '5000'
			}
			
			'User' {
				$RKObjectType = '5001'
			}
		}
		
		Append-RichtextboxStatus -Component 'Retrieving Folder Structure' -Message 'Searching'
		$TreeView.Nodes.Clear()
		$treeview.CheckBoxes = $true
		# Create the root node
		$RootNode = $TreeView.Nodes.Add("Root")
		# Determine top level Container Node items for Device Collections
		$RootNodes = Get-WmiObject -Namespace "root\SMS\Site_$($SiteCode)" -Class SMS_ObjectContainerNode -ComputerName $SiteServer -Filter "ParentContainerNodeID = 0 AND ObjectType = $RKObjectType"
		foreach ($Node in ($RootNodes | Sort-Object -Property Name))
		{
			$CurrentNode = $RootNode.Nodes.Add($Node.ContainerNodeID, $Node.Name)
			Append-RichtextboxStatus -Component 'Retrieving Folder Structure' -Message "Found $($Node.Name)"
			Get-SubNode -ParentContainerNodeID $Node.ContainerNodeID -ParentNode $CurrentNode
		}
		$treeview.ExpandAll()
		
	}
	
	function Get-CMFolderObjects
	{
		    <#
		        .SYNOPSIS
		        Helps return devices collectiosn in a folder.
		        .DESCRIPTION
		        This function retrives all the device collections within a folder within Configuration Manager
		        .EXAMPLE
		        Get-CMFolderObjects -SiteCode 'PS1' -SiteServer 'CM01.Corp.Viamonstra.Com' -ContainerID '16777217'
		        .EXAMPLE
	            Get-CMFolderObjects PS1 CM01.Corp.Viamonstra.Com -ContainerID 16777217
	            .EXAMPLE
	            Return all device collections in the root folder
	            Get-CMFolderObject -SiteCode 'PS1' -SiteServer 'CM01'
	            .EXAMPLE
	            Return all device collections in the root folder
	            Get-CMFolderObject -SiteCode 'PS1' -SiteServer 'CM01' -ContainerID '0'
		    #>
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true, Position = 0)]
			[System.String][ValidateNotNullOrEmpty()]
			[ValidateLength(3, 3)]
			$SiteCode,
			[Parameter(Mandatory = $true, Position = 1)]
			[System.String][ValidateNotNullOrEmpty()]
			$SiteServer,
			[Parameter(Mandatory = $true, Position = 2)]
			[int][ValidateNotNullOrEmpty()]
			$ContainerID,
			[Parameter(Mandatory = $true, Position = 3)]
			[System.String][ValidateSet('Device', 'User')]
			$RKCMCollectionType
		)
		
		switch ($RKCMCollectionType)
		{
			'Device' {
				$RKObjectType = '5000'
				$RKCollectionType = '2'
			}
			
			'User' {
				$RKObjectType = '5001'
				$RKCollectionType = '1'
			}
		}
		
		switch ($ContainerID)
		{
			"0" {
				$Query = "select * from SMS_Collection where CollectionType=$RKCollectionType and NOT CollectionID is in
                (select InstanceKey from SMS_ObjectContainerItem where ObjectType=$RKObjectType)"
			}
			
			default
			{
				$Query = "select * from SMS_Collection where CollectionID is in
                (select InstanceKey from SMS_ObjectContainerItem where ObjectType=$RKObjectType
                and ContainerNodeID='$ContainerID') and CollectionType=$RKCollectionType"
			}
		}
		Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Query $Query
	}
	
	
	function Get-RKCollections
	{
		$CheckedNodes = New-Object System.Collections.ArrayList
		$Component = 'Import Collections'
		$Select = $false
		$DGVArray = @()
		Get-CheckedNodes $treeview.Nodes $CheckedNodes
		foreach ($node in $CheckedNodes)
		{
			$CollCount = 0
			$CMFolderObjectsCount = 0
			$CMFolderObjects = $null
			$CMFolderObjects = @(Get-CMFolderObjects -SiteCode $SiteCode -SiteServer $SiteServer -ContainerID $node.Name -RKCMCollectionType $RKCMCollectionType)
			$CMFolderObjectsCount = $CMFolderObjects.Count
			$FolderText = $node.Text
			
			$progressbaroverlay1.Maximum = $CMFolderObjectsCount
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 0
			
			Append-RichtextboxStatus -Message "Importing $CMFolderObjectsCount collection/s from folder $FolderText" -Component $Component
			foreach ($Collection in $CMFolderObjects)
			{
				$CollectionRefesh = Get-CollectionRefresh -Collection $Collection
				$CollCount++
				$progressbaroverlay1.PerformStep()
				$Refreshinfo = Get-IncrementalStatus -RefreshType $Collection.RefreshType
				$Object = [PSCustomObject]@{
					Select = $Select
					'Collection' = $Collection.Name
					Folder = $FolderText
					Incremental = $Refreshinfo
					'Scheduled' = Get-CMScheduleStatus -RKCMStatus $Collection.RefreshType
					'Refresh Schedule' = $CollectionRefesh.RefreshDate
					'Start Time' = [string]$CollectionRefesh.RefreshTime
					'New Schedule String' = '0'
				}
				$DGVArray += $Object
				$progressbaroverlay1.TextOverlay = "Adding Collection $($CollCount) / $($CMFolderObjectsCount)"
			}
		}
		$datagridview1.DataSource = ConvertTo-DataTable $DGVArray
		$progressbaroverlay1.TextOverlay = 'Collections Imported!'
		$datagridview1.Columns[1].ReadOnly = $true
		$datagridview1.Columns[2].ReadOnly = $true
		$datagridview1.Columns[3].ReadOnly = $true
		$datagridview1.Columns[4].ReadOnly = $true
		$datagridview1.Columns[5].ReadOnly = $true
		$datagridview1.Columns[6].ReadOnly = $true
		$datagridview1.Columns[0].Width = 70
		$datagridview1.Columns[1].Width = 300
		$datagridview1.Columns[2].Width = 120
		$datagridview1.Columns[3].Width = 80
		$datagridview1.Columns[4].Width = 80
		$datagridview1.Columns[5].Width = 200
		$datagridview1.Columns[6].Width = 110
	}
	
	Function Convert-DayNumbersToDayName
	{
		[CmdletBinding()]
		Param (
			[String]$DayNumber
		)
		
		Switch ($DayNumber)
		{
			"1" { $DayName = "Sunday" }
			"2" { $DayName = "Monday" }
			"3" { $DayName = "TuesDay" }
			"4" { $DayName = "WednesDay" }
			"5" { $DayName = "ThursDay" }
			"6" { $DayName = "FriDay" }
			"7" { $DayName = "Saturday" }
			
		}
		
		Return $DayName
	}
	Function Convert-MonthToNumbers
	{
		[CmdletBinding()]
		Param (
			[String]$MonthNumber
		)
		
		Switch ($MonthNumber)
		{
			"1" { $MonthName = "January" }
			"2" { $MonthName = "Feburary" }
			"3" { $MonthName = "March" }
			"4" { $MonthName = "April" }
			"5" { $MonthName = "May" }
			"6" { $MonthName = "June" }
			"7" { $MonthName = "July" }
			"8" { $MonthName = "August" }
			"9" { $MonthName = "September" }
			"10" { $MonthName = "October" }
			"11" { $MonthName = "November" }
			"12" { $MonthName = "December" }
		}
		
		Return $MonthName
	}
	Function Convert-WeekOrderNumber
	{
		[CmdletBinding()]
		Param (
			[String]$WeekOrderNumber
		)
		
		Switch ($WeekOrderNumber)
		{
			0 { $WeekOrderName = "Last" }
			1 { $WeekOrderName = "First" }
			2 { $WeekOrderName = "Second" }
			3 { $WeekOrderName = "Third" }
			4 { $WeekOrderName = "Fourth" }
			
		}
		
		Return $WeekOrderName
	}
	
	function Get-CollectionRefresh
	{
	    <#
	        .SYNOPSIS
	        Retrieves refreshdate and time for a collection.
	        .DESCRIPTION
	        This function retrives the collection refreshdate and time for a given collection
	        .EXAMPLE
	        Get-CollectionRefresh -Collection $Collection
	        .EXAMPLE
	        Get-CollectionRefresh $Collection
	    #>
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true, Position = 0)]
			[System.Array][ValidateNotNullOrEmpty()]
			$Collection
		)		
		$Collection.__PATH
		$Collection = [wmi]$Collection.__path
		
		$CollectionRefresh = $null
		$CollectionRefresh = @()
		$Object = New-Object -Type System.Object
		
		if ($Collection.RefreshType -eq 1)
		{
			
			$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value ""
			$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ""
		}
		
		Else
		{
			switch ($Collection.RefreshSchedule.__CLASS)
			{
				"SMS_ST_RecurWeekly" {
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value ("Occures every: $($Collection.RefreshSchedule.ForNumberOfWeeks) weeks on " + (Convert-DayNumbersToDayName -DayNumber $Collection.RefreshSchedule.Day))
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
				}
				
				"SMS_ST_RecurInterval" {
					
					if ($Collection.RefreshSchedule.DaySpan -ne 0)
					{
						$text = "Occures every $($Collection.RefreshSchedule.DaySpan) days"
					}
					if ($Collection.RefreshSchedule.HourSpan -ne 0)
					{
						$text = "Occures every $($Collection.RefreshSchedule.HourSpan) hours"
					}
					if ($Collection.RefreshSchedule.MinuteSpan -ne 0)
					{
						$text = "Occures every $($Collection.RefreshSchedule.MinuteSpan) minutes"
					}
					
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value $text
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
				}
				
				"SMS_ST_RecurMonthlyByDate" {
					
					If ($Collection.RefreshSchedule.MonthDay -eq 0)
					{
						
						$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value "Occures the last day of every $($Collection.RefreshSchedule.ForNumberOfMonths) months"
						$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
					}
					Else
					{
						
						$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value "Occures day $($Collection.RefreshSchedule.MonthDay) of every $($Collection.RefreshSchedule.ForNumberOfMonths) months"
						$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
					}
				}
				
				"SMS_ST_RecurMonthlyByWeekday" {
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value ("Occures the " + (Convert-WeekOrderNumber -weekordernumber $Collection.RefreshSchedule.WeekOrder) + " " + (Convert-DayNumbersToDayName -DayNumber $Collection.RefreshSchedule.Day) + " of every " + (Convert-MonthToNumbers -MonthNumber $Collection.RefreshSchedule.ForNumberOfMonths))
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
				}
				
				"SMS_ST_NonRecurring" {
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value "No Recurrence. The Scheduled event Occures once at the specific time"
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
				}
			}
		}
		
		$CollectionRefresh += $Object
		$CollectionRefresh
	}
	
	function Get-CMScheduleStatus
	{
	    <#
		    .SYNOPSIS
		    converts the schedule status from [int] to [bool]
		    .DESCRIPTION
		    converts the schedule status from [int] to [bool]
		    .EXAMPLE
		    Get-CMScheduleStatus -RKCMStatus 4
		    .EXAMPLE
	        Get-CMScheduleStatus 1
	        .Notes
	        Possible Enumeration Values: 
	        1 = Manual Update only
	        2 = Scheduled Updates only
	        4 = Incremental Updates Only 
	        6 = Incremental and Scheduled Updates  
		    #>
		
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true, Position = 0)]
			[int][ValidateNotNullOrEmpty()]
			[ValidateSet(1, 2, 4, 6)]
			$RKCMStatus
		)
		switch ($RKCMStatus)
		{
			1 { $CollectionTypeReturn = $false }
			2 { $CollectionTypeReturn = $true }
			4 { $CollectionTypeReturn = $false }
			6 { $CollectionTypeReturn = $true }
		}
		return [bool]$CollectionTypeReturn
	}
	
	$btn_ImportCollections_Click={
		#TODO: Place custom script here
		$btn_ImportCollections.Enabled = $false
		$progressbaroverlay1.Visible = $true
		Get-RKCollections
		if ($datagridview1.rows.Count -eq 0) {
			$checkbox0.Visible = $false
			$btn_start.Enabled = $false
			$btn_stop.Enabled = $false
		} else {
			$checkbox0.Visible = $true
			$btn_start.Enabled = $true
			$btn_stop.Enabled = $true
		}
		$btn_ImportCollections.Enabled = $true
	}
	
	$btn_Connect_Click={
		#TODO: Place custom script here
		$btn_Connect.Enabled = $false
		Append-RichtextboxStatus -Message "Getting SiteCode information"
		$SiteServer = $txtbox_SiteServer.Text
		if (!$SiteServer)
		{
			Append-RichtextboxStatus -Message "SiteServer is empty, please input SiteServer name" -MessageColor 'red'
		}
		else
		{
			Get-CMSiteConnection -SiteServer $SiteServer
		}
		$btn_Connect.Enabled = $true
	}
	
	$txtbox_SiteCode_TextChanged={
		#TODO: Place custom script here
		
	}
	
	#region Control Helper Functions
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{	
				$array.Add($Item)	
			}
			$DataGridView.DataSource = $array
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($Table -eq $null)
		{
			$Table = New-Object System.Data.DataTable
		}
	
		if($InputObject-is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		else
		{
			if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
	
				if($InputObject -eq $null){ return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach($item in $InputObject)
				{
					if($item -ne $null)
					{
						$object = $item
						break	
					}
				}
	
				if($object -eq $null) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if($prop.Value -ne $null)
						{
							try{ $type = $prop.Value.GetType() } catch {}
						}
	
						if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
			      			[void]$table.Columns.Add($prop.Name, $type) 
						}
						else #Type info not found
						{ 
							[void]$table.Columns.Add($prop.Name) 	
						}
					}
			    }
				
				if($object -is [System.Data.DataRow])
				{
					foreach($item in $InputObject)
					{	
						$Table.Rows.Add($item)
					}
					return  @(,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()	
			}
			
			foreach($item in $InputObject)
			{		
				$row = $table.NewRow()
				
				if($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
	
		return @(,$Table)	
	}
	#endregion
	
	$checkbox0_CheckedChanged={
		#TODO: Place custom script here
		#progressbar
		$Time = Measure-Command {
			$SelectedRowCount = 0
			$AllRowCount = 0
			for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
			{
				$AllRowCount++
			}
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 0
			$progressbaroverlay1.TextOverlay = ''
			$progressbaroverlay1.Maximum = $AllRowCount
			
			if ($checkbox0.checked -eq $true)
			{
				$checkbox0.Enabled = $false
				
				Append-RichtextboxStatus -Message 'Selecting all collections, please wait...' -Component 'Select'
				
				$datagridview1.Columns[3].ReadOnly = $false
				
				for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
				{
					#progressbar
					$SelectedRowCount++
					$progressbaroverlay1.TextOverlay = "Selecting all collections $($SelectedRowCount) / $($AllRowCount)"
					[System.Windows.Forms.Application]::DoEvents()
					$progressbaroverlay1.PerformStep()
					$selectedname = $($datagridview1.Rows[$RowIndex].cells[1].value)
					if (($selectedname -eq 'All Systems') -or
					($selectedname -eq 'All Unknown Computers') -or
					($selectedname -eq 'All Mobile Devices') -or
					($selectedname -eq 'All Desktop and Server Clients'))
					{
						Append-RichtextboxStatus -Message "$selectedname - is a read only Collection" -Component 'Select'
					}
					else
					{
						$datagridview1.Rows[$RowIndex].cells[0].value = $true					
						Append-RichtextboxStatus -Message "Selected $selectedname" -Component 'Select'
					}				
				}
				
				Append-RichtextboxStatus -Message "Done" -Component 'Select'
				$progressbaroverlay1.TextOverlay = 'All selected!'
				
				$checkbox0.Enabled = $true
			}
			
			if ($checkbox0.checked -eq $false)
			{
				Append-RichtextboxStatus -Message "De-selecting all collections please wait..." -Component 'De-Select'
				$checkbox0.Enabled = $false
				
				$datagridview1.Columns[3].ReadOnly = $true
				
				for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
				{
					#progressbar
					$SelectedRowCount++
					$progressbaroverlay1.TextOverlay = "Deselecting all collections $($SelectedRowCount) / $($AllRowCount)"
					[System.Windows.Forms.Application]::DoEvents()
					$progressbaroverlay1.PerformStep()
					
					
					$datagridview1.Rows[$RowIndex].cells[0].value = $false
					$selectedname = $($datagridview1.Rows[$RowIndex].cells[1].value)
					Append-RichtextboxStatus -Message "Deselected $selectedname" -Component 'De-Select'
				}
				Append-RichtextboxStatus -Message "Done" -Component 'De-Select'
				$progressbaroverlay1.TextOverlay = 'All de-selected!'
				
				$checkbox0.Enabled = $true
			}
		}
		Append-RichtextboxStatus -Component 'Time' -Message $Time.TotalSeconds
	}
	
	$Select_CheckedChanged={
		#TODO: Place custom script here
	}
	
	Function Set-DGVStatus
	{
		for ($i = 0; $i -lt $datagridview1.RowCount; $i++)
		{
			if ($datagridview1.Rows[$i].Cells[0].Value -eq $true)
			{
				$datagridview1.Rows[$i].DefaultCellStyle.BackColor = 'LightYellow'
			}
			else
			{
				#do nothing
			}
		}
	}
	
	function Set-RKCollection
	{
	    <#
	    .SYNOPSIS
	    Short Description
	    .DESCRIPTION
	    Detailed Description
	    .EXAMPLE
	    Set-RKCollection
	    .NOTES
	    The following refresh types exist for Configuration Manager collections  
	    6 = Incremental and Scheduled Updates  
	    4 = Incremental Updates Only  
	    2 = Scheduled Updates only  
	    1 = Manual Update only 
	    .EXAMPLE
	    Set-RKCollection
	  #>
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true, Position = 0)]
			[System.String]$SiteServer,
			[Parameter(Mandatory = $true, Position = 1)]
			[System.String]$SiteCode,
			[Parameter(Mandatory = $true, Position = 2)]
			[System.String]$Name,
			[Parameter(Mandatory = $true, Position = 3)]
			[int][ValidateSet(1, 2, 4, 6)]
			$RefreshType
		)
		switch ($RefreshType)
		{
			"1" {
				try
				{
					$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
					$CollectionQuery = [wmi]$CollectionQuery.__PATH
					$CollectionQuery.RefreshType = 1
					$CollectionQuery.Put()
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
				}
				catch
				{
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "Failed to update collection $Name"
				}
			}
			"2" {
				try
				{
					if ($RKScheduleString)
					{
						$RKSchedule = Convert-CMSchedule -ScheduleString $RKScheduleString
						$RKSchedconverted = $RKSchedule.psbase.managedobject
						$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
						$CollectionQuery = [wmi]$CollectionQuery.__PATH
						$CollectionQuery.RefreshType = 2
						$CollectionQuery.RefreshSchedule = $RKSchedconverted
						$CollectionQuery.Put()
						Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
					}
					elseif (!($RKScheduleString))
					{
						$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
						$CollectionQuery = [wmi]$CollectionQuery.__PATH
						$CollectionQuery.RefreshType = 2
						$CollectionQuery.Put()
						Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
					}
				}
				catch
				{
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "Failed to update collection $Name" -MessageColor 'Red'
				}
			}
			"4" {
				try
				{
					$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
					$CollectionQuery = [wmi]$CollectionQuery.__PATH
					$CollectionQuery.RefreshType = 4
					$CollectionQuery.Put()
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
					
				}
				catch
				{
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "Failed to update collection $Name" -MessageColor 'Red'
				}
			}
			"6" {
				try
				{
					if ($RKScheduleString)
					{
						$RKSchedule = Convert-CMSchedule -ScheduleString $RKScheduleString
						$RKSchedconverted = $RKSchedule.psbase.managedobject
						$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
						$CollectionQuery = [wmi]$CollectionQuery.__PATH
						$CollectionQuery.RefreshType = 6
						$CollectionQuery.RefreshSchedule = $RKSchedconverted
						$CollectionQuery.Put()
						Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
					}
					elseif (!($RKScheduleString))
					{
						$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
						$CollectionQuery = [wmi]$CollectionQuery.__PATH
						$CollectionQuery.RefreshType = 6
						$CollectionQuery.Put()
						Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
					}		
				}
				catch
				{
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "Failed to update collection $Name" -MessageColor 'Red'
				}
			}
		}
	}
	
	$contextmenu_Opening=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
	}
	
	$deselectToolStripMenuItem_Click={
		#TODO: Place custom script here
		Append-RichtextboxStatus -Component 'Right Click' -Message "Deselecting all highlighted rows"
		#Progressbar
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
		foreach ($item in $datagridview1.SelectedRows)
		{
			$RowCheckedState = $item.Cells[0].value
			$RowCollectionName = $Item.Cells[1].Value
			if ($RowCheckedState -eq $false)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName already taken out of update mode."
			}
			elseif ($RowCheckedState -eq $true)
			{
				$item.Cells[0].Value = $false
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName taken out of update mode"
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName"
			}
			$progressbaroverlay1.PerformStep()
			$progressbaroverlay1.TextOverlay = "Disabling Collection For Update $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
			$progressbaroverlay1.Update()
		}
	}
	
	$removeIncrementalUpdatesToolStripMenuItem_Click = {
		#TODO: Place custom script here
		Append-RichtextboxStatus -Component 'Right Click' -Message "Deselecting all highlighted rows"
		#Progressbar
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
		foreach ($item in $datagridview1.SelectedRows)
		{
			$RowCollectionName = $Item.Cells[1].Value
			$RowCheckedState = $item.Cells[0].value
			if ($RowCheckedState -eq $true)
			{
				$IncCheckedState = $item.Cells[3].value			
				if ($IncCheckedState -eq $false)
				{
					Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName incremental update already disabled."
				}
				elseif ($IncCheckedState -eq $true)
				{
					$item.Cells[3].Value = $false
					Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName incremental update disabled"
				}
				else
				{
					Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
				}
			}
			elseif ($RowCheckedState -eq $false)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode, unable to change incremental state" -MessageColor 'Red'
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the selected state." -MessageColor 'Red'
			}
			$progressbaroverlay1.PerformStep()
			$progressbaroverlay1.TextOverlay = "Removing Incremental Update $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
			$progressbaroverlay1.Update()
		}
	}
	
	Function set-NewCMSchedule {
		#Progressbar
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
		foreach ($item in $datagridview1.SelectedRows)
		{
			$RowCollectionName = $Item.Cells[1].Value
			$RowCheckedState = $item.Cells[0].value
			if ($RowCheckedState -eq $true)
			{
				$item.Cells[5].Value = $script:Token.RefreshDate
				$item.Cells[6].Value = $script:Token.StartTime
				$item.Cells[7].value = Convert-CMSchedule -InputObject $script:CFSchedule
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName schedule updated"
			}
			elseif ($RowCheckedState -eq $false)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode unable to change shedule state" -MessageColor 'Red'
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the selected state." -MessageColor 'Red'
			}
			$progressbaroverlay1.PerformStep()
			$progressbaroverlay1.TextOverlay = "Updating Schedule On Collection $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
			$progressbaroverlay1.Update()
		}
	}
	
	$addIncrementalUpdatesToolStripMenuItem_Click = {
		#TODO: Place custom script here
		Append-RichtextboxStatus -Component 'Right Click' -Message "Adding incremental updates to all highlighted rows that are selected"
		#Progressbar
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
		foreach ($item in $datagridview1.SelectedRows)
		{
			$RowCollectionName = $Item.Cells[1].Value
			$RowCheckedState = $item.Cells[0].value
			if ($RowCheckedState -eq $true)
			{
				$IncCheckedState = $item.Cells[3].value
				if ($IncCheckedState -eq $true)
				{
					Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName incremental update already enabled."
				}
				elseif ($IncCheckedState -eq $false)
				{
					$item.Cells[3].Value = $true
					Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName incremental update enabled"
				}
				else
				{
					Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
				}
			}
			elseif ($RowCheckedState -eq $false)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode, unable to change incremental state" -MessageColor 'Red'
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the selected state." -MessageColor 'Red'
			}
			$progressbaroverlay1.PerformStep()
			$progressbaroverlay1.TextOverlay = "Adding Incremental Update $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
			$progressbaroverlay1.Update()
		}
	}
	
	$selectToolStripMenuItem_Click = {
		#TODO: Place custom script here
		Append-RichtextboxStatus -Component 'Right Click' -Message "selecting all highlighted rows"
		#Progressbar
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
		foreach ($item in $datagridview1.SelectedRows)
		{
			$RowCheckedState = $item.Cells[0].value
			$RowCollectionName = $Item.Cells[1].Value		
			if ($RowCheckedState -eq $true)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName already in update mode."
			}
			elseif (($RowCollectionName -eq 'All Systems') -or
				($RowCollectionName -eq 'All Unknown Computers') -or
				($RowCollectionName -eq 'All Mobile Devices') -or
				($RowCollectionName -eq 'All Desktop and Server Clients') -or
				($RowCollectionName -eq 'All Users') -or
				($RowCollectionName -eq 'All User Groups') -or
				($RowCollectionName -eq 'All Users and User Groups')) {
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName is a readonly Collection"
			}
			elseif ($RowCheckedState -eq $false)
			{
				$item.Cells[0].Value = $true
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName placed in update mode"
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
			}
			$progressbaroverlay1.PerformStep()
			$progressbaroverlay1.TextOverlay = "Enabling Collection For Update $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
			$progressbaroverlay1.Update()
		}
	}
	
	$btn_filter_Click={
		#TODO: Place custom script here
		$datagridview1.DataSource.DefaultView.RowFilter = "Collection LIKE '*$($txtbox_Filter.Text)*'"
		Set-DGVStatus
	}
	
	$btn_nofilter_Click={
		#TODO: Place custom script here
		$txtbox_Filter.Text = $null
		$datagridview1.DataSource.DefaultView.RowFilter = "Collection LIKE '*$($txtbox_Filter.Text)*'"
		Set-DGVStatus
	}
	
	$datagridview1_Sorted={
		#TODO: Place custom script here
		Set-DGVStatus
	}
	
	$SelectAllNodes_Click={
		#TODO: Place custom script here
		if ($Treeview.SelectedNode.Checked -eq $true) {
			Append-RichtextboxStatus -Component 'Tree Control' -Message "$($Treeview.SelectedNode.Text) already enabled."
		} elseif ($Treeview.SelectedNode.Checked -eq $false) {
			$Treeview.SelectedNode.Checked = $true
			Append-RichtextboxStatus -Component 'Tree Control' -Message "$($Treeview.SelectedNode.Text) enabled."
		}
		Enable-ChildNode($Treeview.SelectedNode)
	}
	
	$DeSelectAllNodes_Click={
		#TODO: Place custom script here
		if ($Treeview.SelectedNode.Checked -eq $false)
		{
			Append-RichtextboxStatus -Component 'Tree Control' -Message "$($Treeview.SelectedNode.Text) already disabled."
		}
		elseif ($Treeview.SelectedNode.Checked -eq $true)
		{
			$Treeview.SelectedNode.Checked = $false
			Append-RichtextboxStatus -Component 'Tree Control' -Message "$($Treeview.SelectedNode.Text) disabled."
		}
		
		Disable-ChildNode($Treeview.SelectedNode)
	}
	
	$contextmenutree_Opening=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		if ($Treeview.SelectedNode)
		{
			$SelectAllNodes.Enabled = $true
			$DeSelectAllNodes.Enabled = $true
		}
		elseif (!($Treeview.SelectedNode))
		{
			$SelectAllNodes.Enabled = $false
			$DeSelectAllNodes.Enabled = $false
			Append-RichtextboxStatus -Component 'Tree Control' -MessageColor 'Red' -Message 'You need to highlight a folder in the tree on the left to be able to use the context menu'
		}
		else
		{
			Append-RichtextboxStatus -Component 'Tree Control' -Message "There were problems looking up highlighted status of a node during right click" -MessageColor 'Red'
		}
	}
	
	$treeview_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
		#TODO: Place custom script here
	}
	
	$SetRefreshScheduleToolStripMenuItem_Click={
		#TODO: Place custom script here
		if ((Call-ChildForm_psf) -eq 'OK')
		{
			set-NewCMSchedule
		}
	}
	
	$btn_start_Click={
		#TODO: Place custom script here
		# Determine selected row count
		$script:CancelLoop = $false
		$btn_stop.Enabled = $true
		$datagridview1.ClearSelection()
		$btn_start.Enabled = $false
		$SelectedRowCount = 0
		$AllRowCount = 0
		
		for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
		{
			if ($datagridview1.Rows[$RowIndex].Cells[0].Value -eq $true)
			{
				$AllRowCount++
			}
		}
		
		#Progressbar
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.Maximum = $AllRowCount
		
		# Enumerate through selected rows in DataGridView
		for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
		{
			if ($script:CancelLoop -eq $true)
			{
				#Clear the progress bar
				$progressbaroverlay1.Value = 0
				$progressbaroverlay1.TextOverlay = "Stopped"
				#Exit the loop
				$btn_start.Enabled = $true
				return
			}
			
			$RowCheckedState = $datagridview1.Rows[$RowIndex].Cells[0].Value
			$RowCollectionName = $datagridview1.Rows[$RowIndex].Cells[1].Value
			$IncCheckedState = $datagridview1.Rows[$RowIndex].Cells[3].Value
			$SchedCheckedState = $datagridview1.Rows[$RowIndex].Cells[4].Value
			if ($datagridview1.Rows[$RowIndex].Cells[7].Value -eq '0')
			{
				$RKScheduleString = $null
			}
			else
			{
				$RKScheduleString = $datagridview1.Rows[$RowIndex].Cells[7].Value
			}
			
			if ($RowCheckedState -eq $true)
			{
				if ($SchedCheckedState -eq $false -and $IncCheckedState -eq $false)
				{
					# Manual
					Set-RKCollection -SiteServer $SiteServer -SiteCode $SiteCode -Name $RowCollectionName -RefreshType 1
				}
				elseif ($SchedCheckedState -eq $true -and $IncCheckedState -eq $false)
				{
					# Scheduled Only
					Set-RKCollection -SiteServer $SiteServer -SiteCode $SiteCode -Name $RowCollectionName -RefreshType 2
				}
				elseif ($SchedCheckedState -eq $false -and $IncCheckedState -eq $true)
				{
					# Incremental Only
					Set-RKCollection -SiteServer $SiteServer -SiteCode $SiteCode -Name $RowCollectionName -RefreshType 4
				}
				elseif ($SchedCheckedState -eq $true -and $IncCheckedState -eq $true)
				{
					# Scheduled and Incremental
					Set-RKCollection -SiteServer $SiteServer -SiteCode $SiteCode -Name $RowCollectionName -RefreshType 6
				}
				$SelectedRowCount++
				$progressbaroverlay1.PerformStep()
				$progressbaroverlay1.TextOverlay = "Saving settings $($SelectedRowCount) / $($AllRowCount)"
				$datagridview1.Rows[$RowIndex].Cells[0].Value = $false
				$progressbaroverlay1.Update()
				[System.Windows.Forms.Application]::DoEvents()
			}
		}
		
		$progressbaroverlay1.TextOverlay = 'All Collections have been updated'
		$btn_start.Enabled = $true
	}
	
	
	$datagridview1_CellPainting=[System.Windows.Forms.DataGridViewCellPaintingEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellPaintingEventArgs]
		#TODO: Place custom script here
		if ($_.RowIndex -ge 0 -and $_.ColumnIndex -ge 0)
		{
			if ($_.ColumnIndex -eq 0)
			{
				$RKCellV = $this.Rows[$_.RowIndex].Cells[1].Value
				
				if (($RKCellV -eq 'All Systems') -or
				($RKCellV -eq 'All Unknown Computers') -or
				($RKCellV -eq 'All Mobile Devices') -or
				($RKCellV -eq 'All Desktop and Server Clients') -or
				($RKCellV -eq 'All Users') -or
				($RKCellV -eq 'All User Groups') -or
				($RKCellV -eq 'All Users and User Groups'))
				{
					$this.Rows[$_.RowIndex].Cells | % { $_.Style.BackColor = 'LightGray' }
					$this.Rows[$_.RowIndex].Cells | % { $_.ReadOnly = $true }
				}
				elseif ($this.Rows[$_.RowIndex].Cells[0].Value)
				{
					$this.Rows[$_.RowIndex].Cells | %{ $_.Style.BackColor = 'LightYellow' }
					$this.Rows[$_.RowIndex].cells[3].readonly = $false
					$this.Rows[$_.RowIndex].cells[4].readonly = $false
					
				}
				else
				{
					$this.Rows[$_.RowIndex].Cells | ForEach-Object{ $_.Style.BackColor = 'white' }
					$this.Rows[$_.RowIndex].cells[3].readonly = $true
					$this.Rows[$_.RowIndex].cells[4].readonly = $true
				}
			}
		}
	}
	
	
	
	
	$enablescheduleToolStripMenuItem_Click={
		#TODO: Place custom script here
		Append-RichtextboxStatus -Component 'Right Click' -Message "Enabling scheduled updates to all highlighted rows that are selected"
		#Progressbar
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
		foreach ($item in $datagridview1.SelectedRows)
		{
			$RowCollectionName = $Item.Cells[1].Value
			$RowCheckedState = $item.Cells[0].value
			if ($RowCheckedState -eq $true)
			{
				$SchedCheckedState = $item.Cells[4].value
				if ($SchedCheckedState -eq $true)
				{
					Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName scheduled update already enabled"
				}
				elseif ($SchedCheckedState -eq $false)
				{
					$item.Cells[4].Value = $true
					Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName scheduled update enabled"
				}
				else
				{
					Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
				}
			}
			elseif ($RowCheckedState -eq $false)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode, unable to change schedule state" -MessageColor 'Red'
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the enabled state" -MessageColor 'Red'
			}
			$progressbaroverlay1.PerformStep()
			$progressbaroverlay1.TextOverlay = "Enabling Scheduled Updates $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
			$progressbaroverlay1.Update()
		}
	}
	
	$disablescheduleToolStripMenuItem_Click={
		#TODO: Place custom script here
		Append-RichtextboxStatus -Component 'Right Click' -Message "Disabling scheduled updates to all highlighted rows that are selected"
		#Progressbar
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
		foreach ($item in $datagridview1.SelectedRows)
		{
			$RowCollectionName = $Item.Cells[1].Value
			$RowCheckedState = $item.Cells[0].value
			if ($RowCheckedState -eq $true)
			{
				$SchedCheckedState = $item.Cells[4].value
				if ($SchedCheckedState -eq $false)
				{
					Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName scheduled update already disabled"
				}
				elseif ($SchedCheckedState -eq $true)
				{
					$item.Cells[4].Value = $false
					Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName scheduled update disabled"
				}
				else
				{
					Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
				}
			}
			elseif ($RowCheckedState -eq $false)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode, unable to change schedule state" -MessageColor 'Red'
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the selected state" -MessageColor 'Red'
			}
			$progressbaroverlay1.PerformStep()
			$progressbaroverlay1.TextOverlay = "Disabling Scheduled Updates $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
			$progressbaroverlay1.Update()
		}
	}
	
	$btn_stop_Click={
		#TODO: Place custom script here
		Append-RichtextboxStatus -Message 'Stopped'
		$script:CancelLoop = $true
		$btn_stop.Enabled = $false
		
	}
	
	$datagridview1_CurrentCellDirtyStateChanged={
		#TODO: Place custom script here
		if ($this.IsCurrentCellDirty)
		{
			$this.CommitEdit([System.Windows.Forms.DataGridViewDataErrorContexts]::Commit)
		}
	}
	
	$radiodbtn_device_CheckedChanged={
		#TODO: Place custom script here
		if ($this.checked -eq $true)
		{
			$script:RKCMCollectionType = 'Device'
			$TreeView.Nodes.Clear()
			$treeview.CheckBoxes = $true
		}
	}
	
	$radiodbtn_user_CheckedChanged={
		#TODO: Place custom script here
		if ($this.checked -eq $true)
		{
			$script:RKCMCollectionType = 'User'
			$TreeView.Nodes.Clear()
			$treeview.CheckBoxes = $true
		}
	}
	
	$btn_search_Click={
		#TODO: Place custom script here
		Get-CMFolderStructure -SiteCode $SiteCode -SiteServer $SiteServer -RKCMCollectionType $script:RKCMCollectionType
	}
	
	$datagridview1_DataBindingComplete=[System.Windows.Forms.DataGridViewBindingCompleteEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewBindingCompleteEventArgs]
		#TODO: Place custom script here
		$this.Columns[7].Visible = $false
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_txtbox_SiteServer = $txtbox_SiteServer.Text
		$script:MainForm_txtbox_SiteCode = $txtbox_SiteCode.Text
		$script:MainForm_Log = $Log.Text
		$script:MainForm_radiodbtn_user = $radiodbtn_user.Checked
		$script:MainForm_radiodbtn_device = $radiodbtn_device.Checked
		if($treeview.SelectedNode -ne $null)
		{
			$script:MainForm_treeview = $treeview.SelectedNode.Text
		}
		else
		{
			$script:MainForm_treeview = $null
		}
		$script:MainForm_checkbox0 = $checkbox0.Checked
		$script:MainForm_datagridview1 = $datagridview1.SelectedCells
		$script:MainForm_txtbox_Filter = $txtbox_Filter.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$btn_stop.remove_Click($btn_stop_Click)
			$btn_start.remove_Click($btn_start_Click)
			$btn_Connect.remove_Click($btn_Connect_Click)
			$txtbox_SiteCode.remove_TextChanged($txtbox_SiteCode_TextChanged)
			$MainForm.remove_Load($MainForm_Load)
			$radiodbtn_user.remove_CheckedChanged($radiodbtn_user_CheckedChanged)
			$radiodbtn_device.remove_CheckedChanged($radiodbtn_device_CheckedChanged)
			$contextmenu.remove_Opening($contextmenu_Opening)
			$selectToolStripMenuItem.remove_Click($selectToolStripMenuItem_Click)
			$deselectToolStripMenuItem.remove_Click($deselectToolStripMenuItem_Click)
			$addIncrementalUpdatesToolStripMenuItem.remove_Click($addIncrementalUpdatesToolStripMenuItem_Click)
			$removeIncrementalUpdatesToolStripMenuItem.remove_Click($removeIncrementalUpdatesToolStripMenuItem_Click)
			$contextmenutree.remove_Opening($contextmenutree_Opening)
			$SelectAllNodes.remove_Click($SelectAllNodes_Click)
			$DeSelectAllNodes.remove_Click($DeSelectAllNodes_Click)
			$SetRefreshScheduleToolStripMenuItem.remove_Click($SetRefreshScheduleToolStripMenuItem_Click)
			$btn_search.remove_Click($btn_search_Click)
			$btn_ImportCollections.remove_Click($btn_ImportCollections_Click)
			$radiodbtn_user.remove_CheckedChanged($radiodbtn_user_CheckedChanged)
			$radiodbtn_device.remove_CheckedChanged($radiodbtn_device_CheckedChanged)
			$checkbox0.remove_CheckedChanged($checkbox0_CheckedChanged)
			$datagridview1.remove_CellPainting($datagridview1_CellPainting)
			$datagridview1.remove_CurrentCellDirtyStateChanged($datagridview1_CurrentCellDirtyStateChanged)
			$datagridview1.remove_DataBindingComplete($datagridview1_DataBindingComplete)
			$btn_filter.remove_Click($btn_filter_Click)
			$btn_nofilter.remove_Click($btn_nofilter_Click)
			$enablescheduleToolStripMenuItem.remove_Click($enablescheduleToolStripMenuItem_Click)
			$disablescheduleToolStripMenuItem.remove_Click($disablescheduleToolStripMenuItem_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$splitcontainer1.SuspendLayout()
	$grpbx_SiteServer.SuspendLayout()
	$grpbx_SiteCode.SuspendLayout()
	$contextmenu.SuspendLayout()
	$contextmenutree.SuspendLayout()
	$groupbox1.SuspendLayout()
	$panel101.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($splitcontainer1)
	$MainForm.Controls.Add($btn_stop)
	$MainForm.Controls.Add($btn_start)
	$MainForm.Controls.Add($progressbaroverlay1)
	$MainForm.Controls.Add($grpbx_SiteServer)
	$MainForm.Controls.Add($grpbx_SiteCode)
	$MainForm.Controls.Add($Log)
	$MainForm.AcceptButton = $btn_Connect
	$MainForm.BackColor = 'White'
	$MainForm.ClientSize = '1214, 790'
	$MainForm.Name = 'MainForm'
	$MainForm.Text = 'Collection Refresh Manager 1.0'
	$MainForm.add_Load($MainForm_Load)
	#
	# splitcontainer1
	#
	$splitcontainer1.Anchor = 'Top, Bottom, Left, Right'
	$splitcontainer1.Location = '12, 88'
	$splitcontainer1.Name = 'splitcontainer1'
	[void]$splitcontainer1.Panel1.Controls.Add($groupbox1)
	[void]$splitcontainer1.Panel2.Controls.Add($btn_nofilter)
	[void]$splitcontainer1.Panel2.Controls.Add($btn_filter)
	[void]$splitcontainer1.Panel2.Controls.Add($txtbox_Filter)
	[void]$splitcontainer1.Panel2.Controls.Add($panel101)
	$splitcontainer1.Size = '1191, 488'
	$splitcontainer1.SplitterDistance = 297
	$splitcontainer1.TabIndex = 19
	#
	# btn_stop
	#
	$btn_stop.Anchor = 'Top, Right'
	$btn_stop.BackColor = 'PaleVioletRed'
	$btn_stop.Location = '927, 33'
	$btn_stop.Name = 'btn_stop'
	$btn_stop.Size = '119, 36'
	$btn_stop.TabIndex = 16
	$btn_stop.Text = 'Stop'
	$btn_stop.UseVisualStyleBackColor = $False
	$btn_stop.add_Click($btn_stop_Click)
	#
	# btn_start
	#
	$btn_start.Anchor = 'Top, Right'
	$btn_start.BackColor = 'SpringGreen'
	$btn_start.Location = '802, 33'
	$btn_start.Name = 'btn_start'
	$btn_start.Size = '119, 36'
	$btn_start.TabIndex = 15
	$btn_start.Text = 'Start'
	$btn_start.UseVisualStyleBackColor = $False
	$btn_start.add_Click($btn_start_Click)
	#
	# progressbaroverlay1
	#
	$progressbaroverlay1.Anchor = 'Bottom, Left, Right'
	$progressbaroverlay1.Location = '12, 582'
	$progressbaroverlay1.Name = 'progressbaroverlay1'
	$progressbaroverlay1.Size = '1191, 29'
	$progressbaroverlay1.TabIndex = 10
	$progressbaroverlay1.Visible = $False
	#
	# grpbx_SiteServer
	#
	$grpbx_SiteServer.Controls.Add($btn_Connect)
	$grpbx_SiteServer.Controls.Add($txtbox_SiteServer)
	$grpbx_SiteServer.Location = '12, 12'
	$grpbx_SiteServer.Name = 'grpbx_SiteServer'
	$grpbx_SiteServer.Size = '361, 61'
	$grpbx_SiteServer.TabIndex = 6
	$grpbx_SiteServer.TabStop = $False
	$grpbx_SiteServer.Text = 'SiteServer'
	#
	# btn_Connect
	#
	$btn_Connect.Location = '275, 21'
	$btn_Connect.Name = 'btn_Connect'
	$btn_Connect.Size = '80, 27'
	$btn_Connect.TabIndex = 1
	$btn_Connect.Text = 'Connect'
	$btn_Connect.UseVisualStyleBackColor = $True
	$btn_Connect.add_Click($btn_Connect_Click)
	#
	# txtbox_SiteServer
	#
	$txtbox_SiteServer.CharacterCasing = 'Upper'
	$txtbox_SiteServer.Location = '11, 25'
	$txtbox_SiteServer.Name = 'txtbox_SiteServer'
	$txtbox_SiteServer.Size = '254, 20'
	$txtbox_SiteServer.TabIndex = 0
	#
	# grpbx_SiteCode
	#
	$grpbx_SiteCode.Controls.Add($txtbox_SiteCode)
	$grpbx_SiteCode.Anchor = 'Top, Right'
	$grpbx_SiteCode.Location = '1052, 12'
	$grpbx_SiteCode.Name = 'grpbx_SiteCode'
	$grpbx_SiteCode.Size = '158, 71'
	$grpbx_SiteCode.TabIndex = 5
	$grpbx_SiteCode.TabStop = $False
	$grpbx_SiteCode.Text = 'Site Code'
	#
	# txtbox_SiteCode
	#
	$txtbox_SiteCode.BackColor = 'White'
	$txtbox_SiteCode.Location = '32, 30'
	$txtbox_SiteCode.Name = 'txtbox_SiteCode'
	$txtbox_SiteCode.ReadOnly = $True
	$txtbox_SiteCode.Size = '108, 20'
	$txtbox_SiteCode.TabIndex = 0
	$txtbox_SiteCode.add_TextChanged($txtbox_SiteCode_TextChanged)
	#
	# Log
	#
	$Log.Anchor = 'Bottom, Left, Right'
	$Log.BackColor = 'White'
	$Log.Location = '12, 617'
	$Log.Name = 'Log'
	$Log.ReadOnly = $True
	$Log.Size = '1190, 161'
	$Log.TabIndex = 2
	$Log.Text = ''
	#
	# radiodbtn_user
	#
	$radiodbtn_user.Location = '127, 19'
	$radiodbtn_user.Name = 'radiodbtn_user'
	$radiodbtn_user.Size = '62, 24'
	$radiodbtn_user.TabIndex = 1
	$radiodbtn_user.Text = 'User'
	$radiodbtn_user.UseVisualStyleBackColor = $True
	$radiodbtn_user.add_CheckedChanged($radiodbtn_user_CheckedChanged)
	#
	# radiodbtn_device
	#
	$radiodbtn_device.Checked = $True
	$radiodbtn_device.Location = '50, 19'
	$radiodbtn_device.Name = 'radiodbtn_device'
	$radiodbtn_device.Size = '71, 24'
	$radiodbtn_device.TabIndex = 0
	$radiodbtn_device.TabStop = $True
	$radiodbtn_device.Text = 'Device'
	$radiodbtn_device.UseVisualStyleBackColor = $True
	$radiodbtn_device.add_CheckedChanged($radiodbtn_device_CheckedChanged)
	#
	# contextmenu
	#
	[void]$contextmenu.Items.Add($SelectDeselect)
	[void]$contextmenu.Items.Add($addRemoveIncrementalUpdatesToolStripMenuItem)
	[void]$contextmenu.Items.Add($scheduleAFullUpdateOnThisCollectionToolStripMenuItem)
	[void]$contextmenu.Items.Add($SetRefreshScheduleToolStripMenuItem)
	$contextmenu.Name = 'contextmenu'
	$contextmenu.Size = '296, 70'
	$contextmenu.add_Opening($contextmenu_Opening)
	#
	# SelectDeselect
	#
	[void]$SelectDeselect.DropDownItems.Add($selectToolStripMenuItem)
	[void]$SelectDeselect.DropDownItems.Add($deselectToolStripMenuItem)
	$SelectDeselect.Name = 'SelectDeselect'
	$SelectDeselect.Size = '295, 22'
	$SelectDeselect.Text = 'Select \ Deselect Highlighted'
	#
	# selectToolStripMenuItem
	#
	$selectToolStripMenuItem.Name = 'selectToolStripMenuItem'
	$selectToolStripMenuItem.Size = '105, 22'
	$selectToolStripMenuItem.Text = 'Select'
	$selectToolStripMenuItem.add_Click($selectToolStripMenuItem_Click)
	#
	# deselectToolStripMenuItem
	#
	$deselectToolStripMenuItem.Name = 'deselectToolStripMenuItem'
	$deselectToolStripMenuItem.Size = '152, 22'
	$deselectToolStripMenuItem.Text = 'Deselect'
	$deselectToolStripMenuItem.add_Click($deselectToolStripMenuItem_Click)
	#
	# addRemoveIncrementalUpdatesToolStripMenuItem
	#
	[void]$addRemoveIncrementalUpdatesToolStripMenuItem.DropDownItems.Add($addIncrementalUpdatesToolStripMenuItem)
	[void]$addRemoveIncrementalUpdatesToolStripMenuItem.DropDownItems.Add($removeIncrementalUpdatesToolStripMenuItem)
	$addRemoveIncrementalUpdatesToolStripMenuItem.Name = 'addRemoveIncrementalUpdatesToolStripMenuItem'
	$addRemoveIncrementalUpdatesToolStripMenuItem.Size = '295, 22'
	$addRemoveIncrementalUpdatesToolStripMenuItem.Text = 'Add \ Remove Incremental Updates'
	#
	# addIncrementalUpdatesToolStripMenuItem
	#
	$addIncrementalUpdatesToolStripMenuItem.Name = 'addIncrementalUpdatesToolStripMenuItem'
	$addIncrementalUpdatesToolStripMenuItem.Size = '96, 22'
	$addIncrementalUpdatesToolStripMenuItem.Text = 'Add'
	$addIncrementalUpdatesToolStripMenuItem.add_Click($addIncrementalUpdatesToolStripMenuItem_Click)
	#
	# removeIncrementalUpdatesToolStripMenuItem
	#
	$removeIncrementalUpdatesToolStripMenuItem.Name = 'removeIncrementalUpdatesToolStripMenuItem'
	$removeIncrementalUpdatesToolStripMenuItem.Size = '152, 22'
	$removeIncrementalUpdatesToolStripMenuItem.Text = 'Remove'
	$removeIncrementalUpdatesToolStripMenuItem.add_Click($removeIncrementalUpdatesToolStripMenuItem_Click)
	#
	# contextmenutree
	#
	[void]$contextmenutree.Items.Add($SelectAllNodes)
	[void]$contextmenutree.Items.Add($DeSelectAllNodes)
	$contextmenutree.Name = 'contextmenustrip1'
	$contextmenutree.Size = '116, 26'
	$contextmenutree.add_Opening($contextmenutree_Opening)
	#
	# SelectAllNodes
	#
	$SelectAllNodes.Name = 'SelectAllNodes'
	$SelectAllNodes.ShowShortcutKeys = $False
	$SelectAllNodes.Size = '115, 22'
	$SelectAllNodes.Text = 'Select All'
	$SelectAllNodes.add_Click($SelectAllNodes_Click)
	#
	# DeSelectAllNodes
	#
	$DeSelectAllNodes.Name = 'DeSelectAllNodes'
	$DeSelectAllNodes.ShowShortcutKeys = $False
	$DeSelectAllNodes.Size = '128, 22'
	$DeSelectAllNodes.Text = 'Deselect All'
	$DeSelectAllNodes.add_Click($DeSelectAllNodes_Click)
	#
	# SetRefreshScheduleToolStripMenuItem
	#
	$SetRefreshScheduleToolStripMenuItem.Name = 'SetRefreshScheduleToolStripMenuItem'
	$SetRefreshScheduleToolStripMenuItem.Size = '295, 22'
	$SetRefreshScheduleToolStripMenuItem.Text = 'Set Refresh Schedule'
	$SetRefreshScheduleToolStripMenuItem.add_Click($SetRefreshScheduleToolStripMenuItem_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($btn_search)
	$groupbox1.Controls.Add($treeview)
	$groupbox1.Controls.Add($btn_ImportCollections)
	$groupbox1.Controls.Add($radiodbtn_user)
	$groupbox1.Controls.Add($radiodbtn_device)
	$groupbox1.Anchor = 'Top, Bottom, Left, Right'
	$groupbox1.Location = '0, 0'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '297, 488'
	$groupbox1.TabIndex = 13
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Collection Folder Structure'
	#
	# btn_search
	#
	$btn_search.Enabled = $False
	$btn_search.Location = '186, 19'
	$btn_search.Name = 'btn_search'
	$btn_search.Size = '70, 23'
	$btn_search.TabIndex = 2
	$btn_search.Text = 'Search'
	$btn_search.UseVisualStyleBackColor = $True
	$btn_search.add_Click($btn_search_Click)
	#
	# treeview
	#
	$treeview.Anchor = 'Top, Bottom, Left, Right'
	$treeview.ContextMenuStrip = $contextmenutree
	$treeview.Location = '3, 49'
	$treeview.Name = 'treeview'
	$treeview.Size = '291, 409'
	$treeview.TabIndex = 0
	#
	# btn_ImportCollections
	#
	$btn_ImportCollections.Dock = 'Bottom'
	$btn_ImportCollections.Location = '3, 458'
	$btn_ImportCollections.Name = 'btn_ImportCollections'
	$btn_ImportCollections.Size = '291, 27'
	$btn_ImportCollections.TabIndex = 1
	$btn_ImportCollections.Text = 'Import Collections'
	$btn_ImportCollections.UseVisualStyleBackColor = $True
	$btn_ImportCollections.add_Click($btn_ImportCollections_Click)
	#
	# radiodbtn_user
	#
	$radiodbtn_user.Location = '127, 19'
	$radiodbtn_user.Name = 'radiodbtn_user'
	$radiodbtn_user.Size = '62, 24'
	$radiodbtn_user.TabIndex = 1
	$radiodbtn_user.Text = 'User'
	$radiodbtn_user.UseVisualStyleBackColor = $True
	$radiodbtn_user.add_CheckedChanged($radiodbtn_user_CheckedChanged)
	#
	# radiodbtn_device
	#
	$radiodbtn_device.Checked = $True
	$radiodbtn_device.Location = '50, 19'
	$radiodbtn_device.Name = 'radiodbtn_device'
	$radiodbtn_device.Size = '71, 24'
	$radiodbtn_device.TabIndex = 0
	$radiodbtn_device.TabStop = $True
	$radiodbtn_device.Text = 'Device'
	$radiodbtn_device.UseVisualStyleBackColor = $True
	$radiodbtn_device.add_CheckedChanged($radiodbtn_device_CheckedChanged)
	#
	# panel101
	#
	$panel101.Controls.Add($checkbox0)
	$panel101.Controls.Add($datagridview1)
	$panel101.Anchor = 'Top, Bottom, Left, Right'
	$panel101.Location = '0, 36'
	$panel101.Name = 'panel101'
	$panel101.Size = '890, 452'
	$panel101.TabIndex = 1
	#
	# checkbox0
	#
	$checkbox0.BackColor = 'Transparent'
	$checkbox0.CheckAlign = 'MiddleCenter'
	$checkbox0.Location = '44, 3'
	$checkbox0.Name = 'checkbox0'
	$checkbox0.Size = '18, 18'
	$checkbox0.TabIndex = 14
	$checkbox0.TextAlign = 'MiddleCenter'
	$checkbox0.UseVisualStyleBackColor = $False
	$checkbox0.Visible = $False
	$checkbox0.add_CheckedChanged($checkbox0_CheckedChanged)
	#
	# datagridview1
	#
	$datagridview1.AllowUserToAddRows = $False
	$datagridview1.AllowUserToDeleteRows = $False
	$datagridview1.Anchor = 'Top, Bottom, Left, Right'
	$datagridview1.AutoSizeColumnsMode = 'Fill'
	$datagridview1.AutoSizeRowsMode = 'DisplayedCells'
	$datagridview1.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview1.ContextMenuStrip = $contextmenu
	$datagridview1.Location = '0, 0'
	$datagridview1.Name = 'datagridview1'
	$datagridview1.RowHeadersVisible = $False
	$datagridview1.SelectionMode = 'FullRowSelect'
	$datagridview1.Size = '890, 452'
	$datagridview1.TabIndex = 12
	$datagridview1.add_CellPainting($datagridview1_CellPainting)
	$datagridview1.add_CurrentCellDirtyStateChanged($datagridview1_CurrentCellDirtyStateChanged)
	$datagridview1.add_DataBindingComplete($datagridview1_DataBindingComplete)
	#
	# txtbox_Filter
	#
	$txtbox_Filter.Location = '3, 3'
	$txtbox_Filter.Name = 'txtbox_Filter'
	$txtbox_Filter.Size = '240, 20'
	$txtbox_Filter.TabIndex = 8
	#
	# btn_filter
	#
	$btn_filter.Location = '249, 3'
	$btn_filter.Name = 'btn_filter'
	$btn_filter.Size = '80, 27'
	$btn_filter.TabIndex = 9
	$btn_filter.Text = 'Filter'
	$btn_filter.UseVisualStyleBackColor = $True
	$btn_filter.add_Click($btn_filter_Click)
	#
	# btn_nofilter
	#
	$btn_nofilter.Location = '335, 3'
	$btn_nofilter.Name = 'btn_nofilter'
	$btn_nofilter.Size = '80, 27'
	$btn_nofilter.TabIndex = 10
	$btn_nofilter.Text = 'CLR Filter'
	$btn_nofilter.UseVisualStyleBackColor = $True
	$btn_nofilter.add_Click($btn_nofilter_Click)
	#
	# scheduleAFullUpdateOnThisCollectionToolStripMenuItem
	#
	[void]$scheduleAFullUpdateOnThisCollectionToolStripMenuItem.DropDownItems.Add($enablescheduleToolStripMenuItem)
	[void]$scheduleAFullUpdateOnThisCollectionToolStripMenuItem.DropDownItems.Add($disablescheduleToolStripMenuItem)
	$scheduleAFullUpdateOnThisCollectionToolStripMenuItem.Name = 'scheduleAFullUpdateOnThisCollectionToolStripMenuItem'
	$scheduleAFullUpdateOnThisCollectionToolStripMenuItem.Size = '295, 22'
	$scheduleAFullUpdateOnThisCollectionToolStripMenuItem.Text = 'Schedule a Full Update On This Collection'
	#
	# enablescheduleToolStripMenuItem
	#
	$enablescheduleToolStripMenuItem.Name = 'enablescheduleToolStripMenuItem'
	$enablescheduleToolStripMenuItem.Size = '109, 22'
	$enablescheduleToolStripMenuItem.Text = 'Enable'
	$enablescheduleToolStripMenuItem.add_Click($enablescheduleToolStripMenuItem_Click)
	#
	# disablescheduleToolStripMenuItem
	#
	$disablescheduleToolStripMenuItem.Name = 'disablescheduleToolStripMenuItem'
	$disablescheduleToolStripMenuItem.Size = '152, 22'
	$disablescheduleToolStripMenuItem.Text = 'Disable'
	$disablescheduleToolStripMenuItem.add_Click($disablescheduleToolStripMenuItem_Click)
	$panel101.ResumeLayout()
	$groupbox1.ResumeLayout()
	$contextmenutree.ResumeLayout()
	$contextmenu.ResumeLayout()
	$grpbx_SiteCode.ResumeLayout()
	$grpbx_SiteServer.ResumeLayout()
	$splitcontainer1.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#Start the application
Main ($CommandLine)
