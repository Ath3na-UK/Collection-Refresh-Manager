<File version="2">
  <FileID>10ad29ff-249e-4248-9235-9620b8477263</FileID>
  <LastExport>131592797625541339</LastExport>
  <Preview>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
GxQARJ4LI/rRJvVC6PoLRERceKpHWqe/dYOvWCIVABYrCgDBV5Z09H6vVADQ1/buliAA5Ofl+VMR
+hVFne5ARMSFp05L69Tx559/7j+7AwgA8J2JDQC6W5yusdBPKCMi4sJTXf8q/vMSAFybsIghACAi
Rsd5CwAjFyZsbPyivy1pd08vLiK7unv9T/+Oub+xIAAgIi585y0AXJi4ZO2dPdbW1mFDwyO4mBwa
sfqGJjt7ftj/rQkAiIgL33kLAOMuAHR29dqwKxiw+Oju6bGz56Z/UZAAgIi48J33ADA4ePc/OwsL
j86ubgIAImKEJABAKBAAEBGjJQEAQoEAgIgYLQkAEAoEAETEaEkAgFAgACAiRksCAIQCAQARMVoS
ACAUCACIiNGSAAChQABARIyWBAAIBQIAImK0JABAKBAAEBGjJQEAQoEAgIgYLQkAEAoEAETEaEkA
gFAgACAiRksCAIQCAQARMVoSACAUCACIiNGSAAChQABARIyWBAAIBQIAImK0JABAKBAAEBGjJQEA
QoEAgIgYLQkAEAoEAETEaEkAgFAgACAiRksCAIQCAQARMVoSACAUCACIiNGSAAChQABARIyWBAAI
BQIAImK0JABAKBAAEBGjJQEAQoEAgIgYLQkAEAoEAETEaEkAgFAgACAiRksCAIQCAQARMVoSACAU
CACIiNGSAAChQABARIyWBAAIBQIAImK0JABAKBAAEBGjJQEAQoEAgIgYLQkAEAoEAETEaEkAgFAg
ACAiRksCAIQCAQARMVoSACAUCACIiNGSAAChQABARIyWBAAIBQIAImK0JABAKBAAEBGjJQEAQoEA
gIgYLQkAEAoEAETEaEkAgFAgACAiRksCAIQCAQARMVoSACAUCACIiNGSAAChQABARIyWBAAIBQIA
ImK0JABAKBAAEBGjJQEAQoEAgIgYLQkAEAoEAETEaEkAgFAgACAiRksCAIQCAQARMVoSACAUCACI
iNGSAAChQABARIyWBAAIBQIAImK0JABAKBAAEBGjJQEAQoEAgIgYLQkAEAoEAETEaEkAgFAgACAi
RksCAIQCAQARMVoSACAUCACIiNGSAAChQABARIyWBAAIBQIAImK0JABAKBAAEBGjJQEAQoEAgIgY
LQkAEAoEAETEaEkAgFAgACAiRksCAIQCAQARMVoSACAUCACIiNGSAAChQABARIyWBAAIBQIAImK0
JABAKBAAEBGjJQEAQoEAgIgYLQkAEAoEAETEaEkAgFAgACAiRksCAIQCAQARMVoSACAUCACIiNGS
AAChQABARIyWBAAIBQIAImK0JABAKBAAEBGjJQEAQoEAgIgYLQkAEAoEAETEaEkAgFAgACAiRksC
AIQCAQARMVoSACAUCACIiNGSAAChQABARIyWBAAIBQIAImK0JABAKBAAEBGjJQEAQoEAgIgYLQkA
EAoEAETEaEkAgFAgACAiRksCAIQCAQARMVoSACAUCACIiNGSAAChQABARIyWBAAIBQIAImK0JABA
KBAAEBGjJQEAQoEAgIgYLQkAEAoEAETEaEkAgFAgACAiRksCAIQCAQARMVoSACAUCACIiNGSAACh
QABARIyWBAAIBQIAImK0JABAKBAAEBGjJQEAQoEAgIgYLQkAEAoEAETEaEkAgFAgACAiRksCAIQC
AQARMVoSACAUCACIiNGSAAChQABARIyWBAAIBQIAImK0JABAKBAAEBGjJQEAQoEAgIgYLQkAEAoE
AETEaEkAgFAgACAiRksCAIQCAQARMVoSACAUCACIiNGSAAChQABARIyWBAAIBQIAImK0JABAKBAA
EBGjJQEAQoEAgIgYLQkAEAoEAETEaEkAgFAgACAiRksCAIQCAQARMVoSACAUCACIiNGSAAChQABA
RIyWBAAIBQIAImK0JABAKBAAEBGjJQEAQoEAgIgYLQkAEAoEAETEaEkAgFAgACAiRksCAIQCAQAR
MVoSACAUCACIiNGSAAChQABARIyWBAAIBQIAImK0JABAKBAAEBGjJQEAQoEAgIgYLQkAEAoEAETE
aEkAgFAgACAiRksCAIQCAQARMVoSACAUCACIiNGSAAChQABARIyWBAAIBQIAImK0JABAKBAAEBGj
JQEAQoEAgIgYLQkAEAoEAETEaEkAgFAgACAiRksCAIQCAQARMVoSACAUCACIiNGSAAChQABARIyW
BAAIBQIAImK0JABAKBAAEBGjJQEAQoEAgIgYLQkAEAoEAETEaEkAgFAgACAiRksCAIQCAQARMVoS
ACAUCACIiNGSAAChQABARIyWBAAIBQIAImK0JABAKBAAEBGjJQEAQoEAgIgYLec9AIyOjM6MgcVE
d0+vnR0gACAiRsV5DwCtrR02NDRig4PDuGgcsfqGJhtwjwUBABFx4TtvAWB4/KJdmpqy0tJyO3zk
qKWkpNoJjLzHT6TYkaPHrKur2yamLvu/NQEAEXHhO28BYGR8wi5cvGipqanW29tr/f391tfXhxH3
7NmzVl1d7Yv+5WvTf2sCACLiwnf+AsCFCRsaHrGCggKbmpqysbGxBe3k5GTc8bdydHTULly4YNeu
XbNLly755/KiCz3a3/Hx8bjLTUxM3HJaFNS2nz9/3s64v+ulK9MJgACAiLjwndcAMDwyanl5ub5Q
Dg0NLWgbGxtteHjYFzkV8pGREV/sNAzG63FQCPVYR8RHjx61kpISP6+Kf1dXl5WXl9vAwMD1/Q7a
1PTm5mbfG6JpajdYV/B4cHDwpm1bSGo71aNDAEBEjJbzHgByc3N9AdRR40JVRfezzz6z1tZWHwTa
2tr8uIqKCuvp6fGP1e2tQp2VlWU7duxwL9hVW79+ve3cudMOHDjg5+vo6LBTp07Zr3/9a6utrbX2
9nZ/xN/Q0ODb3LZtm505c8a6u7t9eyqmWqeWVWDQPBoXbxsXinottL0EAETEaDmvAWBkdMyys7P9
EW9nZ+eCVUftekGWL19uTz/9tL3//vv2wQcf2GuvvWZr1qyx1atX+4Dwzjvv2EsvvWSvv/66P+L/
6KOPfNHW6YN169bZJ5984pd98skn7c0337SHHnrIVq5c6ZdVUHj++edt2bJl9umnn/px7733nj33
3HO2du1avx5N07bIeNu5UGxpafEBYIoAgIgYGec9AGRlZfqj3Lq6Oquvr1+Q6ghdBX/JkiW+qC9d
utR+8Ytf2K5du+zDDz+0J554whe3n//857ZixQpfrHU0rAKuUwDHjx/3YeHQoUP2wAMP2KOPPuqX
//jjj/2yCgfqOdA63n33Xfvd737nl/vZz35me/fu9YVf0zS/eg7UCxFvOxeKNTU1BABExIg57wEg
MzPTn/dW0VBxW6iqeB85csQOHjzov7mg4v6b3/zGF7Vjx475o3Z19Z8+fdoOHz7sC2F6eroPCNu3
b78+j6Zt2rTJD3X0rx4Q9SBs3rzZnx7QvPv37/fzaqhgoACh8Rs2bPBBScbbxoWiTl8QABARo+V9
CQAqlrowTufUF6raxqCXoqmpyfLz8/31C+ru1niNU0+BCqCeaxk9VrgJltU8wfIaaprmiV1WQxmM
UzDSsnqsI//Z27XQ1N9REgAQEaPlvAaA0bFxO3HiuC9sVVVV/sgxCmpbgzAQpe2eL/Wth+ysLO4D
gIgYIectAAyNXbArV69acVGRpaWlWlZmpmVmZmDE1d9Rpyw6Ozrs0pWr/m+tAKALIzVepzUQEXHh
qYM0XcO2atUq/9kdEHoAmJy67EOAfhPg/MgYLhaHR23Y/12n/FDoOgZ99VEXSOqbEIiIuPDUhe4v
vPCCv3YtltADgLjsjhAvuSAwdfkKLjL1d9VdEIVuD6wLH3Wfg61btyIi4gJUn9FbtmyxoqIi/9kd
cE8CAAAAACxs7kkA0F3tdOc4REREvP+qLs8m9ACg28Xqq2667W1wdztERES8P6oeqy6rPscSegDQ
99q1wtgfkUFERMT5N6jFqsuqz7GEHgB00xvdTKe0tNQqKyv9DW8QERFx/lUdVj1WXVZ9jiX0AKAb
xuh74br9bU5OjhUUFCAiIuJ9UHVY9Vh1WfU5lnsSAFJSUvz98nVLXf0MLiIiIs6/qsOqx6rLBABE
RMQEkQCAiIiYgBIAEBERE1ACACIiYgI6rwFAP6MbBIC8vDwrLCxERETE+6DqcBAAVJ9jCT0A6Dfj
09LS/NcP9N1DrRARERHnX9Vh1WPVZdXnWEIPAPqFuOzsbH/TAXU/xEskiIiIeO9VHVY9Vl1WfY4l
9AAAAAAACx8CAAAAQAISegDQVYYbNmywHTt22M6dOxEREfE+unnzZv+bALMJPQDoQgPdc1jnGhAR
EfH+2t/fb4ODgzNV+gahBwD96EBRUdHMMwAAALjfXLhwYebRDe5JANBXDgAAAGBhMD7uCvcsCAAA
AACLHAIAAABAAkIAAAAASEAIAAAAAAkIAQAAACABIQAAAAAkIAQAAACABIQAAAAAkIAQAAAAABIQ
AgAAAEACQgAAAABIQAgAAAAACQgBAAAAIAEhAAAAACQgBAAAAIAEhAAAAACQgBAAAAAAEhACAAAA
QAJCAAAAAEhACAAAAAAJCAEAAAAgASEAAAAAJCAEAAAAgASEAAAAAJCAEAAAAAASEAIAAABAAkIA
AAAASEAIAAAAAAkIAQAAACABIQAAAAAkIAQAAACABIQAAAAAkIAQAAAAABIQAgAAAEACQgAAAABI
QAgAAAAACQgBAAAAIAEhAAAAACQgBAAAAIAEhAAAAACQgBAAAAAAEhACAAAAQAJCAAAAAEhACAAA
AAAJCAEAAAAgASEAAAAAJCAEAAAAgASEAAAAAJCAEAAAAAASEAIAAABAAkIAAAAASEAIAAAAAAkI
AQAAACABIQAAAAAkIAQAAACABIQAAAAAkIAQAAAAABIQAgAAAEACQgAAAABIQAgAAAAACci8BICU
lBTLycmZeQYAAAD3m7GxsZlHNwg9ADQ1NVlbW5tPG4iIiHh/VfHXcDahBwAAAABY+BAAAAAAEhAC
AAAAQAJCAAAAAEhArl27iwDQOzTpEwQiIiJGy8tXrn6/AFDbNWp13aN+YURERIyequVNZ+cYAJav
WJU8eNn8AlLJAREREaOn6nj7sFllY/edA8Cbb797qqnrrE8LiIiIGG1V/LPzS+8cAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABY7SUn/
Hx0EGHHthnIQAAAAAElFTkSuQmCC</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="MainForm" children="Controls">
    <Property name="AcceptButton">
      <Reference name="btn_Connect" />
    </Property>
    <Property name="BackColor">White</Property>
    <Property name="ClientSize">1214, 790</Property>
    <Property name="Name">MainForm</Property>
    <Property name="Text">Collection Refresh Manager 1.0</Property>
    <Event name="Load">MainForm_Load</Event>
    <Object type="System.Windows.Forms.SplitContainer, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="splitcontainer1" children="Controls">
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="Location">12, 88</Property>
      <Property name="Name">splitcontainer1</Property>
      <Property name="Panel1">
        <Property name="Controls">
          <Item type="System.Windows.Forms.GroupBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="groupbox1" />
          </Item>
        </Property>
      </Property>
      <Property name="Panel2">
        <Property name="Controls">
          <Item type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="btn_nofilter" />
          </Item>
          <Item type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="btn_filter" />
          </Item>
          <Item type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="txtbox_Filter" />
          </Item>
          <Item type="System.Windows.Forms.Panel, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="panel101" />
          </Item>
        </Property>
      </Property>
      <Property name="Size">1191, 488</Property>
      <Property name="SplitterDistance">297</Property>
      <Property name="TabIndex">19</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_stop" children="Controls">
      <Property name="Anchor">Top, Right</Property>
      <Property name="BackColor">PaleVioletRed</Property>
      <Property name="Location">927, 33</Property>
      <Property name="Name">btn_stop</Property>
      <Property name="Size">119, 36</Property>
      <Property name="TabIndex">16</Property>
      <Property name="Text">Stop</Property>
      <Property name="UseVisualStyleBackColor">False</Property>
      <Event name="Click">btn_stop_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_start" children="Controls">
      <Property name="Anchor">Top, Right</Property>
      <Property name="BackColor">SpringGreen</Property>
      <Property name="Location">802, 33</Property>
      <Property name="Name">btn_start</Property>
      <Property name="Size">119, 36</Property>
      <Property name="TabIndex">15</Property>
      <Property name="Text">Start</Property>
      <Property name="UseVisualStyleBackColor">False</Property>
      <Event name="Click">btn_start_Click</Event>
    </Object>
    <Object type="SAPIENTypes.ProgressBarOverlay, PowerShell Studio, Version=4.2.98.0, Culture=neutral, PublicKeyToken=null" name="progressbaroverlay1" children="Controls">
      <Property name="Anchor">Bottom, Left, Right</Property>
      <Property name="Location">12, 582</Property>
      <Property name="Name">progressbaroverlay1</Property>
      <Property name="Size">1191, 29</Property>
      <Property name="TabIndex">10</Property>
      <Property name="Visible">False</Property>
    </Object>
    <Object type="System.Windows.Forms.GroupBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="grpbx_SiteServer" children="Controls">
      <Property name="Location">12, 12</Property>
      <Property name="Name">grpbx_SiteServer</Property>
      <Property name="Size">361, 61</Property>
      <Property name="TabIndex">6</Property>
      <Property name="TabStop">False</Property>
      <Property name="Text">SiteServer</Property>
      <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_Connect" children="Controls">
        <Property name="Location">275, 21</Property>
        <Property name="Name">btn_Connect</Property>
        <Property name="Size">80, 27</Property>
        <Property name="TabIndex">1</Property>
        <Property name="Text">Connect</Property>
        <Property name="UseVisualStyleBackColor">True</Property>
        <Event name="Click">btn_Connect_Click</Event>
      </Object>
      <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="txtbox_SiteServer" children="Controls">
        <Property name="CharacterCasing">Upper</Property>
        <Property name="Location">11, 25</Property>
        <Property name="Name">txtbox_SiteServer</Property>
        <Property name="Size">254, 20</Property>
        <Property name="TabIndex">0</Property>
      </Object>
    </Object>
    <Object type="System.Windows.Forms.GroupBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="grpbx_SiteCode" children="Controls">
      <Property name="Anchor">Top, Right</Property>
      <Property name="Location">1052, 12</Property>
      <Property name="Name">grpbx_SiteCode</Property>
      <Property name="Size">158, 71</Property>
      <Property name="TabIndex">5</Property>
      <Property name="TabStop">False</Property>
      <Property name="Text">Site Code</Property>
      <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="txtbox_SiteCode" children="Controls">
        <Property name="BackColor">White</Property>
        <Property name="Location">32, 30</Property>
        <Property name="Name">txtbox_SiteCode</Property>
        <Property name="ReadOnly">True</Property>
        <Property name="Size">108, 20</Property>
        <Property name="TabIndex">0</Property>
        <Event name="TextChanged">txtbox_SiteCode_TextChanged</Event>
      </Object>
    </Object>
    <Object type="System.Windows.Forms.RichTextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Log" children="Controls">
      <Property name="Anchor">Bottom, Left, Right</Property>
      <Property name="BackColor">White</Property>
      <Property name="Location">12, 617</Property>
      <Property name="Name">Log</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="Size">1190, 161</Property>
      <Property name="TabIndex">2</Property>
      <Property name="Text">
      </Property>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.RadioButton, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="radiodbtn_user" children="Controls">
    <Property name="Location">127, 19</Property>
    <Property name="Name">radiodbtn_user</Property>
    <Property name="Size">62, 24</Property>
    <Property name="TabIndex">1</Property>
    <Property name="Text">User</Property>
    <Property name="UseVisualStyleBackColor">True</Property>
    <Event name="CheckedChanged">radiodbtn_user_CheckedChanged</Event>
  </Object>
  <Object type="System.Windows.Forms.RadioButton, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="radiodbtn_device" children="Controls">
    <Property name="Checked">True</Property>
    <Property name="Location">50, 19</Property>
    <Property name="Name">radiodbtn_device</Property>
    <Property name="Size">71, 24</Property>
    <Property name="TabIndex">0</Property>
    <Property name="TabStop">True</Property>
    <Property name="Text">Device</Property>
    <Property name="UseVisualStyleBackColor">True</Property>
    <Event name="CheckedChanged">radiodbtn_device_CheckedChanged</Event>
  </Object>
  <Object type="System.Windows.Forms.ContextMenuStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="contextmenu" children="Controls">
    <Property name="Items">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="SelectDeselect" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="addRemoveIncrementalUpdatesToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="scheduleAFullUpdateOnThisCollectionToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="SetRefreshScheduleToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">contextmenu</Property>
    <Property name="Size">296, 70</Property>
    <Event name="Opening">contextmenu_Opening</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="SelectDeselect">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="selectToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="deselectToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">SelectDeselect</Property>
    <Property name="Size">295, 22</Property>
    <Property name="Text">Select \ Deselect Highlighted</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="selectToolStripMenuItem">
    <Property name="Name">selectToolStripMenuItem</Property>
    <Property name="Size">105, 22</Property>
    <Property name="Text">Select</Property>
    <Event name="Click">selectToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="deselectToolStripMenuItem">
    <Property name="Name">deselectToolStripMenuItem</Property>
    <Property name="Size">152, 22</Property>
    <Property name="Text">Deselect</Property>
    <Event name="Click">deselectToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="addRemoveIncrementalUpdatesToolStripMenuItem">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="addIncrementalUpdatesToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="removeIncrementalUpdatesToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">addRemoveIncrementalUpdatesToolStripMenuItem</Property>
    <Property name="Size">295, 22</Property>
    <Property name="Text">Add \ Remove Incremental Updates</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="addIncrementalUpdatesToolStripMenuItem">
    <Property name="Name">addIncrementalUpdatesToolStripMenuItem</Property>
    <Property name="Size">96, 22</Property>
    <Property name="Text">Add</Property>
    <Event name="Click">addIncrementalUpdatesToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="removeIncrementalUpdatesToolStripMenuItem">
    <Property name="Name">removeIncrementalUpdatesToolStripMenuItem</Property>
    <Property name="Size">152, 22</Property>
    <Property name="Text">Remove</Property>
    <Event name="Click">removeIncrementalUpdatesToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ContextMenuStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="contextmenutree" children="Controls">
    <Property name="Items">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="SelectAllNodes" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="DeSelectAllNodes" />
      </Item>
    </Property>
    <Property name="Name">contextmenustrip1</Property>
    <Property name="Size">116, 26</Property>
    <Event name="Opening">contextmenutree_Opening</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="SelectAllNodes">
    <Property name="Name">SelectAllNodes</Property>
    <Property name="ShowShortcutKeys">False</Property>
    <Property name="Size">115, 22</Property>
    <Property name="Text">Select All</Property>
    <Event name="Click">SelectAllNodes_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="DeSelectAllNodes">
    <Property name="Name">DeSelectAllNodes</Property>
    <Property name="ShowShortcutKeys">False</Property>
    <Property name="Size">128, 22</Property>
    <Property name="Text">Deselect All</Property>
    <Event name="Click">DeSelectAllNodes_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="SetRefreshScheduleToolStripMenuItem">
    <Property name="Name">SetRefreshScheduleToolStripMenuItem</Property>
    <Property name="Size">295, 22</Property>
    <Property name="Text">Set Refresh Schedule</Property>
    <Event name="Click">SetRefreshScheduleToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.GroupBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="groupbox1" children="Controls">
    <Property name="Anchor">Top, Bottom, Left, Right</Property>
    <Property name="Location">0, 0</Property>
    <Property name="Name">groupbox1</Property>
    <Property name="Size">297, 488</Property>
    <Property name="TabIndex">13</Property>
    <Property name="TabStop">False</Property>
    <Property name="Text">Collection Folder Structure</Property>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_search" children="Controls">
      <Property name="Enabled">False</Property>
      <Property name="Location">186, 19</Property>
      <Property name="Name">btn_search</Property>
      <Property name="Size">70, 23</Property>
      <Property name="TabIndex">2</Property>
      <Property name="Text">Search</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">btn_search_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.TreeView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="treeview" children="Controls">
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="ContextMenuStrip">
        <Reference name="contextmenutree" />
      </Property>
      <Property name="Location">3, 49</Property>
      <Property name="Name">treeview</Property>
      <Property name="Size">291, 409</Property>
      <Property name="TabIndex">0</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_ImportCollections" children="Controls">
      <Property name="Dock">Bottom</Property>
      <Property name="Location">3, 458</Property>
      <Property name="Name">btn_ImportCollections</Property>
      <Property name="Size">291, 27</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">Import Collections</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">btn_ImportCollections_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.RadioButton, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="radiodbtn_user" reference="radiodbtn_user" />
    <Object type="System.Windows.Forms.RadioButton, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="radiodbtn_device" reference="radiodbtn_device" />
  </Object>
  <Object type="System.Windows.Forms.Panel, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="panel101" children="Controls">
    <Property name="Anchor">Top, Bottom, Left, Right</Property>
    <Property name="Location">0, 36</Property>
    <Property name="Name">panel101</Property>
    <Property name="Size">890, 452</Property>
    <Property name="TabIndex">1</Property>
    <Object type="System.Windows.Forms.CheckBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="checkbox0" children="Controls">
      <Property name="BackColor">Transparent</Property>
      <Property name="CheckAlign">MiddleCenter</Property>
      <Property name="Location">44, 3</Property>
      <Property name="Name">checkbox0</Property>
      <Property name="Size">18, 18</Property>
      <Property name="TabIndex">14</Property>
      <Property name="TextAlign">MiddleCenter</Property>
      <Property name="UseVisualStyleBackColor">False</Property>
      <Property name="Visible">False</Property>
      <Event name="CheckedChanged">checkbox0_CheckedChanged</Event>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridview1" children="Controls">
      <Property name="AllowUserToAddRows">False</Property>
      <Property name="AllowUserToDeleteRows">False</Property>
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="AutoSizeColumnsMode">Fill</Property>
      <Property name="AutoSizeRowsMode">DisplayedCells</Property>
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="ContextMenuStrip">
        <Reference name="contextmenu" />
      </Property>
      <Property name="Location">0, 0</Property>
      <Property name="Name">datagridview1</Property>
      <Property name="RowHeadersVisible">False</Property>
      <Property name="SelectionMode">FullRowSelect</Property>
      <Property name="Size">890, 452</Property>
      <Property name="TabIndex">12</Property>
      <Event name="CellPainting">datagridview1_CellPainting</Event>
      <Event name="CurrentCellDirtyStateChanged">datagridview1_CurrentCellDirtyStateChanged</Event>
      <Event name="DataBindingComplete">datagridview1_DataBindingComplete</Event>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="txtbox_Filter" children="Controls">
    <Property name="Location">3, 3</Property>
    <Property name="Name">txtbox_Filter</Property>
    <Property name="Size">240, 20</Property>
    <Property name="TabIndex">8</Property>
  </Object>
  <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_filter" children="Controls">
    <Property name="Location">249, 3</Property>
    <Property name="Name">btn_filter</Property>
    <Property name="Size">80, 27</Property>
    <Property name="TabIndex">9</Property>
    <Property name="Text">Filter</Property>
    <Property name="UseVisualStyleBackColor">True</Property>
    <Event name="Click">btn_filter_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_nofilter" children="Controls">
    <Property name="Location">335, 3</Property>
    <Property name="Name">btn_nofilter</Property>
    <Property name="Size">80, 27</Property>
    <Property name="TabIndex">10</Property>
    <Property name="Text">CLR Filter</Property>
    <Property name="UseVisualStyleBackColor">True</Property>
    <Event name="Click">btn_nofilter_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="scheduleAFullUpdateOnThisCollectionToolStripMenuItem">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="enablescheduleToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="disablescheduleToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">scheduleAFullUpdateOnThisCollectionToolStripMenuItem</Property>
    <Property name="Size">295, 22</Property>
    <Property name="Text">Schedule a Full Update On This Collection</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="enablescheduleToolStripMenuItem">
    <Property name="Name">enablescheduleToolStripMenuItem</Property>
    <Property name="Size">109, 22</Property>
    <Property name="Text">Enable</Property>
    <Event name="Click">enablescheduleToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="disablescheduleToolStripMenuItem">
    <Property name="Name">disablescheduleToolStripMenuItem</Property>
    <Property name="Size">152, 22</Property>
    <Property name="Text">Disable</Property>
    <Event name="Click">disablescheduleToolStripMenuItem_Click</Event>
  </Object>
  <Code><![CDATA[

$MainForm_Load={
	#TODO: Initialize Form Controls here
	$script:RKCMCollectionType = 'Device'
}

function Get-CMSiteConnection
{
	[CmdletBinding()]
	param (
		[parameter(Mandatory = $true)]
		[ValidateNotNullOrEmpty()]
		[string]$SiteServer
	)
	# Determine Site Code
	try
	{
		$SiteCodeObjects = Get-WmiObject -Namespace "root\SMS" -Class SMS_ProviderLocation -ComputerName $SiteServer -ErrorAction Stop
		foreach ($SiteCodeObject in $SiteCodeObjects)
		{
			if ($SiteCodeObject.ProviderForLocalSite -eq $true)
			{
				$SiteCode = $SiteCodeObject.SiteCode
				$txtbox_SiteCode.Text = $SiteCode
				Append-RichtextboxStatus -Component 'Get SiteCode' -Message "Found Site Code $SiteCode"
				$txtbox_SiteServer.ReadOnly = $true
				$btn_search.Enabled = $true
			}
		}
	}
	catch [System.UnauthorizedAccessException] {
		Display-MsgBox -Title "Error" -Message "Access denied, please check if you have access rights to your siteserver" -ButtonSetup 0
		Append-RichtextboxStatus -Component $component -Message "Access denied" -MessageColor 'red'; return
	}
	catch [System.Exception] {
		Display-MsgBox -Title "Error" -Message "Unable to determine Site Code" -ButtonSetup 0
		Append-RichtextboxStatus -Component $component -Message "Unable to determine Site Code" -MessageColor 'red'; return
	}
	# import ConfigurationManager Module
	try
	{
		$CMModulePath = Join-Path -Path (Split-Path -Path "${Env:SMS_ADMIN_UI_PATH}" -ErrorAction Stop) -ChildPath "ConfigurationManager.psd1"
		Import-Module $CMModulePath -ErrorAction Stop
		Set-Location -Path "$Sitecode`:"
		Append-RichtextboxStatus -Component 'Get SiteCode' -Message "Successfully set location to Configuration Manager drive."
	}
	catch [System.Exception] {
		Display-MsgBox -Title "Error" -Message "Unable to load ConfigurationManager Module, please install Admin Console" -ButtonSetup 0
		Append-RichtextboxStatus -Component $component -Message "Unable to load ConfigurationManager Module, please install Admin Console" -MessageColor 'red'; return
	}
	
	$Global:SiteCode = $SiteCode
	$global:SiteServer = $SiteServer
	return $SiteCode
	return $SiteServer
}
function Get-IncrementalStatus
{
    <#
	    .SYNOPSIS
	    Looks at the refreshtype value and returns if incremental updates or enabled or disabled.
	    .DESCRIPTION
	    Looks at the refreshtype value and returns if incremental updates or enabled or disabled.
	    .EXAMPLE
	    Get-IncrementalStatus -RefreshType $RefreshType
	    .EXAMPLE
        Get-IncrementalStatus $RefreshType
        .Notes
        Possible Enumeration Values: 
        MANUAL(1)
        PERIODIC(2)
        CONSTANT_UPDATE(4)
        BOTH(6)
	    #>
	
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[int][ValidateNotNullOrEmpty()]
		$RefreshType
	)
	switch ($RefreshType)
	{
		"1" { $RefreshStatus = $false }
		"2" { $RefreshStatus = $false }
		"4" { $RefreshStatus = $true }
		"6" { $RefreshStatus = $true }
	}
	return [bool]$RefreshStatus
}
function Get-CheckedNodes 
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNodes $treeview.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param(
	[ValidateNotNull()]
	[System.Windows.Forms.TreeNodeCollection] $NodeCollection,
	[ValidateNotNull()]
	[System.Collections.ArrayList]$CheckedNodes)
	
	foreach($Node in $NodeCollection)
	{
		if($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNodes $Node.Nodes $CheckedNodes
	}
}
Function Display-MsgBox
{
	# -Style:
	# 16 Error
	# 32 Question
	# 48 Exclamation
	# 64 Information
	
	# -ButtonSetup
	# 0 OK
	# 1 OKCancel
	# 2 AbortRetryIgnore
	# 3 YesNoCancel
	# 4 YesNo
	# 5 RetryCancel
	
	param (
		[Parameter(Mandatory = $true, Position = 1)]
		$Message,
		[Parameter(Mandatory = $true, Position = 2)]
		$Title,
		[Parameter(Mandatory = $false, Position = 3)]
		$Style = 64,
		[Parameter(Mandatory = $false, Position = 4)]
		$ButtonSetup = 0
	)
	[System.Windows.Forms.MessageBox]::Show($Message, $Title, $ButtonSetup, $Style)
	
}
function Append-RichtextboxStatus
{
	PARAM (
		[Parameter(Mandatory = $true)]
		[string]$Message,
		[string]$MessageColor = "Black",
		[string]$DateTimeColor = "Gray",
		[string]$Component,
		[string]$ComponenetColor = "DarkCyan",
		[String]$ComputerNameColor = "Blue")
	
	$SortableTime = get-date -Format "yyyy-MM-dd HH:mm:ss"
	$Log.SelectionColor = $DateTimeColor
	$Log.AppendText("[$SortableTime] ")
	
	IF ($PSBoundParameters['ComputerName'])
	{
		$Log.SelectionColor = $ComputerNameColor
		$Log.AppendText(("$ComputerName ").ToUpper())
	}
	
	IF ($PSBoundParameters['Component'])
	{
		$Log.SelectionColor = $ComponenetColor
		$Log.AppendText("$Component ")
	}
	
	$Log.SelectionColor = $MessageColor
	$Log.AppendText("$Message`r")
	$Log.Refresh()
	$Log.ScrollToCaret()
	
	Write-Verbose -Message "$SortableTime $Message"
}
function Get-SubNode
{
	param (
		[parameter(Mandatory = $true)]
		[int]$ParentContainerNodeID,
		[parameter(Mandatory = $true)]
		$ParentNode
	)
	$SubNodes = Get-WmiObject -Namespace "root\SMS\Site_$($SiteCode)" -Class SMS_ObjectContainerNode -ComputerName $SiteServer -Filter "ParentContainerNodeID = $($ParentContainerNodeID) AND ObjectType = $RKObjectType"
	if ($SubNodes -ne $null)
	{
		foreach ($SubNode in ($SubNodes | Sort-Object -Property Name))
		{
			$Node = $ParentNode.Nodes.Add($SubNode.ContainerNodeID, $SubNode.Name)
			Append-RichtextboxStatus -Component 'Retrieving Folder Structure' -Message "Found sub folder $($SubNode.Name)"
			Get-SubNode -ParentContainerNodeID $SubNode.ContainerNodeID -ParentNode $Node
		}
	}
}

function Enable-ChildNode($Node)
{
	
	foreach ($n in $Node.nodes)
	{
		#$CheckStatus = $Node.checked		
		if ($n.checked -eq $true)
		{
			Append-RichtextboxStatus -Component 'Tree Control' -Message "$($n.Text) already enabled."
		}
		else
		{
			$n.checked = $true
			Append-RichtextboxStatus -Component 'Tree Control' -Message "$($n.Text) enabled."
		}
		Enable-ChildNode($n)
	}
}

function Disable-ChildNode($Node)
{
	
	foreach ($n in $Node.nodes)
	{
		#$CheckStatus = $Node.checked		
		if ($n.checked -eq $false)
		{
			Append-RichtextboxStatus -Component 'Tree Control' -Message "$($n.Text) already disabled."
		}
		else
		{
			$n.checked = $false
			Append-RichtextboxStatus -Component 'Tree Control' -Message "$($n.Text) disabled."
		}
		Disable-ChildNode($n)
	}
}
Function Get-CMFolderStructure
{
    <#
    .SYNOPSIS
    Retrives the folder structure for Device and User Collections in Configuration Manager.
    .DESCRIPTION
    Retrives the folder structure for Device and User Collections in Configuration Manager.
    .EXAMPLE
    Get-CMFolderStructure -SiteCode 'PS1' -SiteServer 'CM01.Corp.Viamonstra.Com' -RKCMCollectionType 'Devce'
    .EXAMPLE
	Get-CMFolderStructure 'PS1' 'CM01.Corp.Viamonstra.Com' 'Devce'
    #>
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[System.String][ValidateNotNullOrEmpty()]
		$SiteServer,
		[Parameter(Mandatory = $true, Position = 1)]
		[System.String][ValidateNotNullOrEmpty()]
		$SiteCode,
		[Parameter(Mandatory = $true, Position = 2)]
		[System.String][ValidateSet('Device','User')]
		$RKCMCollectionType
	)
	
	switch ($RKCMCollectionType)
	{
		'Device' {
			$RKObjectType = '5000'
		}
		
		'User' {
			$RKObjectType = '5001'
		}
	}
	
	Append-RichtextboxStatus -Component 'Retrieving Folder Structure' -Message 'Searching'
	$TreeView.Nodes.Clear()
	$treeview.CheckBoxes = $true
	# Create the root node
	$RootNode = $TreeView.Nodes.Add("Root")
	# Determine top level Container Node items for Device Collections
	$RootNodes = Get-WmiObject -Namespace "root\SMS\Site_$($SiteCode)" -Class SMS_ObjectContainerNode -ComputerName $SiteServer -Filter "ParentContainerNodeID = 0 AND ObjectType = $RKObjectType"
	foreach ($Node in ($RootNodes | Sort-Object -Property Name))
	{
		$CurrentNode = $RootNode.Nodes.Add($Node.ContainerNodeID, $Node.Name)
		Append-RichtextboxStatus -Component 'Retrieving Folder Structure' -Message "Found $($Node.Name)"
		Get-SubNode -ParentContainerNodeID $Node.ContainerNodeID -ParentNode $CurrentNode
	}
	$treeview.ExpandAll()
	
}

function Get-CMFolderObjects
{
	    <#
	        .SYNOPSIS
	        Helps return devices collectiosn in a folder.
	        .DESCRIPTION
	        This function retrives all the device collections within a folder within Configuration Manager
	        .EXAMPLE
	        Get-CMFolderObjects -SiteCode 'PS1' -SiteServer 'CM01.Corp.Viamonstra.Com' -ContainerID '16777217'
	        .EXAMPLE
            Get-CMFolderObjects PS1 CM01.Corp.Viamonstra.Com -ContainerID 16777217
            .EXAMPLE
            Return all device collections in the root folder
            Get-CMFolderObject -SiteCode 'PS1' -SiteServer 'CM01'
            .EXAMPLE
            Return all device collections in the root folder
            Get-CMFolderObject -SiteCode 'PS1' -SiteServer 'CM01' -ContainerID '0'
	    #>
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[System.String][ValidateNotNullOrEmpty()]
		[ValidateLength(3, 3)]
		$SiteCode,
		[Parameter(Mandatory = $true, Position = 1)]
		[System.String][ValidateNotNullOrEmpty()]
		$SiteServer,
		[Parameter(Mandatory = $true, Position = 2)]
		[int][ValidateNotNullOrEmpty()]
		$ContainerID,
		[Parameter(Mandatory = $true, Position = 3)]
		[System.String][ValidateSet('Device', 'User')]
		$RKCMCollectionType
	)
	
	switch ($RKCMCollectionType)
	{
		'Device' {
			$RKObjectType = '5000'
			$RKCollectionType = '2'
		}
		
		'User' {
			$RKObjectType = '5001'
			$RKCollectionType = '1'
		}
	}
	
	switch ($ContainerID)
	{
		"0" {
			$Query = "select * from SMS_Collection where CollectionType=$RKCollectionType and NOT CollectionID is in
                (select InstanceKey from SMS_ObjectContainerItem where ObjectType=$RKObjectType)"
		}
		
		default
		{
			$Query = "select * from SMS_Collection where CollectionID is in
                (select InstanceKey from SMS_ObjectContainerItem where ObjectType=$RKObjectType
                and ContainerNodeID='$ContainerID') and CollectionType=$RKCollectionType"
		}
	}
	Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Query $Query
}


function Get-RKCollections
{
	$CheckedNodes = New-Object System.Collections.ArrayList
	$Component = 'Import Collections'
	$Select = $false
	$DGVArray = @()
	Get-CheckedNodes $treeview.Nodes $CheckedNodes
	foreach ($node in $CheckedNodes)
	{
		$CollCount = 0
		$CMFolderObjectsCount = 0
		$CMFolderObjects = $null
		$CMFolderObjects = @(Get-CMFolderObjects -SiteCode $SiteCode -SiteServer $SiteServer -ContainerID $node.Name -RKCMCollectionType $RKCMCollectionType)
		$CMFolderObjectsCount = $CMFolderObjects.Count
		$FolderText = $node.Text
		
		$progressbaroverlay1.Maximum = $CMFolderObjectsCount
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		
		Append-RichtextboxStatus -Message "Importing $CMFolderObjectsCount collection/s from folder $FolderText" -Component $Component
		foreach ($Collection in $CMFolderObjects)
		{
			$CollectionRefesh = Get-CollectionRefresh -Collection $Collection
			$CollCount++
			$progressbaroverlay1.PerformStep()
			$Refreshinfo = Get-IncrementalStatus -RefreshType $Collection.RefreshType
			$Object = [PSCustomObject]@{
				Select = $Select
				'Collection' = $Collection.Name
				Folder = $FolderText
				Incremental = $Refreshinfo
				'Scheduled' = Get-CMScheduleStatus -RKCMStatus $Collection.RefreshType
				'Refresh Schedule' = $CollectionRefesh.RefreshDate
				'Start Time' = [string]$CollectionRefesh.RefreshTime
				'New Schedule String' = '0'
			}
			$DGVArray += $Object
			$progressbaroverlay1.TextOverlay = "Adding Collection $($CollCount) / $($CMFolderObjectsCount)"
		}
	}
	$datagridview1.DataSource = ConvertTo-DataTable $DGVArray
	$progressbaroverlay1.TextOverlay = 'Collections Imported!'
	$datagridview1.Columns[1].ReadOnly = $true
	$datagridview1.Columns[2].ReadOnly = $true
	$datagridview1.Columns[3].ReadOnly = $true
	$datagridview1.Columns[4].ReadOnly = $true
	$datagridview1.Columns[5].ReadOnly = $true
	$datagridview1.Columns[6].ReadOnly = $true
	$datagridview1.Columns[0].Width = 70
	$datagridview1.Columns[1].Width = 300
	$datagridview1.Columns[2].Width = 120
	$datagridview1.Columns[3].Width = 80
	$datagridview1.Columns[4].Width = 80
	$datagridview1.Columns[5].Width = 200
	$datagridview1.Columns[6].Width = 110
}

Function Convert-DayNumbersToDayName
{
	[CmdletBinding()]
	Param (
		[String]$DayNumber
	)
	
	Switch ($DayNumber)
	{
		"1" { $DayName = "Sunday" }
		"2" { $DayName = "Monday" }
		"3" { $DayName = "TuesDay" }
		"4" { $DayName = "WednesDay" }
		"5" { $DayName = "ThursDay" }
		"6" { $DayName = "FriDay" }
		"7" { $DayName = "Saturday" }
		
	}
	
	Return $DayName
}
Function Convert-MonthToNumbers
{
	[CmdletBinding()]
	Param (
		[String]$MonthNumber
	)
	
	Switch ($MonthNumber)
	{
		"1" { $MonthName = "January" }
		"2" { $MonthName = "Feburary" }
		"3" { $MonthName = "March" }
		"4" { $MonthName = "April" }
		"5" { $MonthName = "May" }
		"6" { $MonthName = "June" }
		"7" { $MonthName = "July" }
		"8" { $MonthName = "August" }
		"9" { $MonthName = "September" }
		"10" { $MonthName = "October" }
		"11" { $MonthName = "November" }
		"12" { $MonthName = "December" }
	}
	
	Return $MonthName
}
Function Convert-WeekOrderNumber
{
	[CmdletBinding()]
	Param (
		[String]$WeekOrderNumber
	)
	
	Switch ($WeekOrderNumber)
	{
		0 { $WeekOrderName = "Last" }
		1 { $WeekOrderName = "First" }
		2 { $WeekOrderName = "Second" }
		3 { $WeekOrderName = "Third" }
		4 { $WeekOrderName = "Fourth" }
		
	}
	
	Return $WeekOrderName
}

function Get-CollectionRefresh
{
    <#
        .SYNOPSIS
        Retrieves refreshdate and time for a collection.
        .DESCRIPTION
        This function retrives the collection refreshdate and time for a given collection
        .EXAMPLE
        Get-CollectionRefresh -Collection $Collection
        .EXAMPLE
        Get-CollectionRefresh $Collection
    #>
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[System.Array][ValidateNotNullOrEmpty()]
		$Collection
	)		
	$Collection.__PATH
	$Collection = [wmi]$Collection.__path
	
	$CollectionRefresh = $null
	$CollectionRefresh = @()
	$Object = New-Object -Type System.Object
	
	if ($Collection.RefreshType -eq 1)
	{
		
		$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value ""
		$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ""
	}
	
	Else
	{
		switch ($Collection.RefreshSchedule.__CLASS)
		{
			"SMS_ST_RecurWeekly" {
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value ("Occures every: $($Collection.RefreshSchedule.ForNumberOfWeeks) weeks on " + (Convert-DayNumbersToDayName -DayNumber $Collection.RefreshSchedule.Day))
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
			}
			
			"SMS_ST_RecurInterval" {
				
				if ($Collection.RefreshSchedule.DaySpan -ne 0)
				{
					$text = "Occures every $($Collection.RefreshSchedule.DaySpan) days"
				}
				if ($Collection.RefreshSchedule.HourSpan -ne 0)
				{
					$text = "Occures every $($Collection.RefreshSchedule.HourSpan) hours"
				}
				if ($Collection.RefreshSchedule.MinuteSpan -ne 0)
				{
					$text = "Occures every $($Collection.RefreshSchedule.MinuteSpan) minutes"
				}
				
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value $text
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
			}
			
			"SMS_ST_RecurMonthlyByDate" {
				
				If ($Collection.RefreshSchedule.MonthDay -eq 0)
				{
					
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value "Occures the last day of every $($Collection.RefreshSchedule.ForNumberOfMonths) months"
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
				}
				Else
				{
					
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value "Occures day $($Collection.RefreshSchedule.MonthDay) of every $($Collection.RefreshSchedule.ForNumberOfMonths) months"
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
				}
			}
			
			"SMS_ST_RecurMonthlyByWeekday" {
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value ("Occures the " + (Convert-WeekOrderNumber -weekordernumber $Collection.RefreshSchedule.WeekOrder) + " " + (Convert-DayNumbersToDayName -DayNumber $Collection.RefreshSchedule.Day) + " of every " + (Convert-MonthToNumbers -MonthNumber $Collection.RefreshSchedule.ForNumberOfMonths))
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
			}
			
			"SMS_ST_NonRecurring" {
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value "No Recurrence. The Scheduled event Occures once at the specific time"
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
			}
		}
	}
	
	$CollectionRefresh += $Object
	$CollectionRefresh
}

function Get-CMScheduleStatus
{
    <#
	    .SYNOPSIS
	    converts the schedule status from [int] to [bool]
	    .DESCRIPTION
	    converts the schedule status from [int] to [bool]
	    .EXAMPLE
	    Get-CMScheduleStatus -RKCMStatus 4
	    .EXAMPLE
        Get-CMScheduleStatus 1
        .Notes
        Possible Enumeration Values: 
        1 = Manual Update only
        2 = Scheduled Updates only
        4 = Incremental Updates Only 
        6 = Incremental and Scheduled Updates  
	    #>
	
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[int][ValidateNotNullOrEmpty()]
		[ValidateSet(1, 2, 4, 6)]
		$RKCMStatus
	)
	switch ($RKCMStatus)
	{
		1 { $CollectionTypeReturn = $false }
		2 { $CollectionTypeReturn = $true }
		4 { $CollectionTypeReturn = $false }
		6 { $CollectionTypeReturn = $true }
	}
	return [bool]$CollectionTypeReturn
}

$btn_ImportCollections_Click={
	#TODO: Place custom script here
	$btn_ImportCollections.Enabled = $false
	$progressbaroverlay1.Visible = $true
	Get-RKCollections
	if ($datagridview1.rows.Count -eq 0) {
		$checkbox0.Visible = $false
		$btn_start.Enabled = $false
		$btn_stop.Enabled = $false
	} else {
		$checkbox0.Visible = $true
		$btn_start.Enabled = $true
		$btn_stop.Enabled = $true
	}
	$btn_ImportCollections.Enabled = $true
}

$btn_Connect_Click={
	#TODO: Place custom script here
	$btn_Connect.Enabled = $false
	Append-RichtextboxStatus -Message "Getting SiteCode information"
	$SiteServer = $txtbox_SiteServer.Text
	if (!$SiteServer)
	{
		Append-RichtextboxStatus -Message "SiteServer is empty, please input SiteServer name" -MessageColor 'red'
	}
	else
	{
		Get-CMSiteConnection -SiteServer $SiteServer
	}
	$btn_Connect.Enabled = $true
}

$txtbox_SiteCode_TextChanged={
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{	
			$array.Add($Item)	
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($Table -eq $null)
	{
		$Table = New-Object System.Data.DataTable
	}

	if($InputObject-is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	else
	{
		if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()

			if($InputObject -eq $null){ return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach($item in $InputObject)
			{
				if($item -ne $null)
				{
					$object = $item
					break	
				}
			}

			if($object -eq $null) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if($prop.Value -ne $null)
					{
						try{ $type = $prop.Value.GetType() } catch {}
					}

					if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
		      			[void]$table.Columns.Add($prop.Name, $type) 
					}
					else #Type info not found
					{ 
						[void]$table.Columns.Add($prop.Name) 	
					}
				}
		    }
			
			if($object -is [System.Data.DataRow])
			{
				foreach($item in $InputObject)
				{	
					$Table.Rows.Add($item)
				}
				return  @(,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()	
		}
		
		foreach($item in $InputObject)
		{		
			$row = $table.NewRow()
			
			if($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}

	return @(,$Table)	
}
#endregion

$checkbox0_CheckedChanged={
	#TODO: Place custom script here
	#progressbar
	$Time = Measure-Command {
		$SelectedRowCount = 0
		$AllRowCount = 0
		for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
		{
			$AllRowCount++
		}
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.TextOverlay = ''
		$progressbaroverlay1.Maximum = $AllRowCount
		
		if ($checkbox0.checked -eq $true)
		{
			$checkbox0.Enabled = $false
			
			Append-RichtextboxStatus -Message 'Selecting all collections, please wait...' -Component 'Select'
			
			$datagridview1.Columns[3].ReadOnly = $false
			
			for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
			{
				#progressbar
				$SelectedRowCount++
				$progressbaroverlay1.TextOverlay = "Selecting all collections $($SelectedRowCount) / $($AllRowCount)"
				[System.Windows.Forms.Application]::DoEvents()
				$progressbaroverlay1.PerformStep()
				$selectedname = $($datagridview1.Rows[$RowIndex].cells[1].value)
				if (($selectedname -eq 'All Systems') -or
				($selectedname -eq 'All Unknown Computers') -or
				($selectedname -eq 'All Mobile Devices') -or
				($selectedname -eq 'All Desktop and Server Clients'))
				{
					Append-RichtextboxStatus -Message "$selectedname - is a read only Collection" -Component 'Select'
				}
				else
				{
					$datagridview1.Rows[$RowIndex].cells[0].value = $true					
					Append-RichtextboxStatus -Message "Selected $selectedname" -Component 'Select'
				}				
			}
			
			Append-RichtextboxStatus -Message "Done" -Component 'Select'
			$progressbaroverlay1.TextOverlay = 'All selected!'
			
			$checkbox0.Enabled = $true
		}
		
		if ($checkbox0.checked -eq $false)
		{
			Append-RichtextboxStatus -Message "De-selecting all collections please wait..." -Component 'De-Select'
			$checkbox0.Enabled = $false
			
			$datagridview1.Columns[3].ReadOnly = $true
			
			for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
			{
				#progressbar
				$SelectedRowCount++
				$progressbaroverlay1.TextOverlay = "Deselecting all collections $($SelectedRowCount) / $($AllRowCount)"
				[System.Windows.Forms.Application]::DoEvents()
				$progressbaroverlay1.PerformStep()
				
				
				$datagridview1.Rows[$RowIndex].cells[0].value = $false
				$selectedname = $($datagridview1.Rows[$RowIndex].cells[1].value)
				Append-RichtextboxStatus -Message "Deselected $selectedname" -Component 'De-Select'
			}
			Append-RichtextboxStatus -Message "Done" -Component 'De-Select'
			$progressbaroverlay1.TextOverlay = 'All de-selected!'
			
			$checkbox0.Enabled = $true
		}
	}
	Append-RichtextboxStatus -Component 'Time' -Message $Time.TotalSeconds
}

$Select_CheckedChanged={
	#TODO: Place custom script here
}

Function Set-DGVStatus
{
	for ($i = 0; $i -lt $datagridview1.RowCount; $i++)
	{
		if ($datagridview1.Rows[$i].Cells[0].Value -eq $true)
		{
			$datagridview1.Rows[$i].DefaultCellStyle.BackColor = 'LightYellow'
		}
		else
		{
			#do nothing
		}
	}
}

function Set-RKCollection
{
    <#
    .SYNOPSIS
    Short Description
    .DESCRIPTION
    Detailed Description
    .EXAMPLE
    Set-RKCollection
    .NOTES
    The following refresh types exist for Configuration Manager collections  
    6 = Incremental and Scheduled Updates  
    4 = Incremental Updates Only  
    2 = Scheduled Updates only  
    1 = Manual Update only 
    .EXAMPLE
    Set-RKCollection
  #>
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[System.String]$SiteServer,
		[Parameter(Mandatory = $true, Position = 1)]
		[System.String]$SiteCode,
		[Parameter(Mandatory = $true, Position = 2)]
		[System.String]$Name,
		[Parameter(Mandatory = $true, Position = 3)]
		[int][ValidateSet(1, 2, 4, 6)]
		$RefreshType
	)
	switch ($RefreshType)
	{
		"1" {
			try
			{
				$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
				$CollectionQuery = [wmi]$CollectionQuery.__PATH
				$CollectionQuery.RefreshType = 1
				$CollectionQuery.Put()
				Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
			}
			catch
			{
				Append-RichtextboxStatus -Component 'Configure Collection' -Message "Failed to update collection $Name"
			}
		}
		"2" {
			try
			{
				if ($RKScheduleString)
				{
					$RKSchedule = Convert-CMSchedule -ScheduleString $RKScheduleString
					$RKSchedconverted = $RKSchedule.psbase.managedobject
					$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
					$CollectionQuery = [wmi]$CollectionQuery.__PATH
					$CollectionQuery.RefreshType = 2
					$CollectionQuery.RefreshSchedule = $RKSchedconverted
					$CollectionQuery.Put()
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
				}
				elseif (!($RKScheduleString))
				{
					$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
					$CollectionQuery = [wmi]$CollectionQuery.__PATH
					$CollectionQuery.RefreshType = 2
					$CollectionQuery.Put()
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
				}
			}
			catch
			{
				Append-RichtextboxStatus -Component 'Configure Collection' -Message "Failed to update collection $Name" -MessageColor 'Red'
			}
		}
		"4" {
			try
			{
				$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
				$CollectionQuery = [wmi]$CollectionQuery.__PATH
				$CollectionQuery.RefreshType = 4
				$CollectionQuery.Put()
				Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
				
			}
			catch
			{
				Append-RichtextboxStatus -Component 'Configure Collection' -Message "Failed to update collection $Name" -MessageColor 'Red'
			}
		}
		"6" {
			try
			{
				if ($RKScheduleString)
				{
					$RKSchedule = Convert-CMSchedule -ScheduleString $RKScheduleString
					$RKSchedconverted = $RKSchedule.psbase.managedobject
					$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
					$CollectionQuery = [wmi]$CollectionQuery.__PATH
					$CollectionQuery.RefreshType = 6
					$CollectionQuery.RefreshSchedule = $RKSchedconverted
					$CollectionQuery.Put()
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
				}
				elseif (!($RKScheduleString))
				{
					$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
					$CollectionQuery = [wmi]$CollectionQuery.__PATH
					$CollectionQuery.RefreshType = 6
					$CollectionQuery.Put()
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
				}		
			}
			catch
			{
				Append-RichtextboxStatus -Component 'Configure Collection' -Message "Failed to update collection $Name" -MessageColor 'Red'
			}
		}
	}
}

$contextmenu_Opening=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$deselectToolStripMenuItem_Click={
	#TODO: Place custom script here
	Append-RichtextboxStatus -Component 'Right Click' -Message "Deselecting all highlighted rows"
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCheckedState = $item.Cells[0].value
		$RowCollectionName = $Item.Cells[1].Value
		if ($RowCheckedState -eq $false)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName already taken out of update mode."
		}
		elseif ($RowCheckedState -eq $true)
		{
			$item.Cells[0].Value = $false
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName taken out of update mode"
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName"
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Disabling Collection For Update $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

$removeIncrementalUpdatesToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Append-RichtextboxStatus -Component 'Right Click' -Message "Deselecting all highlighted rows"
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCollectionName = $Item.Cells[1].Value
		$RowCheckedState = $item.Cells[0].value
		if ($RowCheckedState -eq $true)
		{
			$IncCheckedState = $item.Cells[3].value			
			if ($IncCheckedState -eq $false)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName incremental update already disabled."
			}
			elseif ($IncCheckedState -eq $true)
			{
				$item.Cells[3].Value = $false
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName incremental update disabled"
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
			}
		}
		elseif ($RowCheckedState -eq $false)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode, unable to change incremental state" -MessageColor 'Red'
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the selected state." -MessageColor 'Red'
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Removing Incremental Update $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

Function set-NewCMSchedule {
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCollectionName = $Item.Cells[1].Value
		$RowCheckedState = $item.Cells[0].value
		if ($RowCheckedState -eq $true)
		{
			$item.Cells[5].Value = $script:Token.RefreshDate
			$item.Cells[6].Value = $script:Token.StartTime
			$item.Cells[7].value = Convert-CMSchedule -InputObject $script:CFSchedule
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName schedule updated"
		}
		elseif ($RowCheckedState -eq $false)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode unable to change shedule state" -MessageColor 'Red'
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the selected state." -MessageColor 'Red'
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Updating Schedule On Collection $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

$addIncrementalUpdatesToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Append-RichtextboxStatus -Component 'Right Click' -Message "Adding incremental updates to all highlighted rows that are selected"
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCollectionName = $Item.Cells[1].Value
		$RowCheckedState = $item.Cells[0].value
		if ($RowCheckedState -eq $true)
		{
			$IncCheckedState = $item.Cells[3].value
			if ($IncCheckedState -eq $true)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName incremental update already enabled."
			}
			elseif ($IncCheckedState -eq $false)
			{
				$item.Cells[3].Value = $true
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName incremental update enabled"
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
			}
		}
		elseif ($RowCheckedState -eq $false)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode, unable to change incremental state" -MessageColor 'Red'
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the selected state." -MessageColor 'Red'
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Adding Incremental Update $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

$selectToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Append-RichtextboxStatus -Component 'Right Click' -Message "selecting all highlighted rows"
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCheckedState = $item.Cells[0].value
		$RowCollectionName = $Item.Cells[1].Value		
		if ($RowCheckedState -eq $true)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName already in update mode."
		}
		elseif (($RowCollectionName -eq 'All Systems') -or
			($RowCollectionName -eq 'All Unknown Computers') -or
			($RowCollectionName -eq 'All Mobile Devices') -or
			($RowCollectionName -eq 'All Desktop and Server Clients') -or
			($RowCollectionName -eq 'All Users') -or
			($RowCollectionName -eq 'All User Groups') -or
			($RowCollectionName -eq 'All Users and User Groups')) {
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName is a readonly Collection"
		}
		elseif ($RowCheckedState -eq $false)
		{
			$item.Cells[0].Value = $true
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName placed in update mode"
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Enabling Collection For Update $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

$btn_filter_Click={
	#TODO: Place custom script here
	$datagridview1.DataSource.DefaultView.RowFilter = "Collection LIKE '*$($txtbox_Filter.Text)*'"
	Set-DGVStatus
}

$btn_nofilter_Click={
	#TODO: Place custom script here
	$txtbox_Filter.Text = $null
	$datagridview1.DataSource.DefaultView.RowFilter = "Collection LIKE '*$($txtbox_Filter.Text)*'"
	Set-DGVStatus
}

$datagridview1_Sorted={
	#TODO: Place custom script here
	Set-DGVStatus
}

$SelectAllNodes_Click={
	#TODO: Place custom script here
	if ($Treeview.SelectedNode.Checked -eq $true) {
		Append-RichtextboxStatus -Component 'Tree Control' -Message "$($Treeview.SelectedNode.Text) already enabled."
	} elseif ($Treeview.SelectedNode.Checked -eq $false) {
		$Treeview.SelectedNode.Checked = $true
		Append-RichtextboxStatus -Component 'Tree Control' -Message "$($Treeview.SelectedNode.Text) enabled."
	}
	Enable-ChildNode($Treeview.SelectedNode)
}

$DeSelectAllNodes_Click={
	#TODO: Place custom script here
	if ($Treeview.SelectedNode.Checked -eq $false)
	{
		Append-RichtextboxStatus -Component 'Tree Control' -Message "$($Treeview.SelectedNode.Text) already disabled."
	}
	elseif ($Treeview.SelectedNode.Checked -eq $true)
	{
		$Treeview.SelectedNode.Checked = $false
		Append-RichtextboxStatus -Component 'Tree Control' -Message "$($Treeview.SelectedNode.Text) disabled."
	}
	
	Disable-ChildNode($Treeview.SelectedNode)
}

$contextmenutree_Opening=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	if ($Treeview.SelectedNode)
	{
		$SelectAllNodes.Enabled = $true
		$DeSelectAllNodes.Enabled = $true
	}
	elseif (!($Treeview.SelectedNode))
	{
		$SelectAllNodes.Enabled = $false
		$DeSelectAllNodes.Enabled = $false
		Append-RichtextboxStatus -Component 'Tree Control' -MessageColor 'Red' -Message 'You need to highlight a folder in the tree on the left to be able to use the context menu'
	}
	else
	{
		Append-RichtextboxStatus -Component 'Tree Control' -Message "There were problems looking up highlighted status of a node during right click" -MessageColor 'Red'
	}
}

$treeview_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	#TODO: Place custom script here
}

$SetRefreshScheduleToolStripMenuItem_Click={
	#TODO: Place custom script here
	if ((Call-ChildForm_psf) -eq 'OK')
	{
		set-NewCMSchedule
	}
}

$btn_start_Click={
	#TODO: Place custom script here
	# Determine selected row count
	$script:CancelLoop = $false
	$btn_stop.Enabled = $true
	$datagridview1.ClearSelection()
	$btn_start.Enabled = $false
	$SelectedRowCount = 0
	$AllRowCount = 0
	
	for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
	{
		if ($datagridview1.Rows[$RowIndex].Cells[0].Value -eq $true)
		{
			$AllRowCount++
		}
	}
	
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $AllRowCount
	
	# Enumerate through selected rows in DataGridView
	for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
	{
		if ($script:CancelLoop -eq $true)
		{
			#Clear the progress bar
			$progressbaroverlay1.Value = 0
			$progressbaroverlay1.TextOverlay = "Stopped"
			#Exit the loop
			$btn_start.Enabled = $true
			return
		}
		
		$RowCheckedState = $datagridview1.Rows[$RowIndex].Cells[0].Value
		$RowCollectionName = $datagridview1.Rows[$RowIndex].Cells[1].Value
		$IncCheckedState = $datagridview1.Rows[$RowIndex].Cells[3].Value
		$SchedCheckedState = $datagridview1.Rows[$RowIndex].Cells[4].Value
		if ($datagridview1.Rows[$RowIndex].Cells[7].Value -eq '0')
		{
			$RKScheduleString = $null
		}
		else
		{
			$RKScheduleString = $datagridview1.Rows[$RowIndex].Cells[7].Value
		}
		
		if ($RowCheckedState -eq $true)
		{
			if ($SchedCheckedState -eq $false -and $IncCheckedState -eq $false)
			{
				# Manual
				Set-RKCollection -SiteServer $SiteServer -SiteCode $SiteCode -Name $RowCollectionName -RefreshType 1
			}
			elseif ($SchedCheckedState -eq $true -and $IncCheckedState -eq $false)
			{
				# Scheduled Only
				Set-RKCollection -SiteServer $SiteServer -SiteCode $SiteCode -Name $RowCollectionName -RefreshType 2
			}
			elseif ($SchedCheckedState -eq $false -and $IncCheckedState -eq $true)
			{
				# Incremental Only
				Set-RKCollection -SiteServer $SiteServer -SiteCode $SiteCode -Name $RowCollectionName -RefreshType 4
			}
			elseif ($SchedCheckedState -eq $true -and $IncCheckedState -eq $true)
			{
				# Scheduled and Incremental
				Set-RKCollection -SiteServer $SiteServer -SiteCode $SiteCode -Name $RowCollectionName -RefreshType 6
			}
			$SelectedRowCount++
			$progressbaroverlay1.PerformStep()
			$progressbaroverlay1.TextOverlay = "Saving settings $($SelectedRowCount) / $($AllRowCount)"
			$datagridview1.Rows[$RowIndex].Cells[0].Value = $false
			$progressbaroverlay1.Update()
			[System.Windows.Forms.Application]::DoEvents()
		}
	}
	
	$progressbaroverlay1.TextOverlay = 'All Collections have been updated'
	$btn_start.Enabled = $true
}


$datagridview1_CellPainting=[System.Windows.Forms.DataGridViewCellPaintingEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellPaintingEventArgs]
	#TODO: Place custom script here
	if ($_.RowIndex -ge 0 -and $_.ColumnIndex -ge 0)
	{
		if ($_.ColumnIndex -eq 0)
		{
			$RKCellV = $this.Rows[$_.RowIndex].Cells[1].Value
			
			if (($RKCellV -eq 'All Systems') -or
			($RKCellV -eq 'All Unknown Computers') -or
			($RKCellV -eq 'All Mobile Devices') -or
			($RKCellV -eq 'All Desktop and Server Clients') -or
			($RKCellV -eq 'All Users') -or
			($RKCellV -eq 'All User Groups') -or
			($RKCellV -eq 'All Users and User Groups'))
			{
				$this.Rows[$_.RowIndex].Cells | % { $_.Style.BackColor = 'LightGray' }
				$this.Rows[$_.RowIndex].Cells | % { $_.ReadOnly = $true }
			}
			elseif ($this.Rows[$_.RowIndex].Cells[0].Value)
			{
				$this.Rows[$_.RowIndex].Cells | %{ $_.Style.BackColor = 'LightYellow' }
				$this.Rows[$_.RowIndex].cells[3].readonly = $false
				$this.Rows[$_.RowIndex].cells[4].readonly = $false
				
			}
			else
			{
				$this.Rows[$_.RowIndex].Cells | ForEach-Object{ $_.Style.BackColor = 'white' }
				$this.Rows[$_.RowIndex].cells[3].readonly = $true
				$this.Rows[$_.RowIndex].cells[4].readonly = $true
			}
		}
	}
}




$enablescheduleToolStripMenuItem_Click={
	#TODO: Place custom script here
	Append-RichtextboxStatus -Component 'Right Click' -Message "Enabling scheduled updates to all highlighted rows that are selected"
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCollectionName = $Item.Cells[1].Value
		$RowCheckedState = $item.Cells[0].value
		if ($RowCheckedState -eq $true)
		{
			$SchedCheckedState = $item.Cells[4].value
			if ($SchedCheckedState -eq $true)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName scheduled update already enabled"
			}
			elseif ($SchedCheckedState -eq $false)
			{
				$item.Cells[4].Value = $true
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName scheduled update enabled"
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
			}
		}
		elseif ($RowCheckedState -eq $false)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode, unable to change schedule state" -MessageColor 'Red'
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the enabled state" -MessageColor 'Red'
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Enabling Scheduled Updates $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

$disablescheduleToolStripMenuItem_Click={
	#TODO: Place custom script here
	Append-RichtextboxStatus -Component 'Right Click' -Message "Disabling scheduled updates to all highlighted rows that are selected"
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCollectionName = $Item.Cells[1].Value
		$RowCheckedState = $item.Cells[0].value
		if ($RowCheckedState -eq $true)
		{
			$SchedCheckedState = $item.Cells[4].value
			if ($SchedCheckedState -eq $false)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName scheduled update already disabled"
			}
			elseif ($SchedCheckedState -eq $true)
			{
				$item.Cells[4].Value = $false
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName scheduled update disabled"
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
			}
		}
		elseif ($RowCheckedState -eq $false)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode, unable to change schedule state" -MessageColor 'Red'
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the selected state" -MessageColor 'Red'
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Disabling Scheduled Updates $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

$btn_stop_Click={
	#TODO: Place custom script here
	Append-RichtextboxStatus -Message 'Stopped'
	$script:CancelLoop = $true
	$btn_stop.Enabled = $false
	
}

$datagridview1_CurrentCellDirtyStateChanged={
	#TODO: Place custom script here
	if ($this.IsCurrentCellDirty)
	{
		$this.CommitEdit([System.Windows.Forms.DataGridViewDataErrorContexts]::Commit)
	}
}

$radiodbtn_device_CheckedChanged={
	#TODO: Place custom script here
	if ($this.checked -eq $true)
	{
		$script:RKCMCollectionType = 'Device'
		$TreeView.Nodes.Clear()
		$treeview.CheckBoxes = $true
	}
}

$radiodbtn_user_CheckedChanged={
	#TODO: Place custom script here
	if ($this.checked -eq $true)
	{
		$script:RKCMCollectionType = 'User'
		$TreeView.Nodes.Clear()
		$treeview.CheckBoxes = $true
	}
}

$btn_search_Click={
	#TODO: Place custom script here
	Get-CMFolderStructure -SiteCode $SiteCode -SiteServer $SiteServer -RKCMCollectionType $script:RKCMCollectionType
}

$datagridview1_DataBindingComplete=[System.Windows.Forms.DataGridViewBindingCompleteEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewBindingCompleteEventArgs]
	#TODO: Place custom script here
	$this.Columns[7].Visible = $false
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>