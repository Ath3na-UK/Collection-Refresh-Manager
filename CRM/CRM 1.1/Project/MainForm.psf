<File version="2">
  <FileID>10ad29ff-249e-4248-9235-9620b8477263</FileID>
  <LastExport>131592797625541339</LastExport>
  <Preview>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
FAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAAEEJI
uEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAh
hIQrFAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAA
EEJIuEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAI
CgAhhIQrFAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUA
gaAAEEJIuEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5Q
ABAICgAhhIQrFAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHh
CgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQ
Eq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJA
CCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAAEEJIuEIBQCAo
AIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAhhIQrFAAE
ggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAAEEJIuEIB
QCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAhhIQr
FAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAAEEJI
uEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAh
hIQrFAAEggJACCHhCgUAgaAAEEJIuEIBQCAoAIQQEq5QABAICgAhhIQrFAAEggJACCHhCgUAgaAA
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
AElFTkSuQmCC</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="MainForm" children="Controls">
    <Property name="AcceptButton">
      <Reference name="btn_Connect" />
    </Property>
    <Property name="BackColor">White</Property>
    <Property name="ClientSize">1214, 790</Property>
    <Property name="Name">MainForm</Property>
    <Property name="Text">Collection Refresh Manager 1.0</Property>
    <Event name="Load">MainForm_Load</Event>
    <Object type="System.Windows.Forms.SplitContainer, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="splitcontainer1" children="Controls">
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="Location">12, 88</Property>
      <Property name="Name">splitcontainer1</Property>
      <Property name="Panel1">
        <Property name="Controls">
          <Item type="System.Windows.Forms.GroupBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="groupbox1" />
          </Item>
        </Property>
      </Property>
      <Property name="Panel2">
        <Property name="Controls">
          <Item type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="btn_nofilter" />
          </Item>
          <Item type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="btn_filter" />
          </Item>
          <Item type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="txtbox_Filter" />
          </Item>
          <Item type="System.Windows.Forms.Panel, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="panel101" />
          </Item>
        </Property>
      </Property>
      <Property name="Size">1191, 488</Property>
      <Property name="SplitterDistance">297</Property>
      <Property name="TabIndex">19</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_stop" children="Controls">
      <Property name="Anchor">Top, Right</Property>
      <Property name="BackColor">PaleVioletRed</Property>
      <Property name="Location">927, 33</Property>
      <Property name="Name">btn_stop</Property>
      <Property name="Size">119, 36</Property>
      <Property name="TabIndex">16</Property>
      <Property name="Text">Stop</Property>
      <Property name="UseVisualStyleBackColor">False</Property>
      <Event name="Click">btn_stop_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_start" children="Controls">
      <Property name="Anchor">Top, Right</Property>
      <Property name="BackColor">SpringGreen</Property>
      <Property name="Location">802, 33</Property>
      <Property name="Name">btn_start</Property>
      <Property name="Size">119, 36</Property>
      <Property name="TabIndex">15</Property>
      <Property name="Text">Start</Property>
      <Property name="UseVisualStyleBackColor">False</Property>
      <Event name="Click">btn_start_Click</Event>
    </Object>
    <Object type="SAPIENTypes.ProgressBarOverlay, PowerShell Studio, Version=4.2.98.0, Culture=neutral, PublicKeyToken=null" name="progressbaroverlay1" children="Controls">
      <Property name="Anchor">Bottom, Left, Right</Property>
      <Property name="Location">12, 582</Property>
      <Property name="Name">progressbaroverlay1</Property>
      <Property name="Size">1191, 29</Property>
      <Property name="TabIndex">10</Property>
      <Property name="Visible">False</Property>
    </Object>
    <Object type="System.Windows.Forms.GroupBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="grpbx_SiteServer" children="Controls">
      <Property name="Location">12, 12</Property>
      <Property name="Name">grpbx_SiteServer</Property>
      <Property name="Size">361, 61</Property>
      <Property name="TabIndex">6</Property>
      <Property name="TabStop">False</Property>
      <Property name="Text">SiteServer</Property>
      <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_Connect" children="Controls">
        <Property name="Location">275, 21</Property>
        <Property name="Name">btn_Connect</Property>
        <Property name="Size">80, 27</Property>
        <Property name="TabIndex">1</Property>
        <Property name="Text">Connect</Property>
        <Property name="UseVisualStyleBackColor">True</Property>
        <Event name="Click">btn_Connect_Click</Event>
      </Object>
      <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="txtbox_SiteServer" children="Controls">
        <Property name="CharacterCasing">Upper</Property>
        <Property name="Location">11, 25</Property>
        <Property name="Name">txtbox_SiteServer</Property>
        <Property name="Size">254, 20</Property>
        <Property name="TabIndex">0</Property>
      </Object>
    </Object>
    <Object type="System.Windows.Forms.GroupBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="grpbx_SiteCode" children="Controls">
      <Property name="Anchor">Top, Right</Property>
      <Property name="Location">1052, 12</Property>
      <Property name="Name">grpbx_SiteCode</Property>
      <Property name="Size">158, 71</Property>
      <Property name="TabIndex">5</Property>
      <Property name="TabStop">False</Property>
      <Property name="Text">Site Code</Property>
      <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="txtbox_SiteCode" children="Controls">
        <Property name="BackColor">White</Property>
        <Property name="Location">32, 30</Property>
        <Property name="Name">txtbox_SiteCode</Property>
        <Property name="ReadOnly">True</Property>
        <Property name="Size">108, 20</Property>
        <Property name="TabIndex">0</Property>
        <Event name="TextChanged">txtbox_SiteCode_TextChanged</Event>
      </Object>
    </Object>
    <Object type="System.Windows.Forms.RichTextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Log" children="Controls">
      <Property name="Anchor">Bottom, Left, Right</Property>
      <Property name="BackColor">White</Property>
      <Property name="Location">12, 617</Property>
      <Property name="Name">Log</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="Size">1190, 161</Property>
      <Property name="TabIndex">2</Property>
      <Property name="Text">
      </Property>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.RadioButton, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="radiodbtn_user" children="Controls">
    <Property name="Location">127, 19</Property>
    <Property name="Name">radiodbtn_user</Property>
    <Property name="Size">62, 24</Property>
    <Property name="TabIndex">1</Property>
    <Property name="Text">User</Property>
    <Property name="UseVisualStyleBackColor">True</Property>
    <Event name="CheckedChanged">radiodbtn_user_CheckedChanged</Event>
  </Object>
  <Object type="System.Windows.Forms.RadioButton, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="radiodbtn_device" children="Controls">
    <Property name="Checked">True</Property>
    <Property name="Location">50, 19</Property>
    <Property name="Name">radiodbtn_device</Property>
    <Property name="Size">71, 24</Property>
    <Property name="TabIndex">0</Property>
    <Property name="TabStop">True</Property>
    <Property name="Text">Device</Property>
    <Property name="UseVisualStyleBackColor">True</Property>
    <Event name="CheckedChanged">radiodbtn_device_CheckedChanged</Event>
  </Object>
  <Object type="System.Windows.Forms.ContextMenuStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="contextmenu" children="Controls">
    <Property name="Items">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="SelectDeselect" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="addRemoveIncrementalUpdatesToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="scheduleAFullUpdateOnThisCollectionToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="SetRefreshScheduleToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">contextmenu</Property>
    <Property name="Size">296, 70</Property>
    <Event name="Opening">contextmenu_Opening</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="SelectDeselect">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="selectToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="deselectToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">SelectDeselect</Property>
    <Property name="Size">295, 22</Property>
    <Property name="Text">Select \ Deselect Highlighted</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="selectToolStripMenuItem">
    <Property name="Name">selectToolStripMenuItem</Property>
    <Property name="Size">105, 22</Property>
    <Property name="Text">Select</Property>
    <Event name="Click">selectToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="deselectToolStripMenuItem">
    <Property name="Name">deselectToolStripMenuItem</Property>
    <Property name="Size">152, 22</Property>
    <Property name="Text">Deselect</Property>
    <Event name="Click">deselectToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="addRemoveIncrementalUpdatesToolStripMenuItem">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="addIncrementalUpdatesToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="removeIncrementalUpdatesToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">addRemoveIncrementalUpdatesToolStripMenuItem</Property>
    <Property name="Size">295, 22</Property>
    <Property name="Text">Add \ Remove Incremental Updates</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="addIncrementalUpdatesToolStripMenuItem">
    <Property name="Name">addIncrementalUpdatesToolStripMenuItem</Property>
    <Property name="Size">96, 22</Property>
    <Property name="Text">Add</Property>
    <Event name="Click">addIncrementalUpdatesToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="removeIncrementalUpdatesToolStripMenuItem">
    <Property name="Name">removeIncrementalUpdatesToolStripMenuItem</Property>
    <Property name="Size">152, 22</Property>
    <Property name="Text">Remove</Property>
    <Event name="Click">removeIncrementalUpdatesToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ContextMenuStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="contextmenutree" children="Controls">
    <Property name="Items">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="SelectAllNodes" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="DeSelectAllNodes" />
      </Item>
    </Property>
    <Property name="Name">contextmenustrip1</Property>
    <Property name="Size">116, 26</Property>
    <Event name="Opening">contextmenutree_Opening</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="SelectAllNodes">
    <Property name="Name">SelectAllNodes</Property>
    <Property name="ShowShortcutKeys">False</Property>
    <Property name="Size">115, 22</Property>
    <Property name="Text">Select All</Property>
    <Event name="Click">SelectAllNodes_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="DeSelectAllNodes">
    <Property name="Name">DeSelectAllNodes</Property>
    <Property name="ShowShortcutKeys">False</Property>
    <Property name="Size">128, 22</Property>
    <Property name="Text">Deselect All</Property>
    <Event name="Click">DeSelectAllNodes_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="SetRefreshScheduleToolStripMenuItem">
    <Property name="Name">SetRefreshScheduleToolStripMenuItem</Property>
    <Property name="Size">295, 22</Property>
    <Property name="Text">Set Refresh Schedule</Property>
    <Event name="Click">SetRefreshScheduleToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.GroupBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="groupbox1" children="Controls">
    <Property name="Anchor">Top, Bottom, Left, Right</Property>
    <Property name="Location">0, 0</Property>
    <Property name="Name">groupbox1</Property>
    <Property name="Size">297, 488</Property>
    <Property name="TabIndex">13</Property>
    <Property name="TabStop">False</Property>
    <Property name="Text">Collection Folder Structure</Property>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_search" children="Controls">
      <Property name="Enabled">False</Property>
      <Property name="Location">186, 19</Property>
      <Property name="Name">btn_search</Property>
      <Property name="Size">70, 23</Property>
      <Property name="TabIndex">2</Property>
      <Property name="Text">Search</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">btn_search_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.TreeView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="treeview" children="Controls">
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="ContextMenuStrip">
        <Reference name="contextmenutree" />
      </Property>
      <Property name="Location">3, 49</Property>
      <Property name="Name">treeview</Property>
      <Property name="Size">291, 409</Property>
      <Property name="TabIndex">0</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_ImportCollections" children="Controls">
      <Property name="Dock">Bottom</Property>
      <Property name="Location">3, 458</Property>
      <Property name="Name">btn_ImportCollections</Property>
      <Property name="Size">291, 27</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">Import Collections</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">btn_ImportCollections_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.RadioButton, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="radiodbtn_user" reference="radiodbtn_user" />
    <Object type="System.Windows.Forms.RadioButton, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="radiodbtn_device" reference="radiodbtn_device" />
  </Object>
  <Object type="System.Windows.Forms.Panel, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="panel101" children="Controls">
    <Property name="Anchor">Top, Bottom, Left, Right</Property>
    <Property name="Location">0, 36</Property>
    <Property name="Name">panel101</Property>
    <Property name="Size">890, 452</Property>
    <Property name="TabIndex">1</Property>
    <Object type="System.Windows.Forms.CheckBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="checkbox0" children="Controls">
      <Property name="BackColor">Transparent</Property>
      <Property name="CheckAlign">MiddleCenter</Property>
      <Property name="Location">44, 3</Property>
      <Property name="Name">checkbox0</Property>
      <Property name="Size">18, 18</Property>
      <Property name="TabIndex">14</Property>
      <Property name="TextAlign">MiddleCenter</Property>
      <Property name="UseVisualStyleBackColor">False</Property>
      <Property name="Visible">False</Property>
      <Event name="CheckedChanged">checkbox0_CheckedChanged</Event>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridview1" children="Controls">
      <Property name="AllowUserToAddRows">False</Property>
      <Property name="AllowUserToDeleteRows">False</Property>
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="AutoSizeColumnsMode">Fill</Property>
      <Property name="AutoSizeRowsMode">DisplayedCells</Property>
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="ContextMenuStrip">
        <Reference name="contextmenu" />
      </Property>
      <Property name="Location">0, 0</Property>
      <Property name="Name">datagridview1</Property>
      <Property name="RowHeadersVisible">False</Property>
      <Property name="SelectionMode">FullRowSelect</Property>
      <Property name="Size">890, 452</Property>
      <Property name="TabIndex">12</Property>
      <Event name="CellPainting">datagridview1_CellPainting</Event>
      <Event name="CurrentCellDirtyStateChanged">datagridview1_CurrentCellDirtyStateChanged</Event>
      <Event name="DataBindingComplete">datagridview1_DataBindingComplete</Event>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="txtbox_Filter" children="Controls">
    <Property name="Location">3, 3</Property>
    <Property name="Name">txtbox_Filter</Property>
    <Property name="Size">240, 20</Property>
    <Property name="TabIndex">8</Property>
  </Object>
  <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_filter" children="Controls">
    <Property name="Location">249, 3</Property>
    <Property name="Name">btn_filter</Property>
    <Property name="Size">80, 27</Property>
    <Property name="TabIndex">9</Property>
    <Property name="Text">Filter</Property>
    <Property name="UseVisualStyleBackColor">True</Property>
    <Event name="Click">btn_filter_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="btn_nofilter" children="Controls">
    <Property name="Location">335, 3</Property>
    <Property name="Name">btn_nofilter</Property>
    <Property name="Size">80, 27</Property>
    <Property name="TabIndex">10</Property>
    <Property name="Text">CLR Filter</Property>
    <Property name="UseVisualStyleBackColor">True</Property>
    <Event name="Click">btn_nofilter_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="scheduleAFullUpdateOnThisCollectionToolStripMenuItem">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="enablescheduleToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="disablescheduleToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">scheduleAFullUpdateOnThisCollectionToolStripMenuItem</Property>
    <Property name="Size">295, 22</Property>
    <Property name="Text">Schedule a Full Update On This Collection</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="enablescheduleToolStripMenuItem">
    <Property name="Name">enablescheduleToolStripMenuItem</Property>
    <Property name="Size">109, 22</Property>
    <Property name="Text">Enable</Property>
    <Event name="Click">enablescheduleToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="disablescheduleToolStripMenuItem">
    <Property name="Name">disablescheduleToolStripMenuItem</Property>
    <Property name="Size">152, 22</Property>
    <Property name="Text">Disable</Property>
    <Event name="Click">disablescheduleToolStripMenuItem_Click</Event>
  </Object>
  <Code><![CDATA[

$MainForm_Load={
	#TODO: Initialize Form Controls here
	$script:RKCMCollectionType = 'Device'
}

function Get-CMSiteConnection
{
	[CmdletBinding()]
	param (
		[parameter(Mandatory = $true)]
		[ValidateNotNullOrEmpty()]
		[string]$SiteServer
	)
	# Determine Site Code
	try
	{
		$SiteCodeObjects = Get-WmiObject -Namespace "root\SMS" -Class SMS_ProviderLocation -ComputerName $SiteServer -ErrorAction Stop
		foreach ($SiteCodeObject in $SiteCodeObjects)
		{
			if ($SiteCodeObject.ProviderForLocalSite -eq $true)
			{
				$SiteCode = $SiteCodeObject.SiteCode
				$txtbox_SiteCode.Text = $SiteCode
				Append-RichtextboxStatus -Component 'Get SiteCode' -Message "Found Site Code $SiteCode"
				$txtbox_SiteServer.ReadOnly = $true
				$btn_search.Enabled = $true
			}
		}
	}
	catch [System.UnauthorizedAccessException] {
		Display-MsgBox -Title "Error" -Message "Access denied, please check if you have access rights to your siteserver" -ButtonSetup 0
		Append-RichtextboxStatus -Component $component -Message "Access denied" -MessageColor 'red'; return
	}
	catch [System.Exception] {
		Display-MsgBox -Title "Error" -Message "Unable to determine Site Code" -ButtonSetup 0
		Append-RichtextboxStatus -Component $component -Message "Unable to determine Site Code" -MessageColor 'red'; return
	}
	# import ConfigurationManager Module
	try
	{
		$CMModulePath = Join-Path -Path (Split-Path -Path "${Env:SMS_ADMIN_UI_PATH}" -ErrorAction Stop) -ChildPath "ConfigurationManager.psd1"
		Import-Module $CMModulePath -ErrorAction Stop
		Set-Location -Path "$Sitecode`:"
		Append-RichtextboxStatus -Component 'Get SiteCode' -Message "Successfully set location to Configuration Manager drive."
	}
	catch [System.Exception] {
		Display-MsgBox -Title "Error" -Message "Unable to load ConfigurationManager Module, please install Admin Console" -ButtonSetup 0
		Append-RichtextboxStatus -Component $component -Message "Unable to load ConfigurationManager Module, please install Admin Console" -MessageColor 'red'; return
	}
	
	$Global:SiteCode = $SiteCode
	$global:SiteServer = $SiteServer
	return $SiteCode
	return $SiteServer
}
function Get-IncrementalStatus
{
    <#
	    .SYNOPSIS
	    Looks at the refreshtype value and returns if incremental updates or enabled or disabled.
	    .DESCRIPTION
	    Looks at the refreshtype value and returns if incremental updates or enabled or disabled.
	    .EXAMPLE
	    Get-IncrementalStatus -RefreshType $RefreshType
	    .EXAMPLE
        Get-IncrementalStatus $RefreshType
        .Notes
        Possible Enumeration Values: 
        MANUAL(1)
        PERIODIC(2)
        CONSTANT_UPDATE(4)
        BOTH(6)
	    #>
	
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[int][ValidateNotNullOrEmpty()]
		$RefreshType
	)
	switch ($RefreshType)
	{
		"1" { $RefreshStatus = $false }
		"2" { $RefreshStatus = $false }
		"4" { $RefreshStatus = $true }
		"6" { $RefreshStatus = $true }
	}
	return [bool]$RefreshStatus
}
function Get-CheckedNodes 
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNodes $treeview.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param(
	[ValidateNotNull()]
	[System.Windows.Forms.TreeNodeCollection] $NodeCollection,
	[ValidateNotNull()]
	[System.Collections.ArrayList]$CheckedNodes)
	
	foreach($Node in $NodeCollection)
	{
		if($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNodes $Node.Nodes $CheckedNodes
	}
}
Function Display-MsgBox
{
	# -Style:
	# 16 Error
	# 32 Question
	# 48 Exclamation
	# 64 Information
	
	# -ButtonSetup
	# 0 OK
	# 1 OKCancel
	# 2 AbortRetryIgnore
	# 3 YesNoCancel
	# 4 YesNo
	# 5 RetryCancel
	
	param (
		[Parameter(Mandatory = $true, Position = 1)]
		$Message,
		[Parameter(Mandatory = $true, Position = 2)]
		$Title,
		[Parameter(Mandatory = $false, Position = 3)]
		$Style = 64,
		[Parameter(Mandatory = $false, Position = 4)]
		$ButtonSetup = 0
	)
	[System.Windows.Forms.MessageBox]::Show($Message, $Title, $ButtonSetup, $Style)
	
}
function Append-RichtextboxStatus
{
	PARAM (
		[Parameter(Mandatory = $true)]
		[string]$Message,
		[string]$MessageColor = "Black",
		[string]$DateTimeColor = "Gray",
		[string]$Component,
		[string]$ComponenetColor = "DarkCyan",
		[String]$ComputerNameColor = "Blue")
	
	$SortableTime = get-date -Format "yyyy-MM-dd HH:mm:ss"
	$Log.SelectionColor = $DateTimeColor
	$Log.AppendText("[$SortableTime] ")
	
	IF ($PSBoundParameters['ComputerName'])
	{
		$Log.SelectionColor = $ComputerNameColor
		$Log.AppendText(("$ComputerName ").ToUpper())
	}
	
	IF ($PSBoundParameters['Component'])
	{
		$Log.SelectionColor = $ComponenetColor
		$Log.AppendText("$Component ")
	}
	
	$Log.SelectionColor = $MessageColor
	$Log.AppendText("$Message`r")
	$Log.Refresh()
	$Log.ScrollToCaret()
	
	Write-Verbose -Message "$SortableTime $Message"
}
function Get-SubNode
{
	param (
		[parameter(Mandatory = $true)]
		[int]$ParentContainerNodeID,
		[parameter(Mandatory = $true)]
		$ParentNode
	)
	$SubNodes = Get-WmiObject -Namespace "root\SMS\Site_$($SiteCode)" -Class SMS_ObjectContainerNode -ComputerName $SiteServer -Filter "ParentContainerNodeID = $($ParentContainerNodeID) AND ObjectType = $RKObjectType"
	if ($SubNodes -ne $null)
	{
		foreach ($SubNode in ($SubNodes | Sort-Object -Property Name))
		{
			$Node = $ParentNode.Nodes.Add($SubNode.ContainerNodeID, $SubNode.Name)
			Append-RichtextboxStatus -Component 'Retrieving Folder Structure' -Message "Found sub folder $($SubNode.Name)"
			Get-SubNode -ParentContainerNodeID $SubNode.ContainerNodeID -ParentNode $Node
		}
	}
}

function Enable-ChildNode($Node)
{
	
	foreach ($n in $Node.nodes)
	{
		#$CheckStatus = $Node.checked		
		if ($n.checked -eq $true)
		{
			Append-RichtextboxStatus -Component 'Tree Control' -Message "$($n.Text) already enabled."
		}
		else
		{
			$n.checked = $true
			Append-RichtextboxStatus -Component 'Tree Control' -Message "$($n.Text) enabled."
		}
		Enable-ChildNode($n)
	}
}

function Disable-ChildNode($Node)
{
	
	foreach ($n in $Node.nodes)
	{
		#$CheckStatus = $Node.checked		
		if ($n.checked -eq $false)
		{
			Append-RichtextboxStatus -Component 'Tree Control' -Message "$($n.Text) already disabled."
		}
		else
		{
			$n.checked = $false
			Append-RichtextboxStatus -Component 'Tree Control' -Message "$($n.Text) disabled."
		}
		Disable-ChildNode($n)
	}
}
Function Get-CMFolderStructure
{
    <#
    .SYNOPSIS
    Retrives the folder structure for Device and User Collections in Configuration Manager.
    .DESCRIPTION
    Retrives the folder structure for Device and User Collections in Configuration Manager.
    .EXAMPLE
    Get-CMFolderStructure -SiteCode 'PS1' -SiteServer 'CM01.Corp.Viamonstra.Com' -RKCMCollectionType 'Devce'
    .EXAMPLE
	Get-CMFolderStructure 'PS1' 'CM01.Corp.Viamonstra.Com' 'Devce'
    #>
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[System.String][ValidateNotNullOrEmpty()]
		$SiteServer,
		[Parameter(Mandatory = $true, Position = 1)]
		[System.String][ValidateNotNullOrEmpty()]
		$SiteCode,
		[Parameter(Mandatory = $true, Position = 2)]
		[System.String][ValidateSet('Device','User')]
		$RKCMCollectionType
	)
	
	switch ($RKCMCollectionType)
	{
		'Device' {
			$RKObjectType = '5000'
		}
		
		'User' {
			$RKObjectType = '5001'
		}
	}
	
	Append-RichtextboxStatus -Component 'Retrieving Folder Structure' -Message 'Searching'
	$TreeView.Nodes.Clear()
	$treeview.CheckBoxes = $true
	# Create the root node
	$RootNode = $TreeView.Nodes.Add("Root")
	# Determine top level Container Node items for Device Collections
	$RootNodes = Get-WmiObject -Namespace "root\SMS\Site_$($SiteCode)" -Class SMS_ObjectContainerNode -ComputerName $SiteServer -Filter "ParentContainerNodeID = 0 AND ObjectType = $RKObjectType"
	foreach ($Node in ($RootNodes | Sort-Object -Property Name))
	{
		$CurrentNode = $RootNode.Nodes.Add($Node.ContainerNodeID, $Node.Name)
		Append-RichtextboxStatus -Component 'Retrieving Folder Structure' -Message "Found $($Node.Name)"
		Get-SubNode -ParentContainerNodeID $Node.ContainerNodeID -ParentNode $CurrentNode
	}
	$treeview.ExpandAll()
	Append-RichtextboxStatus -Component 'Retrieving Folder Structure' -Message 'Done!'
}

function Get-CMFolderObjects
{
	    <#
	        .SYNOPSIS
	        Helps return devices collectiosn in a folder.
	        .DESCRIPTION
	        This function retrives all the device collections within a folder within Configuration Manager
	        .EXAMPLE
	        Get-CMFolderObjects -SiteCode 'PS1' -SiteServer 'CM01.Corp.Viamonstra.Com' -ContainerID '16777217'
	        .EXAMPLE
            Get-CMFolderObjects PS1 CM01.Corp.Viamonstra.Com -ContainerID 16777217
            .EXAMPLE
            Return all device collections in the root folder
            Get-CMFolderObject -SiteCode 'PS1' -SiteServer 'CM01'
            .EXAMPLE
            Return all device collections in the root folder
            Get-CMFolderObject -SiteCode 'PS1' -SiteServer 'CM01' -ContainerID '0'
	    #>
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[System.String][ValidateNotNullOrEmpty()]
		[ValidateLength(3, 3)]
		$SiteCode,
		[Parameter(Mandatory = $true, Position = 1)]
		[System.String][ValidateNotNullOrEmpty()]
		$SiteServer,
		[Parameter(Mandatory = $true, Position = 2)]
		[int][ValidateNotNullOrEmpty()]
		$ContainerID,
		[Parameter(Mandatory = $true, Position = 3)]
		[System.String][ValidateSet('Device', 'User')]
		$RKCMCollectionType
	)
	
	switch ($RKCMCollectionType)
	{
		'Device' {
			$RKObjectType = '5000'
			$RKCollectionType = '2'
		}
		
		'User' {
			$RKObjectType = '5001'
			$RKCollectionType = '1'
		}
	}
	
	switch ($ContainerID)
	{
		"0" {
			$Query = "select * from SMS_Collection where CollectionType=$RKCollectionType and NOT CollectionID is in
                (select InstanceKey from SMS_ObjectContainerItem where ObjectType=$RKObjectType)"
		}
		
		default
		{
			$Query = "select * from SMS_Collection where CollectionID is in
                (select InstanceKey from SMS_ObjectContainerItem where ObjectType=$RKObjectType
                and ContainerNodeID='$ContainerID') and CollectionType=$RKCollectionType"
		}
	}
	Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Query $Query
}


function Get-RKCollections
{
	$CheckedNodes = New-Object System.Collections.ArrayList
	$Component = 'Import Collections'
	$Select = $false
	$DGVArray = @()
	Get-CheckedNodes $treeview.Nodes $CheckedNodes
	foreach ($node in $CheckedNodes)
	{
		$CollCount = 0
		$CMFolderObjectsCount = 0
		$CMFolderObjects = $null
		$CMFolderObjects = @(Get-CMFolderObjects -SiteCode $SiteCode -SiteServer $SiteServer -ContainerID $node.Name -RKCMCollectionType $RKCMCollectionType)
		$CMFolderObjectsCount = $CMFolderObjects.Count
		$FolderText = $node.Text
		
		$progressbaroverlay1.Maximum = $CMFolderObjectsCount
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		
		Append-RichtextboxStatus -Message "Importing $CMFolderObjectsCount collection/s from folder $FolderText" -Component $Component
		foreach ($Collection in $CMFolderObjects)
		{
			$CollectionRefesh = Get-CollectionRefresh -Collection $Collection
			$CollCount++
			$progressbaroverlay1.PerformStep()
			$Refreshinfo = Get-IncrementalStatus -RefreshType $Collection.RefreshType
			$Object = [PSCustomObject]@{
				Select = $Select
				'Collection' = $Collection.Name
				Folder = $FolderText
				Incremental = $Refreshinfo
				'Scheduled' = Get-CMScheduleStatus -RKCMStatus $Collection.RefreshType
				'Refresh Schedule' = $CollectionRefesh.RefreshDate
				'Start Time' = [string]$CollectionRefesh.RefreshTime
				'New Schedule String' = '0'
			}
			$DGVArray += $Object
			$progressbaroverlay1.TextOverlay = "Adding Collection $($CollCount) / $($CMFolderObjectsCount)"
		}
	}
	$datagridview1.DataSource = ConvertTo-DataTable $DGVArray
	$progressbaroverlay1.TextOverlay = 'Collections Imported!'
	$datagridview1.Columns[1].ReadOnly = $true
	$datagridview1.Columns[2].ReadOnly = $true
	$datagridview1.Columns[3].ReadOnly = $true
	$datagridview1.Columns[4].ReadOnly = $true
	$datagridview1.Columns[5].ReadOnly = $true
	$datagridview1.Columns[6].ReadOnly = $true
	$datagridview1.Columns[0].Width = 70
	$datagridview1.Columns[1].Width = 300
	$datagridview1.Columns[2].Width = 120
	$datagridview1.Columns[3].Width = 80
	$datagridview1.Columns[4].Width = 80
	$datagridview1.Columns[5].Width = 200
	$datagridview1.Columns[6].Width = 110
}

Function Convert-DayNumbersToDayName
{
	[CmdletBinding()]
	Param (
		[String]$DayNumber
	)
	
	Switch ($DayNumber)
	{
		"1" { $DayName = "Sunday" }
		"2" { $DayName = "Monday" }
		"3" { $DayName = "TuesDay" }
		"4" { $DayName = "WednesDay" }
		"5" { $DayName = "ThursDay" }
		"6" { $DayName = "FriDay" }
		"7" { $DayName = "Saturday" }
		
	}
	
	Return $DayName
}
Function Convert-MonthToNumbers
{
	[CmdletBinding()]
	Param (
		[String]$MonthNumber
	)
	
	Switch ($MonthNumber)
	{
		"1" { $MonthName = "January" }
		"2" { $MonthName = "Feburary" }
		"3" { $MonthName = "March" }
		"4" { $MonthName = "April" }
		"5" { $MonthName = "May" }
		"6" { $MonthName = "June" }
		"7" { $MonthName = "July" }
		"8" { $MonthName = "August" }
		"9" { $MonthName = "September" }
		"10" { $MonthName = "October" }
		"11" { $MonthName = "November" }
		"12" { $MonthName = "December" }
	}
	
	Return $MonthName
}
Function Convert-WeekOrderNumber
{
	[CmdletBinding()]
	Param (
		[String]$WeekOrderNumber
	)
	
	Switch ($WeekOrderNumber)
	{
		0 { $WeekOrderName = "Last" }
		1 { $WeekOrderName = "First" }
		2 { $WeekOrderName = "Second" }
		3 { $WeekOrderName = "Third" }
		4 { $WeekOrderName = "Fourth" }
		
	}
	
	Return $WeekOrderName
}

function Get-CollectionRefresh
{
    <#
        .SYNOPSIS
        Retrieves refreshdate and time for a collection.
        .DESCRIPTION
        This function retrives the collection refreshdate and time for a given collection
        .EXAMPLE
        Get-CollectionRefresh -Collection $Collection
        .EXAMPLE
        Get-CollectionRefresh $Collection
    #>
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[System.Array][ValidateNotNullOrEmpty()]
		$Collection
	)		
	$Collection.__PATH
	$Collection = [wmi]$Collection.__path
	
	$CollectionRefresh = $null
	$CollectionRefresh = @()
	$Object = New-Object -Type System.Object
	
	if ($Collection.RefreshType -eq 1)
	{
		
		$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value ""
		$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ""
	}
	
	Else
	{
		switch ($Collection.RefreshSchedule.__CLASS)
		{
			"SMS_ST_RecurWeekly" {
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value ("Occures every: $($Collection.RefreshSchedule.ForNumberOfWeeks) weeks on " + (Convert-DayNumbersToDayName -DayNumber $Collection.RefreshSchedule.Day))
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
			}
			
			"SMS_ST_RecurInterval" {
				
				if ($Collection.RefreshSchedule.DaySpan -ne 0)
				{
					$text = "Occures every $($Collection.RefreshSchedule.DaySpan) days"
				}
				if ($Collection.RefreshSchedule.HourSpan -ne 0)
				{
					$text = "Occures every $($Collection.RefreshSchedule.HourSpan) hours"
				}
				if ($Collection.RefreshSchedule.MinuteSpan -ne 0)
				{
					$text = "Occures every $($Collection.RefreshSchedule.MinuteSpan) minutes"
				}
				
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value $text
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
			}
			
			"SMS_ST_RecurMonthlyByDate" {
				
				If ($Collection.RefreshSchedule.MonthDay -eq 0)
				{
					
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value "Occures the last day of every $($Collection.RefreshSchedule.ForNumberOfMonths) months"
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
				}
				Else
				{
					
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value "Occures day $($Collection.RefreshSchedule.MonthDay) of every $($Collection.RefreshSchedule.ForNumberOfMonths) months"
					$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
				}
			}
			
			"SMS_ST_RecurMonthlyByWeekday" {
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value ("Occures the " + (Convert-WeekOrderNumber -weekordernumber $Collection.RefreshSchedule.WeekOrder) + " " + (Convert-DayNumbersToDayName -DayNumber $Collection.RefreshSchedule.Day) + " of every " + (Convert-MonthToNumbers -MonthNumber $Collection.RefreshSchedule.ForNumberOfMonths))
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
			}
			
			"SMS_ST_NonRecurring" {
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshDate" -Value "No Recurrence. The Scheduled event Occures once at the specific time"
				$Object | Add-Member -MemberType NoteProperty -Name "RefreshTime" -Value ([System.Management.ManagementDateTimeConverter]::ToDateTime($Collection.RefreshSchedule.StartTime))
			}
		}
	}
	
	$CollectionRefresh += $Object
	$CollectionRefresh
}

function Get-CMScheduleStatus
{
    <#
	    .SYNOPSIS
	    converts the schedule status from [int] to [bool]
	    .DESCRIPTION
	    converts the schedule status from [int] to [bool]
	    .EXAMPLE
	    Get-CMScheduleStatus -RKCMStatus 4
	    .EXAMPLE
        Get-CMScheduleStatus 1
        .Notes
        Possible Enumeration Values: 
        1 = Manual Update only
        2 = Scheduled Updates only
        4 = Incremental Updates Only 
        6 = Incremental and Scheduled Updates  
	    #>
	
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[int][ValidateNotNullOrEmpty()]
		[ValidateSet(1, 2, 4, 6)]
		$RKCMStatus
	)
	switch ($RKCMStatus)
	{
		1 { $CollectionTypeReturn = $false }
		2 { $CollectionTypeReturn = $true }
		4 { $CollectionTypeReturn = $false }
		6 { $CollectionTypeReturn = $true }
	}
	return [bool]$CollectionTypeReturn
}

$btn_ImportCollections_Click={
	#TODO: Place custom script here
	$btn_ImportCollections.Enabled = $false
	$progressbaroverlay1.Visible = $true
	Get-RKCollections
	if ($datagridview1.rows.Count -eq 0) {
		$checkbox0.Visible = $false
		$btn_start.Enabled = $false
		$btn_stop.Enabled = $false
	} else {
		$checkbox0.Visible = $true
		$btn_start.Enabled = $true
		$btn_stop.Enabled = $true
	}
	$btn_ImportCollections.Enabled = $true
}

$btn_Connect_Click={
	#TODO: Place custom script here
	$btn_Connect.Enabled = $false
	Append-RichtextboxStatus -Message "Getting SiteCode information"
	$SiteServer = $txtbox_SiteServer.Text
	if (!$SiteServer)
	{
		Append-RichtextboxStatus -Message "SiteServer is empty, please input SiteServer name" -MessageColor 'red'
	}
	else
	{
		Get-CMSiteConnection -SiteServer $SiteServer
	}
	$btn_Connect.Enabled = $true
}

$txtbox_SiteCode_TextChanged={
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{	
			$array.Add($Item)	
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($Table -eq $null)
	{
		$Table = New-Object System.Data.DataTable
	}

	if($InputObject-is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	else
	{
		if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()

			if($InputObject -eq $null){ return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach($item in $InputObject)
			{
				if($item -ne $null)
				{
					$object = $item
					break	
				}
			}

			if($object -eq $null) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if($prop.Value -ne $null)
					{
						try{ $type = $prop.Value.GetType() } catch {}
					}

					if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
		      			[void]$table.Columns.Add($prop.Name, $type) 
					}
					else #Type info not found
					{ 
						[void]$table.Columns.Add($prop.Name) 	
					}
				}
		    }
			
			if($object -is [System.Data.DataRow])
			{
				foreach($item in $InputObject)
				{	
					$Table.Rows.Add($item)
				}
				return  @(,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()	
		}
		
		foreach($item in $InputObject)
		{		
			$row = $table.NewRow()
			
			if($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}

	return @(,$Table)	
}
#endregion

$checkbox0_CheckedChanged={
	#TODO: Place custom script here
	#progressbar
	$Time = Measure-Command {
		$SelectedRowCount = 0
		$AllRowCount = 0
		for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
		{
			$AllRowCount++
		}
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.TextOverlay = ''
		$progressbaroverlay1.Maximum = $AllRowCount
		
		if ($checkbox0.checked -eq $true)
		{
			$checkbox0.Enabled = $false
			
			Append-RichtextboxStatus -Message 'Selecting all collections, please wait...' -Component 'Select'
			
			$datagridview1.Columns[3].ReadOnly = $false
			
			for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
			{
				#progressbar
				$SelectedRowCount++
				$progressbaroverlay1.TextOverlay = "Selecting all collections $($SelectedRowCount) / $($AllRowCount)"
				[System.Windows.Forms.Application]::DoEvents()
				$progressbaroverlay1.PerformStep()
				$selectedname = $($datagridview1.Rows[$RowIndex].cells[1].value)
				if (($selectedname -eq 'All Systems') -or
				($selectedname -eq 'All Unknown Computers') -or
				($selectedname -eq 'All Mobile Devices') -or
				($selectedname -eq 'All Desktop and Server Clients'))
				{
					Append-RichtextboxStatus -Message "$selectedname - is a read only Collection" -Component 'Select'
				}
				else
				{
					$datagridview1.Rows[$RowIndex].cells[0].value = $true					
					Append-RichtextboxStatus -Message "Selected $selectedname" -Component 'Select'
				}				
			}
			
			Append-RichtextboxStatus -Message "Done" -Component 'Select'
			$progressbaroverlay1.TextOverlay = 'All selected!'
			
			$checkbox0.Enabled = $true
		}
		
		if ($checkbox0.checked -eq $false)
		{
			Append-RichtextboxStatus -Message "De-selecting all collections please wait..." -Component 'De-Select'
			$checkbox0.Enabled = $false
			
			$datagridview1.Columns[3].ReadOnly = $true
			
			for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
			{
				#progressbar
				$SelectedRowCount++
				$progressbaroverlay1.TextOverlay = "Deselecting all collections $($SelectedRowCount) / $($AllRowCount)"
				[System.Windows.Forms.Application]::DoEvents()
				$progressbaroverlay1.PerformStep()
				
				
				$datagridview1.Rows[$RowIndex].cells[0].value = $false
				$selectedname = $($datagridview1.Rows[$RowIndex].cells[1].value)
				Append-RichtextboxStatus -Message "Deselected $selectedname" -Component 'De-Select'
			}
			Append-RichtextboxStatus -Message "Done" -Component 'De-Select'
			$progressbaroverlay1.TextOverlay = 'All de-selected!'
			
			$checkbox0.Enabled = $true
		}
	}
	Append-RichtextboxStatus -Component 'Time' -Message $Time.TotalSeconds
}

$Select_CheckedChanged={
	#TODO: Place custom script here
}

Function Set-DGVStatus
{
	for ($i = 0; $i -lt $datagridview1.RowCount; $i++)
	{
		if ($datagridview1.Rows[$i].Cells[0].Value -eq $true)
		{
			$datagridview1.Rows[$i].DefaultCellStyle.BackColor = 'LightYellow'
		}
		else
		{
			#do nothing
		}
	}
}

function Set-RKCollection
{
    <#
    .SYNOPSIS
    Short Description
    .DESCRIPTION
    Detailed Description
    .EXAMPLE
    Set-RKCollection
    .NOTES
    The following refresh types exist for Configuration Manager collections  
    6 = Incremental and Scheduled Updates  
    4 = Incremental Updates Only  
    2 = Scheduled Updates only  
    1 = Manual Update only 
    .EXAMPLE
    Set-RKCollection
  #>
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[System.String]$SiteServer,
		[Parameter(Mandatory = $true, Position = 1)]
		[System.String]$SiteCode,
		[Parameter(Mandatory = $true, Position = 2)]
		[System.String]$Name,
		[Parameter(Mandatory = $true, Position = 3)]
		[int][ValidateSet(1, 2, 4, 6)]
		$RefreshType
	)
	switch ($RefreshType)
	{
		"1" {
			try
			{
				$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
				$CollectionQuery = [wmi]$CollectionQuery.__PATH
				$CollectionQuery.RefreshType = 1
				$CollectionQuery.Put()
				Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
			}
			catch
			{
				Append-RichtextboxStatus -Component 'Configure Collection' -Message "Failed to update collection $Name"
			}
		}
		"2" {
			try
			{
				if ($RKScheduleString)
				{
					$RKSchedule = Convert-CMSchedule -ScheduleString $RKScheduleString
					$RKSchedconverted = $RKSchedule.psbase.managedobject
					$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
					$CollectionQuery = [wmi]$CollectionQuery.__PATH
					$CollectionQuery.RefreshType = 2
					$CollectionQuery.RefreshSchedule = $RKSchedconverted
					$CollectionQuery.Put()
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
				}
				elseif (!($RKScheduleString))
				{
					$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
					$CollectionQuery = [wmi]$CollectionQuery.__PATH
					$CollectionQuery.RefreshType = 2
					$CollectionQuery.Put()
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
				}
			}
			catch
			{
				Append-RichtextboxStatus -Component 'Configure Collection' -Message "Failed to update collection $Name" -MessageColor 'Red'
			}
		}
		"4" {
			try
			{
				$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
				$CollectionQuery = [wmi]$CollectionQuery.__PATH
				$CollectionQuery.RefreshType = 4
				$CollectionQuery.Put()
				Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
				
			}
			catch
			{
				Append-RichtextboxStatus -Component 'Configure Collection' -Message "Failed to update collection $Name" -MessageColor 'Red'
			}
		}
		"6" {
			try
			{
				if ($RKScheduleString)
				{
					$RKSchedule = Convert-CMSchedule -ScheduleString $RKScheduleString
					$RKSchedconverted = $RKSchedule.psbase.managedobject
					$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
					$CollectionQuery = [wmi]$CollectionQuery.__PATH
					$CollectionQuery.RefreshType = 6
					$CollectionQuery.RefreshSchedule = $RKSchedconverted
					$CollectionQuery.Put()
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
				}
				elseif (!($RKScheduleString))
				{
					$CollectionQuery = Get-WmiObject -ComputerName $SiteServer -Namespace "Root\SMS\Site_$SiteCode" -Class SMS_Collection -Filter "Name='$Name'"
					$CollectionQuery = [wmi]$CollectionQuery.__PATH
					$CollectionQuery.RefreshType = 6
					$CollectionQuery.Put()
					Append-RichtextboxStatus -Component 'Configure Collection' -Message "$Name - Saved"
				}		
			}
			catch
			{
				Append-RichtextboxStatus -Component 'Configure Collection' -Message "Failed to update collection $Name" -MessageColor 'Red'
			}
		}
	}
}

$contextmenu_Opening=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$deselectToolStripMenuItem_Click={
	#TODO: Place custom script here
	Append-RichtextboxStatus -Component 'Right Click' -Message "Deselecting all highlighted rows"
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCheckedState = $item.Cells[0].value
		$RowCollectionName = $Item.Cells[1].Value
		if ($RowCheckedState -eq $false)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName already taken out of update mode."
		}
		elseif ($RowCheckedState -eq $true)
		{
			$item.Cells[0].Value = $false
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName taken out of update mode"
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName"
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Disabling Collection For Update $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

$removeIncrementalUpdatesToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Append-RichtextboxStatus -Component 'Right Click' -Message "Deselecting all highlighted rows"
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCollectionName = $Item.Cells[1].Value
		$RowCheckedState = $item.Cells[0].value
		if ($RowCheckedState -eq $true)
		{
			$IncCheckedState = $item.Cells[3].value			
			if ($IncCheckedState -eq $false)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName incremental update already disabled."
			}
			elseif ($IncCheckedState -eq $true)
			{
				$item.Cells[3].Value = $false
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName incremental update disabled"
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
			}
		}
		elseif ($RowCheckedState -eq $false)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode, unable to change incremental state" -MessageColor 'Red'
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the selected state." -MessageColor 'Red'
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Removing Incremental Update $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

Function set-NewCMSchedule {
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCollectionName = $Item.Cells[1].Value
		$RowCheckedState = $item.Cells[0].value
		if ($RowCheckedState -eq $true)
		{
			$item.Cells[5].Value = $script:Token.RefreshDate
			$item.Cells[6].Value = $script:Token.StartTime
			$item.Cells[7].value = Convert-CMSchedule -ScheduleToken $script:CFSchedule
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName schedule updated"
		}
		elseif ($RowCheckedState -eq $false)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode unable to change shedule state" -MessageColor 'Red'
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the selected state." -MessageColor 'Red'
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Updating Schedule On Collection $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

$addIncrementalUpdatesToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Append-RichtextboxStatus -Component 'Right Click' -Message "Adding incremental updates to all highlighted rows that are selected"
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCollectionName = $Item.Cells[1].Value
		$RowCheckedState = $item.Cells[0].value
		if ($RowCheckedState -eq $true)
		{
			$IncCheckedState = $item.Cells[3].value
			if ($IncCheckedState -eq $true)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName incremental update already enabled."
			}
			elseif ($IncCheckedState -eq $false)
			{
				$item.Cells[3].Value = $true
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName incremental update enabled"
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
			}
		}
		elseif ($RowCheckedState -eq $false)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode, unable to change incremental state" -MessageColor 'Red'
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the selected state." -MessageColor 'Red'
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Adding Incremental Update $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

$selectToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Append-RichtextboxStatus -Component 'Right Click' -Message "selecting all highlighted rows"
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCheckedState = $item.Cells[0].value
		$RowCollectionName = $Item.Cells[1].Value		
		if ($RowCheckedState -eq $true)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName already in update mode."
		}
		elseif (($RowCollectionName -eq 'All Systems') -or
			($RowCollectionName -eq 'All Unknown Computers') -or
			($RowCollectionName -eq 'All Mobile Devices') -or
			($RowCollectionName -eq 'All Desktop and Server Clients') -or
			($RowCollectionName -eq 'All Users') -or
			($RowCollectionName -eq 'All User Groups') -or
			($RowCollectionName -eq 'All Users and User Groups')) {
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName is a readonly Collection"
		}
		elseif ($RowCheckedState -eq $false)
		{
			$item.Cells[0].Value = $true
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName placed in update mode"
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Enabling Collection For Update $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

$btn_filter_Click={
	#TODO: Place custom script here
	$datagridview1.DataSource.DefaultView.RowFilter = "Collection LIKE '*$($txtbox_Filter.Text)*'"
	Set-DGVStatus
}

$btn_nofilter_Click={
	#TODO: Place custom script here
	$txtbox_Filter.Text = $null
	$datagridview1.DataSource.DefaultView.RowFilter = "Collection LIKE '*$($txtbox_Filter.Text)*'"
	Set-DGVStatus
}

$datagridview1_Sorted={
	#TODO: Place custom script here
	Set-DGVStatus
}

$SelectAllNodes_Click={
	#TODO: Place custom script here
	if ($Treeview.SelectedNode.Checked -eq $true) {
		Append-RichtextboxStatus -Component 'Tree Control' -Message "$($Treeview.SelectedNode.Text) already enabled."
	} elseif ($Treeview.SelectedNode.Checked -eq $false) {
		$Treeview.SelectedNode.Checked = $true
		Append-RichtextboxStatus -Component 'Tree Control' -Message "$($Treeview.SelectedNode.Text) enabled."
	}
	Enable-ChildNode($Treeview.SelectedNode)
}

$DeSelectAllNodes_Click={
	#TODO: Place custom script here
	if ($Treeview.SelectedNode.Checked -eq $false)
	{
		Append-RichtextboxStatus -Component 'Tree Control' -Message "$($Treeview.SelectedNode.Text) already disabled."
	}
	elseif ($Treeview.SelectedNode.Checked -eq $true)
	{
		$Treeview.SelectedNode.Checked = $false
		Append-RichtextboxStatus -Component 'Tree Control' -Message "$($Treeview.SelectedNode.Text) disabled."
	}
	
	Disable-ChildNode($Treeview.SelectedNode)
}

$contextmenutree_Opening=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	if ($Treeview.SelectedNode)
	{
		$SelectAllNodes.Enabled = $true
		$DeSelectAllNodes.Enabled = $true
	}
	elseif (!($Treeview.SelectedNode))
	{
		$SelectAllNodes.Enabled = $false
		$DeSelectAllNodes.Enabled = $false
		Append-RichtextboxStatus -Component 'Tree Control' -MessageColor 'Red' -Message 'You need to highlight a folder in the tree on the left to be able to use the context menu'
	}
	else
	{
		Append-RichtextboxStatus -Component 'Tree Control' -Message "There were problems looking up highlighted status of a node during right click" -MessageColor 'Red'
	}
}

$treeview_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	#TODO: Place custom script here
}

$SetRefreshScheduleToolStripMenuItem_Click={
	#TODO: Place custom script here
	if ((Call-ChildForm_psf) -eq 'OK')
	{
		set-NewCMSchedule
	}
}

$btn_start_Click={
	#TODO: Place custom script here
	# Determine selected row count
	$script:CancelLoop = $false
	$btn_stop.Enabled = $true
	$datagridview1.ClearSelection()
	$btn_start.Enabled = $false
	$SelectedRowCount = 0
	$AllRowCount = 0
	
	for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
	{
		if ($datagridview1.Rows[$RowIndex].Cells[0].Value -eq $true)
		{
			$AllRowCount++
		}
	}
	
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $AllRowCount
	
	# Enumerate through selected rows in DataGridView
	for ($RowIndex = 0; $RowIndex -lt $datagridview1.RowCount; $RowIndex++)
	{
		if ($script:CancelLoop -eq $true)
		{
			#Clear the progress bar
			$progressbaroverlay1.Value = 0
			$progressbaroverlay1.TextOverlay = "Stopped"
			#Exit the loop
			$btn_start.Enabled = $true
			return
		}
		
		$RowCheckedState = $datagridview1.Rows[$RowIndex].Cells[0].Value
		$RowCollectionName = $datagridview1.Rows[$RowIndex].Cells[1].Value
		$IncCheckedState = $datagridview1.Rows[$RowIndex].Cells[3].Value
		$SchedCheckedState = $datagridview1.Rows[$RowIndex].Cells[4].Value
		if ($datagridview1.Rows[$RowIndex].Cells[7].Value -eq '0')
		{
			$RKScheduleString = $null
		}
		else
		{
			$RKScheduleString = $datagridview1.Rows[$RowIndex].Cells[7].Value
		}
		
		if ($RowCheckedState -eq $true)
		{
			if ($SchedCheckedState -eq $false -and $IncCheckedState -eq $false)
			{
				# Manual
				Set-RKCollection -SiteServer $SiteServer -SiteCode $SiteCode -Name $RowCollectionName -RefreshType 1
			}
			elseif ($SchedCheckedState -eq $true -and $IncCheckedState -eq $false)
			{
				# Scheduled Only
				Set-RKCollection -SiteServer $SiteServer -SiteCode $SiteCode -Name $RowCollectionName -RefreshType 2
			}
			elseif ($SchedCheckedState -eq $false -and $IncCheckedState -eq $true)
			{
				# Incremental Only
				Set-RKCollection -SiteServer $SiteServer -SiteCode $SiteCode -Name $RowCollectionName -RefreshType 4
			}
			elseif ($SchedCheckedState -eq $true -and $IncCheckedState -eq $true)
			{
				# Scheduled and Incremental
				Set-RKCollection -SiteServer $SiteServer -SiteCode $SiteCode -Name $RowCollectionName -RefreshType 6
			}
			$SelectedRowCount++
			$progressbaroverlay1.PerformStep()
			$progressbaroverlay1.TextOverlay = "Saving settings $($SelectedRowCount) / $($AllRowCount)"
			$datagridview1.Rows[$RowIndex].Cells[0].Value = $false
			$progressbaroverlay1.Update()
			[System.Windows.Forms.Application]::DoEvents()
		}
	}
	
	$progressbaroverlay1.TextOverlay = 'All Collections have been updated'
	$btn_start.Enabled = $true
}


$datagridview1_CellPainting=[System.Windows.Forms.DataGridViewCellPaintingEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellPaintingEventArgs]
	#TODO: Place custom script here
	if ($_.RowIndex -ge 0 -and $_.ColumnIndex -ge 0)
	{
		if ($_.ColumnIndex -eq 0)
		{
			$RKCellV = $this.Rows[$_.RowIndex].Cells[1].Value
			
			if (($RKCellV -eq 'All Systems') -or
			($RKCellV -eq 'All Unknown Computers') -or
			($RKCellV -eq 'All Mobile Devices') -or
			($RKCellV -eq 'All Desktop and Server Clients') -or
			($RKCellV -eq 'All Users') -or
			($RKCellV -eq 'All User Groups') -or
			($RKCellV -eq 'All Users and User Groups'))
			{
				$this.Rows[$_.RowIndex].Cells | % { $_.Style.BackColor = 'LightGray' }
				$this.Rows[$_.RowIndex].Cells | % { $_.ReadOnly = $true }
			}
			elseif ($this.Rows[$_.RowIndex].Cells[0].Value)
			{
				$this.Rows[$_.RowIndex].Cells | %{ $_.Style.BackColor = 'LightYellow' }
				$this.Rows[$_.RowIndex].cells[3].readonly = $false
				$this.Rows[$_.RowIndex].cells[4].readonly = $false
				
			}
			else
			{
				$this.Rows[$_.RowIndex].Cells | ForEach-Object{ $_.Style.BackColor = 'white' }
				$this.Rows[$_.RowIndex].cells[3].readonly = $true
				$this.Rows[$_.RowIndex].cells[4].readonly = $true
			}
		}
	}
}




$enablescheduleToolStripMenuItem_Click={
	#TODO: Place custom script here
	Append-RichtextboxStatus -Component 'Right Click' -Message "Enabling scheduled updates to all highlighted rows that are selected"
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCollectionName = $Item.Cells[1].Value
		$RowCheckedState = $item.Cells[0].value
		if ($RowCheckedState -eq $true)
		{
			$SchedCheckedState = $item.Cells[4].value
			if ($SchedCheckedState -eq $true)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName scheduled update already enabled"
			}
			elseif ($SchedCheckedState -eq $false)
			{
				$item.Cells[4].Value = $true
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName scheduled update enabled"
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
			}
		}
		elseif ($RowCheckedState -eq $false)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode, unable to change schedule state" -MessageColor 'Red'
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the enabled state" -MessageColor 'Red'
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Enabling Scheduled Updates $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

$disablescheduleToolStripMenuItem_Click={
	#TODO: Place custom script here
	Append-RichtextboxStatus -Component 'Right Click' -Message "Disabling scheduled updates to all highlighted rows that are selected"
	#Progressbar
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Maximum = $datagridview1.SelectedRows.Count
	foreach ($item in $datagridview1.SelectedRows)
	{
		$RowCollectionName = $Item.Cells[1].Value
		$RowCheckedState = $item.Cells[0].value
		if ($RowCheckedState -eq $true)
		{
			$SchedCheckedState = $item.Cells[4].value
			if ($SchedCheckedState -eq $false)
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName scheduled update already disabled"
			}
			elseif ($SchedCheckedState -eq $true)
			{
				$item.Cells[4].Value = $false
				Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName scheduled update disabled"
			}
			else
			{
				Append-RichtextboxStatus -Component 'Right Click' -Message "There were problems with $RowCollectionName" -MessageColor 'Red'
			}
		}
		elseif ($RowCheckedState -eq $false)
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName not in update mode, unable to change schedule state" -MessageColor 'Red'
		}
		else
		{
			Append-RichtextboxStatus -Component 'Right Click' -Message "$RowCollectionName There was a problem reading the selected state" -MessageColor 'Red'
		}
		$progressbaroverlay1.PerformStep()
		$progressbaroverlay1.TextOverlay = "Disabling Scheduled Updates $($progressbaroverlay1.Value) / $($progressbaroverlay1.Maximum)"
		$progressbaroverlay1.Update()
	}
}

$btn_stop_Click={
	#TODO: Place custom script here
	Append-RichtextboxStatus -Message 'Stopped'
	$script:CancelLoop = $true
	$btn_stop.Enabled = $false
	
}

$datagridview1_CurrentCellDirtyStateChanged={
	#TODO: Place custom script here
	if ($this.IsCurrentCellDirty)
	{
		$this.CommitEdit([System.Windows.Forms.DataGridViewDataErrorContexts]::Commit)
	}
}

$radiodbtn_device_CheckedChanged={
	#TODO: Place custom script here
	if ($this.checked -eq $true)
	{
		$script:RKCMCollectionType = 'Device'
		$TreeView.Nodes.Clear()
		$treeview.CheckBoxes = $true
	}
}

$radiodbtn_user_CheckedChanged={
	#TODO: Place custom script here
	if ($this.checked -eq $true)
	{
		$script:RKCMCollectionType = 'User'
		$TreeView.Nodes.Clear()
		$treeview.CheckBoxes = $true
	}
}

$btn_search_Click={
	#TODO: Place custom script here
	Get-CMFolderStructure -SiteCode $SiteCode -SiteServer $SiteServer -RKCMCollectionType $script:RKCMCollectionType
}

$datagridview1_DataBindingComplete=[System.Windows.Forms.DataGridViewBindingCompleteEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewBindingCompleteEventArgs]
	#TODO: Place custom script here
	$this.Columns[7].Visible = $false
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>